/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Chat
import io.swagger.client.model.ChatChannel
import io.swagger.client.model.ConnectedUsers
import io.swagger.client.model.Error
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object ChatApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[Chat] (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * @param count Number of results to fetch.
   * @param start Starting ID for results.
   * @param reverse If true, will sort results newest first.
   * @param channelID Channel id. GET /chat/channels for ids. Leave blank for all.
   */
  def chat.get(count: Option[Double], start: Option[Double], reverse: Option[Boolean], channelID: Option[Double] = None): ApiRequest[Seq[Chat]] =
    ApiRequest[Seq[Chat]](ApiMethods.GET, "https://localhost/api/v1", "/chat", "application/json")
      .withQueryParam("count", count)
      .withQueryParam("start", start)
      .withQueryParam("reverse", reverse)
      .withQueryParam("channelID", channelID)
      .withSuccessResponse[Seq[Chat]](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[ChatChannel] (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   */
  def chat.getChannels(): ApiRequest[Seq[ChatChannel]] =
    ApiRequest[Seq[ChatChannel]](ApiMethods.GET, "https://localhost/api/v1", "/chat/channels", "application/json")
      .withSuccessResponse[Seq[ChatChannel]](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * Returns an array with browser users in the first position and API users (bots) in the second position.
   * 
   * Expected answers:
   *   code 200 : ConnectedUsers (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   */
  def chat.getConnected(): ApiRequest[ConnectedUsers] =
    ApiRequest[ConnectedUsers](ApiMethods.GET, "https://localhost/api/v1", "/chat/connected", "application/json")
      .withSuccessResponse[ConnectedUsers](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Chat (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param message 
   * @param channelID Channel to post to. Default 1 (English).
   */
  def chat.new(message: String, channelID: Option[Double])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Chat] =
    ApiRequest[Chat](ApiMethods.POST, "https://localhost/api/v1", "/chat", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("message", message)
      .withFormParam("channelID", channelID)
      .withSuccessResponse[Chat](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
      

}

