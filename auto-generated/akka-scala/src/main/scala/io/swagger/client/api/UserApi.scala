/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.AccessToken
import io.swagger.client.model.Affiliate
import io.swagger.client.model.Margin
import io.swagger.client.model.Transaction
import io.swagger.client.model.User
import io.swagger.client.model.UserCommission
import io.swagger.client.model.Wallet
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object UserApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 200 : Transaction (Request was successful)
   * 
   * @param token 
   */
  def user.cancelWithdrawal(token: String): ApiRequest[Transaction] =
    ApiRequest[Transaction](ApiMethods.POST, "https://localhost/api/v1", "/user/cancelWithdrawal", "application/json")
      .withFormParam("token", token)
      .withSuccessResponse[Transaction](200)
        /**
   * If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
   * 
   * Expected answers:
   *   code 200 : Double (Request was successful)
   * 
   * @param referralCode 
   */
  def user.checkReferralCode(referralCode: Option[String] = None): ApiRequest[Double] =
    ApiRequest[Double](ApiMethods.GET, "https://localhost/api/v1", "/user/checkReferralCode", "application/json")
      .withQueryParam("referralCode", referralCode)
      .withSuccessResponse[Double](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : AccessToken (Request was successful)
   * 
   * @param token 
   */
  def user.confirm(token: String): ApiRequest[AccessToken] =
    ApiRequest[AccessToken](ApiMethods.POST, "https://localhost/api/v1", "/user/confirmEmail", "application/json")
      .withFormParam("token", token)
      .withSuccessResponse[AccessToken](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Boolean (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param token Token from your selected TFA type.
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
   */
  def user.confirmEnableTFA(token: String, `type`: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Boolean] =
    ApiRequest[Boolean](ApiMethods.POST, "https://localhost/api/v1", "/user/confirmEnableTFA", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("type", `type`)
      .withFormParam("token", token)
      .withSuccessResponse[Boolean](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Transaction (Request was successful)
   * 
   * @param token 
   */
  def user.confirmWithdrawal(token: String): ApiRequest[Transaction] =
    ApiRequest[Transaction](ApiMethods.POST, "https://localhost/api/v1", "/user/confirmWithdrawal", "application/json")
      .withFormParam("token", token)
      .withSuccessResponse[Transaction](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Boolean (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param token Token from your selected TFA type.
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
   */
  def user.disableTFA(token: String, `type`: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Boolean] =
    ApiRequest[Boolean](ApiMethods.POST, "https://localhost/api/v1", "/user/disableTFA", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("type", `type`)
      .withFormParam("token", token)
      .withSuccessResponse[Boolean](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : User (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   */
  def user.get()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, "https://localhost/api/v1", "/user", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withSuccessResponse[User](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Affiliate (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   */
  def user.getAffiliateStatus()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Affiliate] =
    ApiRequest[Affiliate](ApiMethods.GET, "https://localhost/api/v1", "/user/affiliateStatus", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withSuccessResponse[Affiliate](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[UserCommission] (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   */
  def user.getCommission()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Seq[UserCommission]] =
    ApiRequest[Seq[UserCommission]](ApiMethods.GET, "https://localhost/api/v1", "/user/commission", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withSuccessResponse[Seq[UserCommission]](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : String (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param currency 
   */
  def user.getDepositAddress(currency: Option[String])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://localhost/api/v1", "/user/depositAddress", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withQueryParam("currency", currency)
      .withSuccessResponse[String](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Margin (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param currency 
   */
  def user.getMargin(currency: Option[String])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Margin] =
    ApiRequest[Margin](ApiMethods.GET, "https://localhost/api/v1", "/user/margin", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withQueryParam("currency", currency)
      .withSuccessResponse[Margin](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Wallet (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param currency 
   */
  def user.getWallet(currency: Option[String])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Wallet] =
    ApiRequest[Wallet](ApiMethods.GET, "https://localhost/api/v1", "/user/wallet", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withQueryParam("currency", currency)
      .withSuccessResponse[Wallet](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[Transaction] (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param currency 
   */
  def user.getWalletHistory(currency: Option[String])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Seq[Transaction]] =
    ApiRequest[Seq[Transaction]](ApiMethods.GET, "https://localhost/api/v1", "/user/walletHistory", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withQueryParam("currency", currency)
      .withSuccessResponse[Seq[Transaction]](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[Transaction] (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param currency 
   */
  def user.getWalletSummary(currency: Option[String])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Seq[Transaction]] =
    ApiRequest[Seq[Transaction]](ApiMethods.GET, "https://localhost/api/v1", "/user/walletSummary", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withQueryParam("currency", currency)
      .withSuccessResponse[Seq[Transaction]](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Request was successful)
   */
  def user.logout(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/api/v1", "/user/logout", "application/json")
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Double (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   */
  def user.logoutAll()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Double] =
    ApiRequest[Double](ApiMethods.POST, "https://localhost/api/v1", "/user/logoutAll", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withSuccessResponse[Double](200)
        /**
   * This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
   * 
   * Expected answers:
   *   code 200 : Any (Request was successful)
   * 
   * @param currency 
   */
  def user.minWithdrawalFee(currency: Option[String]): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://localhost/api/v1", "/user/minWithdrawalFee", "application/json")
      .withQueryParam("currency", currency)
      .withSuccessResponse[Any](200)
        /**
   * Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
   * 
   * Expected answers:
   *   code 200 : Boolean (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
   */
  def user.requestEnableTFA(`type`: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Boolean] =
    ApiRequest[Boolean](ApiMethods.POST, "https://localhost/api/v1", "/user/requestEnableTFA", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("type", `type`)
      .withSuccessResponse[Boolean](200)
        /**
   * This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
   * 
   * Expected answers:
   *   code 200 : Transaction (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
   * @param amount Amount of withdrawal currency.
   * @param address Destination Address.
   * @param otpToken 2FA token. Required if 2FA is enabled on your account.
   * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
   */
  def user.requestWithdrawal(currency: String, amount: Double, address: String, otpToken: Option[String] = None, fee: Option[Double] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Transaction] =
    ApiRequest[Transaction](ApiMethods.POST, "https://localhost/api/v1", "/user/requestWithdrawal", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("otpToken", otpToken)
      .withFormParam("currency", currency)
      .withFormParam("amount", amount)
      .withFormParam("address", address)
      .withFormParam("fee", fee)
      .withSuccessResponse[Transaction](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : User (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param prefs 
   * @param overwrite If true, will overwrite all existing preferences.
   */
  def user.savePreferences(prefs: String, overwrite: Option[Boolean])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[User] =
    ApiRequest[User](ApiMethods.POST, "https://localhost/api/v1", "/user/preferences", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("prefs", prefs)
      .withFormParam("overwrite", overwrite)
      .withSuccessResponse[User](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : User (Request was successful)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param firstname 
   * @param lastname 
   * @param oldPassword 
   * @param newPassword 
   * @param newPasswordConfirm 
   * @param username Username can only be set once. To reset, email support.
   * @param country Country of residence.
   * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key.
   */
  def user.update(firstname: Option[String] = None, lastname: Option[String] = None, oldPassword: Option[String] = None, newPassword: Option[String] = None, newPasswordConfirm: Option[String] = None, username: Option[String] = None, country: Option[String] = None, pgpPubKey: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[User] =
    ApiRequest[User](ApiMethods.PUT, "https://localhost/api/v1", "/user", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("firstname", firstname)
      .withFormParam("lastname", lastname)
      .withFormParam("oldPassword", oldPassword)
      .withFormParam("newPassword", newPassword)
      .withFormParam("newPasswordConfirm", newPasswordConfirm)
      .withFormParam("username", username)
      .withFormParam("country", country)
      .withFormParam("pgpPubKey", pgpPubKey)
      .withSuccessResponse[User](200)
      

}

