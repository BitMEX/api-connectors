/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class Margin (
  account: Double,
  currency: String,
  riskLimit: Option[Double] = None,
  prevState: Option[String] = None,
  state: Option[String] = None,
  action: Option[String] = None,
  amount: Option[Double] = None,
  pendingCredit: Option[Double] = None,
  pendingDebit: Option[Double] = None,
  confirmedDebit: Option[Double] = None,
  prevRealisedPnl: Option[Double] = None,
  prevUnrealisedPnl: Option[Double] = None,
  grossComm: Option[Double] = None,
  grossOpenCost: Option[Double] = None,
  grossOpenPremium: Option[Double] = None,
  grossExecCost: Option[Double] = None,
  grossMarkValue: Option[Double] = None,
  riskValue: Option[Double] = None,
  taxableMargin: Option[Double] = None,
  initMargin: Option[Double] = None,
  maintMargin: Option[Double] = None,
  sessionMargin: Option[Double] = None,
  targetExcessMargin: Option[Double] = None,
  varMargin: Option[Double] = None,
  realisedPnl: Option[Double] = None,
  unrealisedPnl: Option[Double] = None,
  indicativeTax: Option[Double] = None,
  unrealisedProfit: Option[Double] = None,
  syntheticMargin: Option[Double] = None,
  walletBalance: Option[Double] = None,
  marginBalance: Option[Double] = None,
  marginBalancePcnt: Option[Double] = None,
  marginLeverage: Option[Double] = None,
  marginUsedPcnt: Option[Double] = None,
  excessMargin: Option[Double] = None,
  excessMarginPcnt: Option[Double] = None,
  availableMargin: Option[Double] = None,
  withdrawableMargin: Option[Double] = None,
  grossLastValue: Option[Double] = None,
  commission: Option[Double] = None,
  makerFeeDiscount: Option[Double] = None,
  takerFeeDiscount: Option[Double] = None,
  timestamp: Option[DateTime] = None
) extends ApiModel


