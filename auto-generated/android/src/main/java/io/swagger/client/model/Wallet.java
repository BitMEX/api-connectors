/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.math.BigDecimal;
import java.util.*;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Wallet {
  
  @SerializedName("account")
  private BigDecimal account = null;
  @SerializedName("currency")
  private String currency = null;
  @SerializedName("prevDeposited")
  private BigDecimal prevDeposited = null;
  @SerializedName("prevWithdrawn")
  private BigDecimal prevWithdrawn = null;
  @SerializedName("prevTransferIn")
  private BigDecimal prevTransferIn = null;
  @SerializedName("prevTransferOut")
  private BigDecimal prevTransferOut = null;
  @SerializedName("prevAmount")
  private BigDecimal prevAmount = null;
  @SerializedName("prevTimestamp")
  private Date prevTimestamp = null;
  @SerializedName("deltaDeposited")
  private BigDecimal deltaDeposited = null;
  @SerializedName("deltaWithdrawn")
  private BigDecimal deltaWithdrawn = null;
  @SerializedName("deltaTransferIn")
  private BigDecimal deltaTransferIn = null;
  @SerializedName("deltaTransferOut")
  private BigDecimal deltaTransferOut = null;
  @SerializedName("deltaAmount")
  private BigDecimal deltaAmount = null;
  @SerializedName("deposited")
  private BigDecimal deposited = null;
  @SerializedName("withdrawn")
  private BigDecimal withdrawn = null;
  @SerializedName("transferIn")
  private BigDecimal transferIn = null;
  @SerializedName("transferOut")
  private BigDecimal transferOut = null;
  @SerializedName("amount")
  private BigDecimal amount = null;
  @SerializedName("pendingCredit")
  private BigDecimal pendingCredit = null;
  @SerializedName("pendingDebit")
  private BigDecimal pendingDebit = null;
  @SerializedName("confirmedDebit")
  private BigDecimal confirmedDebit = null;
  @SerializedName("timestamp")
  private Date timestamp = null;
  @SerializedName("addr")
  private String addr = null;
  @SerializedName("script")
  private String script = null;
  @SerializedName("withdrawalLock")
  private List<String> withdrawalLock = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getAccount() {
    return account;
  }
  public void setAccount(BigDecimal account) {
    this.account = account;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrency() {
    return currency;
  }
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getPrevDeposited() {
    return prevDeposited;
  }
  public void setPrevDeposited(BigDecimal prevDeposited) {
    this.prevDeposited = prevDeposited;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getPrevWithdrawn() {
    return prevWithdrawn;
  }
  public void setPrevWithdrawn(BigDecimal prevWithdrawn) {
    this.prevWithdrawn = prevWithdrawn;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getPrevTransferIn() {
    return prevTransferIn;
  }
  public void setPrevTransferIn(BigDecimal prevTransferIn) {
    this.prevTransferIn = prevTransferIn;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getPrevTransferOut() {
    return prevTransferOut;
  }
  public void setPrevTransferOut(BigDecimal prevTransferOut) {
    this.prevTransferOut = prevTransferOut;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getPrevAmount() {
    return prevAmount;
  }
  public void setPrevAmount(BigDecimal prevAmount) {
    this.prevAmount = prevAmount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getPrevTimestamp() {
    return prevTimestamp;
  }
  public void setPrevTimestamp(Date prevTimestamp) {
    this.prevTimestamp = prevTimestamp;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getDeltaDeposited() {
    return deltaDeposited;
  }
  public void setDeltaDeposited(BigDecimal deltaDeposited) {
    this.deltaDeposited = deltaDeposited;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getDeltaWithdrawn() {
    return deltaWithdrawn;
  }
  public void setDeltaWithdrawn(BigDecimal deltaWithdrawn) {
    this.deltaWithdrawn = deltaWithdrawn;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getDeltaTransferIn() {
    return deltaTransferIn;
  }
  public void setDeltaTransferIn(BigDecimal deltaTransferIn) {
    this.deltaTransferIn = deltaTransferIn;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getDeltaTransferOut() {
    return deltaTransferOut;
  }
  public void setDeltaTransferOut(BigDecimal deltaTransferOut) {
    this.deltaTransferOut = deltaTransferOut;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getDeltaAmount() {
    return deltaAmount;
  }
  public void setDeltaAmount(BigDecimal deltaAmount) {
    this.deltaAmount = deltaAmount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getDeposited() {
    return deposited;
  }
  public void setDeposited(BigDecimal deposited) {
    this.deposited = deposited;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getWithdrawn() {
    return withdrawn;
  }
  public void setWithdrawn(BigDecimal withdrawn) {
    this.withdrawn = withdrawn;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getTransferIn() {
    return transferIn;
  }
  public void setTransferIn(BigDecimal transferIn) {
    this.transferIn = transferIn;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getTransferOut() {
    return transferOut;
  }
  public void setTransferOut(BigDecimal transferOut) {
    this.transferOut = transferOut;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getAmount() {
    return amount;
  }
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getPendingCredit() {
    return pendingCredit;
  }
  public void setPendingCredit(BigDecimal pendingCredit) {
    this.pendingCredit = pendingCredit;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getPendingDebit() {
    return pendingDebit;
  }
  public void setPendingDebit(BigDecimal pendingDebit) {
    this.pendingDebit = pendingDebit;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getConfirmedDebit() {
    return confirmedDebit;
  }
  public void setConfirmedDebit(BigDecimal confirmedDebit) {
    this.confirmedDebit = confirmedDebit;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getAddr() {
    return addr;
  }
  public void setAddr(String addr) {
    this.addr = addr;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getScript() {
    return script;
  }
  public void setScript(String script) {
    this.script = script;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<String> getWithdrawalLock() {
    return withdrawalLock;
  }
  public void setWithdrawalLock(List<String> withdrawalLock) {
    this.withdrawalLock = withdrawalLock;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Wallet wallet = (Wallet) o;
    return (this.account == null ? wallet.account == null : this.account.equals(wallet.account)) &&
        (this.currency == null ? wallet.currency == null : this.currency.equals(wallet.currency)) &&
        (this.prevDeposited == null ? wallet.prevDeposited == null : this.prevDeposited.equals(wallet.prevDeposited)) &&
        (this.prevWithdrawn == null ? wallet.prevWithdrawn == null : this.prevWithdrawn.equals(wallet.prevWithdrawn)) &&
        (this.prevTransferIn == null ? wallet.prevTransferIn == null : this.prevTransferIn.equals(wallet.prevTransferIn)) &&
        (this.prevTransferOut == null ? wallet.prevTransferOut == null : this.prevTransferOut.equals(wallet.prevTransferOut)) &&
        (this.prevAmount == null ? wallet.prevAmount == null : this.prevAmount.equals(wallet.prevAmount)) &&
        (this.prevTimestamp == null ? wallet.prevTimestamp == null : this.prevTimestamp.equals(wallet.prevTimestamp)) &&
        (this.deltaDeposited == null ? wallet.deltaDeposited == null : this.deltaDeposited.equals(wallet.deltaDeposited)) &&
        (this.deltaWithdrawn == null ? wallet.deltaWithdrawn == null : this.deltaWithdrawn.equals(wallet.deltaWithdrawn)) &&
        (this.deltaTransferIn == null ? wallet.deltaTransferIn == null : this.deltaTransferIn.equals(wallet.deltaTransferIn)) &&
        (this.deltaTransferOut == null ? wallet.deltaTransferOut == null : this.deltaTransferOut.equals(wallet.deltaTransferOut)) &&
        (this.deltaAmount == null ? wallet.deltaAmount == null : this.deltaAmount.equals(wallet.deltaAmount)) &&
        (this.deposited == null ? wallet.deposited == null : this.deposited.equals(wallet.deposited)) &&
        (this.withdrawn == null ? wallet.withdrawn == null : this.withdrawn.equals(wallet.withdrawn)) &&
        (this.transferIn == null ? wallet.transferIn == null : this.transferIn.equals(wallet.transferIn)) &&
        (this.transferOut == null ? wallet.transferOut == null : this.transferOut.equals(wallet.transferOut)) &&
        (this.amount == null ? wallet.amount == null : this.amount.equals(wallet.amount)) &&
        (this.pendingCredit == null ? wallet.pendingCredit == null : this.pendingCredit.equals(wallet.pendingCredit)) &&
        (this.pendingDebit == null ? wallet.pendingDebit == null : this.pendingDebit.equals(wallet.pendingDebit)) &&
        (this.confirmedDebit == null ? wallet.confirmedDebit == null : this.confirmedDebit.equals(wallet.confirmedDebit)) &&
        (this.timestamp == null ? wallet.timestamp == null : this.timestamp.equals(wallet.timestamp)) &&
        (this.addr == null ? wallet.addr == null : this.addr.equals(wallet.addr)) &&
        (this.script == null ? wallet.script == null : this.script.equals(wallet.script)) &&
        (this.withdrawalLock == null ? wallet.withdrawalLock == null : this.withdrawalLock.equals(wallet.withdrawalLock));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.account == null ? 0: this.account.hashCode());
    result = 31 * result + (this.currency == null ? 0: this.currency.hashCode());
    result = 31 * result + (this.prevDeposited == null ? 0: this.prevDeposited.hashCode());
    result = 31 * result + (this.prevWithdrawn == null ? 0: this.prevWithdrawn.hashCode());
    result = 31 * result + (this.prevTransferIn == null ? 0: this.prevTransferIn.hashCode());
    result = 31 * result + (this.prevTransferOut == null ? 0: this.prevTransferOut.hashCode());
    result = 31 * result + (this.prevAmount == null ? 0: this.prevAmount.hashCode());
    result = 31 * result + (this.prevTimestamp == null ? 0: this.prevTimestamp.hashCode());
    result = 31 * result + (this.deltaDeposited == null ? 0: this.deltaDeposited.hashCode());
    result = 31 * result + (this.deltaWithdrawn == null ? 0: this.deltaWithdrawn.hashCode());
    result = 31 * result + (this.deltaTransferIn == null ? 0: this.deltaTransferIn.hashCode());
    result = 31 * result + (this.deltaTransferOut == null ? 0: this.deltaTransferOut.hashCode());
    result = 31 * result + (this.deltaAmount == null ? 0: this.deltaAmount.hashCode());
    result = 31 * result + (this.deposited == null ? 0: this.deposited.hashCode());
    result = 31 * result + (this.withdrawn == null ? 0: this.withdrawn.hashCode());
    result = 31 * result + (this.transferIn == null ? 0: this.transferIn.hashCode());
    result = 31 * result + (this.transferOut == null ? 0: this.transferOut.hashCode());
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.pendingCredit == null ? 0: this.pendingCredit.hashCode());
    result = 31 * result + (this.pendingDebit == null ? 0: this.pendingDebit.hashCode());
    result = 31 * result + (this.confirmedDebit == null ? 0: this.confirmedDebit.hashCode());
    result = 31 * result + (this.timestamp == null ? 0: this.timestamp.hashCode());
    result = 31 * result + (this.addr == null ? 0: this.addr.hashCode());
    result = 31 * result + (this.script == null ? 0: this.script.hashCode());
    result = 31 * result + (this.withdrawalLock == null ? 0: this.withdrawalLock.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Wallet {\n");
    
    sb.append("  account: ").append(account).append("\n");
    sb.append("  currency: ").append(currency).append("\n");
    sb.append("  prevDeposited: ").append(prevDeposited).append("\n");
    sb.append("  prevWithdrawn: ").append(prevWithdrawn).append("\n");
    sb.append("  prevTransferIn: ").append(prevTransferIn).append("\n");
    sb.append("  prevTransferOut: ").append(prevTransferOut).append("\n");
    sb.append("  prevAmount: ").append(prevAmount).append("\n");
    sb.append("  prevTimestamp: ").append(prevTimestamp).append("\n");
    sb.append("  deltaDeposited: ").append(deltaDeposited).append("\n");
    sb.append("  deltaWithdrawn: ").append(deltaWithdrawn).append("\n");
    sb.append("  deltaTransferIn: ").append(deltaTransferIn).append("\n");
    sb.append("  deltaTransferOut: ").append(deltaTransferOut).append("\n");
    sb.append("  deltaAmount: ").append(deltaAmount).append("\n");
    sb.append("  deposited: ").append(deposited).append("\n");
    sb.append("  withdrawn: ").append(withdrawn).append("\n");
    sb.append("  transferIn: ").append(transferIn).append("\n");
    sb.append("  transferOut: ").append(transferOut).append("\n");
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  pendingCredit: ").append(pendingCredit).append("\n");
    sb.append("  pendingDebit: ").append(pendingDebit).append("\n");
    sb.append("  confirmedDebit: ").append(confirmedDebit).append("\n");
    sb.append("  timestamp: ").append(timestamp).append("\n");
    sb.append("  addr: ").append(addr).append("\n");
    sb.append("  script: ").append(script).append("\n");
    sb.append("  withdrawalLock: ").append(withdrawalLock).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
