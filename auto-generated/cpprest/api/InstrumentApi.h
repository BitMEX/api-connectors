/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * InstrumentApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_InstrumentApi_H_
#define IO_SWAGGER_CLIENT_API_InstrumentApi_H_


#include "../ApiClient.h"

#include "Error.h"
#include "IndexComposite.h"
#include "Instrument.h"
#include "InstrumentInterval.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  InstrumentApi
{
public:
    InstrumentApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~InstrumentApi();
    /// <summary>
    /// Get instruments.
    /// </summary>
    /// <remarks>
    /// This returns all instruments and indices, including those that have settled or are unlisted. Use this endpoint if you want to query for individual instruments or use a complex filter. Use &#x60;/instrument/active&#x60; to return active instruments, or use a filter like &#x60;{\&quot;state\&quot;: \&quot;Open\&quot;}&#x60;.
    /// </remarks>
    /// <param name="symbol">Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;. (optional)</param>
    /// <param name="filter">Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details. (optional)</param>
    /// <param name="columns">Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect. (optional)</param>
    /// <param name="count">Number of results to fetch. (optional, default to 100)</param>
    /// <param name="start">Starting point for results. (optional, default to 0)</param>
    /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
    /// <param name="startTime">Starting date filter for results. (optional)</param>
    /// <param name="endTime">Ending date filter for results. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Instrument>>> instrument_get(
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> filter,
        boost::optional<utility::string_t> columns,
        boost::optional<double> count,
        boost::optional<double> start,
        boost::optional<bool> reverse,
        boost::optional<utility::datetime> startTime,
        boost::optional<utility::datetime> endTime
    );
    /// <summary>
    /// Get all active instruments and instruments that have expired in &lt;24hrs.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Instrument>>> instrument_getActive(
    );
    /// <summary>
    /// Helper method. Gets all active instruments and all indices. This is a join of the result of /indices and /active.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Instrument>>> instrument_getActiveAndIndices(
    );
    /// <summary>
    /// Return all active contract series and interval pairs.
    /// </summary>
    /// <remarks>
    /// This endpoint is useful for determining which pairs are live. It returns two arrays of   strings. The first is intervals, such as &#x60;[\&quot;BVOL:daily\&quot;, \&quot;BVOL:weekly\&quot;, \&quot;XBU:daily\&quot;, \&quot;XBU:monthly\&quot;, ...]&#x60;. These identifiers are usable in any query&#39;s &#x60;symbol&#x60; param. The second array is the current resolution of these intervals. Results are mapped at the same index.
    /// </remarks>
    pplx::task<std::shared_ptr<InstrumentInterval>> instrument_getActiveIntervals(
    );
    /// <summary>
    /// Show constituent parts of an index.
    /// </summary>
    /// <remarks>
    /// Composite indices are built from multiple external price sources.  Use this endpoint to get the underlying prices of an index. For example, send a &#x60;symbol&#x60; of &#x60;.XBT&#x60; to get the ticks and weights of the constituent exchanges that build the \&quot;.XBT\&quot; index.  A tick with reference &#x60;\&quot;BMI\&quot;&#x60; and weight &#x60;null&#x60; is the composite index tick. 
    /// </remarks>
    /// <param name="account"> (optional)</param>
    /// <param name="symbol">The composite index symbol. (optional, default to .XBT)</param>
    /// <param name="filter">Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details. (optional)</param>
    /// <param name="columns">Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect. (optional)</param>
    /// <param name="count">Number of results to fetch. (optional, default to 100)</param>
    /// <param name="start">Starting point for results. (optional, default to 0)</param>
    /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
    /// <param name="startTime">Starting date filter for results. (optional)</param>
    /// <param name="endTime">Ending date filter for results. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<IndexComposite>>> instrument_getCompositeIndex(
        boost::optional<double> account,
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> filter,
        boost::optional<utility::string_t> columns,
        boost::optional<double> count,
        boost::optional<double> start,
        boost::optional<bool> reverse,
        boost::optional<utility::datetime> startTime,
        boost::optional<utility::datetime> endTime
    );
    /// <summary>
    /// Get all price indices.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Instrument>>> instrument_getIndices(
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_InstrumentApi_H_ */

