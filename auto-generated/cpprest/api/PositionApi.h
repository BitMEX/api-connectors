/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PositionApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_PositionApi_H_
#define IO_SWAGGER_CLIENT_API_PositionApi_H_


#include "../ApiClient.h"

#include "Error.h"
#include "Position.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  PositionApi
{
public:
    PositionApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~PositionApi();
    /// <summary>
    /// Get your positions.
    /// </summary>
    /// <remarks>
    /// See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
    /// </remarks>
    /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}. (optional)</param>
    /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
    /// <param name="count">Number of rows to fetch. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Position>>> position_get(
        boost::optional<utility::string_t> filter,
        boost::optional<utility::string_t> columns,
        boost::optional<double> count
    );
    /// <summary>
    /// Enable isolated margin or cross margin per-position.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Position symbol to isolate.</param>
    /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
    pplx::task<std::shared_ptr<Position>> position_isolateMargin(
        utility::string_t symbol,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// Transfer equity in or out of a position.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Symbol of position to isolate.</param>
    /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
    pplx::task<std::shared_ptr<Position>> position_transferIsolatedMargin(
        utility::string_t symbol,
        double amount
    );
    /// <summary>
    /// Choose leverage for a position.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Symbol of position to adjust.</param>
    /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
    pplx::task<std::shared_ptr<Position>> position_updateLeverage(
        utility::string_t symbol,
        double leverage
    );
    /// <summary>
    /// Update your risk limit.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Symbol of position to update risk limit on.</param>
    /// <param name="riskLimit">New Risk Limit, in Satoshis.</param>
    pplx::task<std::shared_ptr<Position>> position_updateRiskLimit(
        utility::string_t symbol,
        double riskLimit
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_PositionApi_H_ */

