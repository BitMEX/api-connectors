/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_UserApi_H_
#define IO_SWAGGER_CLIENT_API_UserApi_H_


#include "../ApiClient.h"

#include "AccessToken.h"
#include "Affiliate.h"
#include "Margin.h"
#include "Object.h"
#include "Transaction.h"
#include "User.h"
#include "UserCommission.h"
#include "Wallet.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  UserApi
{
public:
    UserApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~UserApi();
    /// <summary>
    /// Cancel a withdrawal.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="token"></param>
    pplx::task<std::shared_ptr<Transaction>> user_cancelWithdrawal(
        utility::string_t token
    );
    /// <summary>
    /// Check if a referral code is valid.
    /// </summary>
    /// <remarks>
    /// If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
    /// </remarks>
    /// <param name="referralCode"> (optional)</param>
    pplx::task<double> user_checkReferralCode(
        boost::optional<utility::string_t> referralCode
    );
    /// <summary>
    /// Confirm your email address with a token.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="token"></param>
    pplx::task<std::shared_ptr<AccessToken>> user_confirm(
        utility::string_t token
    );
    /// <summary>
    /// Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="token">Token from your selected TFA type.</param>
    /// <param name="type">Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39; (optional)</param>
    pplx::task<bool> user_confirmEnableTFA(
        utility::string_t token,
        boost::optional<utility::string_t> type
    );
    /// <summary>
    /// Confirm a withdrawal.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="token"></param>
    pplx::task<std::shared_ptr<Transaction>> user_confirmWithdrawal(
        utility::string_t token
    );
    /// <summary>
    /// Disable two-factor auth for this account.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="token">Token from your selected TFA type.</param>
    /// <param name="type">Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)</param>
    pplx::task<bool> user_disableTFA(
        utility::string_t token,
        boost::optional<utility::string_t> type
    );
    /// <summary>
    /// Get your user model.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<User>> user_get(
    );
    /// <summary>
    /// Get your current affiliate/referral status.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Affiliate>> user_getAffiliateStatus(
    );
    /// <summary>
    /// Get your account&#39;s commission status.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<UserCommission>>> user_getCommission(
    );
    /// <summary>
    /// Get a deposit address.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="currency"> (optional, default to XBt)</param>
    pplx::task<utility::string_t> user_getDepositAddress(
        boost::optional<utility::string_t> currency
    );
    /// <summary>
    /// Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="currency"> (optional, default to XBt)</param>
    pplx::task<std::shared_ptr<Margin>> user_getMargin(
        boost::optional<utility::string_t> currency
    );
    /// <summary>
    /// Get your current wallet information.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="currency"> (optional, default to XBt)</param>
    pplx::task<std::shared_ptr<Wallet>> user_getWallet(
        boost::optional<utility::string_t> currency
    );
    /// <summary>
    /// Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="currency"> (optional, default to XBt)</param>
    pplx::task<std::vector<std::shared_ptr<Transaction>>> user_getWalletHistory(
        boost::optional<utility::string_t> currency
    );
    /// <summary>
    /// Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="currency"> (optional, default to XBt)</param>
    pplx::task<std::vector<std::shared_ptr<Transaction>>> user_getWalletSummary(
        boost::optional<utility::string_t> currency
    );
    /// <summary>
    /// Log out of BitMEX.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> user_logout(
    );
    /// <summary>
    /// Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<double> user_logoutAll(
    );
    /// <summary>
    /// Get the minimum withdrawal fee for a currency.
    /// </summary>
    /// <remarks>
    /// This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
    /// </remarks>
    /// <param name="currency"> (optional, default to XBt)</param>
    pplx::task<std::shared_ptr<Object>> user_minWithdrawalFee(
        boost::optional<utility::string_t> currency
    );
    /// <summary>
    /// Get secret key for setting up two-factor auth.
    /// </summary>
    /// <remarks>
    /// Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
    /// </remarks>
    /// <param name="type">Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)</param>
    pplx::task<bool> user_requestEnableTFA(
        boost::optional<utility::string_t> type
    );
    /// <summary>
    /// Request a withdrawal to an external wallet.
    /// </summary>
    /// <remarks>
    /// This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
    /// </remarks>
    /// <param name="currency">Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;</param>
    /// <param name="amount">Amount of withdrawal currency.</param>
    /// <param name="address">Destination Address.</param>
    /// <param name="otpToken">2FA token. Required if 2FA is enabled on your account. (optional)</param>
    /// <param name="fee">Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)</param>
    pplx::task<std::shared_ptr<Transaction>> user_requestWithdrawal(
        utility::string_t currency,
        double amount,
        utility::string_t address,
        boost::optional<utility::string_t> otpToken,
        boost::optional<double> fee
    );
    /// <summary>
    /// Save user preferences.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="prefs"></param>
    /// <param name="overwrite">If true, will overwrite all existing preferences. (optional, default to false)</param>
    pplx::task<std::shared_ptr<User>> user_savePreferences(
        utility::string_t prefs,
        boost::optional<bool> overwrite
    );
    /// <summary>
    /// Update your password, name, and other attributes.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="firstname"> (optional)</param>
    /// <param name="lastname"> (optional)</param>
    /// <param name="oldPassword"> (optional)</param>
    /// <param name="newPassword"> (optional)</param>
    /// <param name="newPasswordConfirm"> (optional)</param>
    /// <param name="username">Username can only be set once. To reset, email support. (optional)</param>
    /// <param name="country">Country of residence. (optional)</param>
    /// <param name="pgpPubKey">PGP Public Key. If specified, automated emails will be sentwith this key. (optional)</param>
    pplx::task<std::shared_ptr<User>> user_update(
        boost::optional<utility::string_t> firstname,
        boost::optional<utility::string_t> lastname,
        boost::optional<utility::string_t> oldPassword,
        boost::optional<utility::string_t> newPassword,
        boost::optional<utility::string_t> newPasswordConfirm,
        boost::optional<utility::string_t> username,
        boost::optional<utility::string_t> country,
        boost::optional<utility::string_t> pgpPubKey
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_UserApi_H_ */

