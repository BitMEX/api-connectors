/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "APIKey.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

APIKey::APIKey()
{
    m_Id = utility::conversions::to_string_t("");
    m_Secret = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_Nonce = 0.0;
    m_Cidr = utility::conversions::to_string_t("");
    m_CidrIsSet = false;
    m_PermissionsIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_UserId = 0.0;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
}

APIKey::~APIKey()
{
}

void APIKey::validate()
{
    // TODO: implement validation
}

web::json::value APIKey::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("secret")] = ModelBase::toJson(m_Secret);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("nonce")] = ModelBase::toJson(m_Nonce);
    if(m_CidrIsSet)
    {
        val[utility::conversions::to_string_t("cidr")] = ModelBase::toJson(m_Cidr);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Permissions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("permissions")] = web::json::value::array(jsonArray);
        }
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }

    return val;
}

void APIKey::fromJson(web::json::value& val)
{
    setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    setSecret(ModelBase::stringFromJson(val[utility::conversions::to_string_t("secret")]));
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setNonce(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("nonce")]));
    if(val.has_field(utility::conversions::to_string_t("cidr")))
    {
        setCidr(ModelBase::stringFromJson(val[utility::conversions::to_string_t("cidr")]));
    }
    {
        m_Permissions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("permissions")))
        {
        for( auto& item : val[utility::conversions::to_string_t("permissions")].as_array() )
        {
            if(item.is_null())
            {
                m_Permissions.push_back( std::shared_ptr<X-any>(nullptr) );
            }
            else
            {
                std::shared_ptr<X-any> newItem(new X-any());
                newItem->fromJson(item);
                m_Permissions.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        setEnabled(ModelBase::boolFromJson(val[utility::conversions::to_string_t("enabled")]));
    }
    setUserId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("userId")]));
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromJson(val[utility::conversions::to_string_t("created")]));
    }
}

void APIKey::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secret"), m_Secret));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nonce"), m_Nonce));
    if(m_CidrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cidr"), m_Cidr));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Permissions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permissions"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
}

void APIKey::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setSecret(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("secret"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setNonce(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nonce"))));
    if(multipart->hasContent(utility::conversions::to_string_t("cidr")))
    {
        setCidr(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cidr"))));
    }
    {
        m_Permissions.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("permissions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("permissions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Permissions.push_back( std::shared_ptr<X-any>(nullptr) );
            }
            else
            {
                std::shared_ptr<X-any> newItem(new X-any());
                newItem->fromJson(item);
                m_Permissions.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        setEnabled(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled"))));
    }
    setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId"))));
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
}

utility::string_t APIKey::getId() const
{
    return m_Id;
}


void APIKey::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t APIKey::getSecret() const
{
    return m_Secret;
}


void APIKey::setSecret(utility::string_t value)
{
    m_Secret = value;
    
}
utility::string_t APIKey::getName() const
{
    return m_Name;
}


void APIKey::setName(utility::string_t value)
{
    m_Name = value;
    
}
double APIKey::getNonce() const
{
    return m_Nonce;
}


void APIKey::setNonce(double value)
{
    m_Nonce = value;
    
}
utility::string_t APIKey::getCidr() const
{
    return m_Cidr;
}


void APIKey::setCidr(utility::string_t value)
{
    m_Cidr = value;
    m_CidrIsSet = true;
}
bool APIKey::cidrIsSet() const
{
    return m_CidrIsSet;
}

void APIKey::unsetCidr()
{
    m_CidrIsSet = false;
}

std::vector<std::shared_ptr<X-any>>& APIKey::getPermissions()
{
    return m_Permissions;
}

void APIKey::setPermissions(std::vector<std::shared_ptr<X-any>> value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool APIKey::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void APIKey::unsetPermissions()
{
    m_PermissionsIsSet = false;
}

bool APIKey::isEnabled() const
{
    return m_Enabled;
}


void APIKey::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool APIKey::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void APIKey::unsetEnabled()
{
    m_EnabledIsSet = false;
}

double APIKey::getUserId() const
{
    return m_UserId;
}


void APIKey::setUserId(double value)
{
    m_UserId = value;
    
}
utility::datetime APIKey::getCreated() const
{
    return m_Created;
}


void APIKey::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool APIKey::createdIsSet() const
{
    return m_CreatedIsSet;
}

void APIKey::unsetCreated()
{
    m_CreatedIsSet = false;
}

}
}
}
}

