/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AccessToken.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AccessToken::AccessToken()
{
    m_Id = utility::conversions::to_string_t("");
    m_Ttl = 0.0;
    m_TtlIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_UserId = 0.0;
    m_UserIdIsSet = false;
}

AccessToken::~AccessToken()
{
}

void AccessToken::validate()
{
    // TODO: implement validation
}

web::json::value AccessToken::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t("ttl")] = ModelBase::toJson(m_Ttl);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }

    return val;
}

void AccessToken::fromJson(web::json::value& val)
{
    setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    if(val.has_field(utility::conversions::to_string_t("ttl")))
    {
        setTtl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("ttl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromJson(val[utility::conversions::to_string_t("created")]));
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        setUserId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("userId")]));
    }
}

void AccessToken::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ttl"), m_Ttl));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
}

void AccessToken::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    if(multipart->hasContent(utility::conversions::to_string_t("ttl")))
    {
        setTtl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ttl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId"))));
    }
}

utility::string_t AccessToken::getId() const
{
    return m_Id;
}


void AccessToken::setId(utility::string_t value)
{
    m_Id = value;
    
}
double AccessToken::getTtl() const
{
    return m_Ttl;
}


void AccessToken::setTtl(double value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}
bool AccessToken::ttlIsSet() const
{
    return m_TtlIsSet;
}

void AccessToken::unsetTtl()
{
    m_TtlIsSet = false;
}

utility::datetime AccessToken::getCreated() const
{
    return m_Created;
}


void AccessToken::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool AccessToken::createdIsSet() const
{
    return m_CreatedIsSet;
}

void AccessToken::unsetCreated()
{
    m_CreatedIsSet = false;
}

double AccessToken::getUserId() const
{
    return m_UserId;
}


void AccessToken::setUserId(double value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}
bool AccessToken::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void AccessToken::unsetUserId()
{
    m_UserIdIsSet = false;
}

}
}
}
}

