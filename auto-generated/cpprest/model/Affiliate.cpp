/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.24-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Affiliate.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Affiliate::Affiliate()
{
    m_ReferrerAccount = 0.0;
    m_ReferrerAccountIsSet = false;
    m_ReferralDiscount = 0.0;
    m_ReferralDiscountIsSet = false;
    m_AffiliatePayout = 0.0;
    m_AffiliatePayoutIsSet = false;
    m_Id = 0.0;
    m_IdIsSet = false;
}

Affiliate::~Affiliate()
{
}

void Affiliate::validate()
{
    // TODO: implement validation
}

web::json::value Affiliate::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ReferrerAccountIsSet)
    {
        val[utility::conversions::to_string_t("referrerAccount")] = ModelBase::toJson(m_ReferrerAccount);
    }
    if(m_ReferralDiscountIsSet)
    {
        val[utility::conversions::to_string_t("referralDiscount")] = ModelBase::toJson(m_ReferralDiscount);
    }
    if(m_AffiliatePayoutIsSet)
    {
        val[utility::conversions::to_string_t("affiliatePayout")] = ModelBase::toJson(m_AffiliatePayout);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

void Affiliate::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("referrerAccount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("referrerAccount")];
        if(!fieldValue.is_null())
        {
            setReferrerAccount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referralDiscount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("referralDiscount")];
        if(!fieldValue.is_null())
        {
            setReferralDiscount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("affiliatePayout")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("affiliatePayout")];
        if(!fieldValue.is_null())
        {
            setAffiliatePayout(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void Affiliate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ReferrerAccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referrerAccount"), m_ReferrerAccount));
    }
    if(m_ReferralDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referralDiscount"), m_ReferralDiscount));
    }
    if(m_AffiliatePayoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("affiliatePayout"), m_AffiliatePayout));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
}

void Affiliate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("referrerAccount")))
    {
        setReferrerAccount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("referrerAccount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referralDiscount")))
    {
        setReferralDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("referralDiscount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("affiliatePayout")))
    {
        setAffiliatePayout(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("affiliatePayout"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
}

double Affiliate::getReferrerAccount() const
{
    return m_ReferrerAccount;
}


void Affiliate::setReferrerAccount(double value)
{
    m_ReferrerAccount = value;
    m_ReferrerAccountIsSet = true;
}
bool Affiliate::referrerAccountIsSet() const
{
    return m_ReferrerAccountIsSet;
}

void Affiliate::unsetReferrerAccount()
{
    m_ReferrerAccountIsSet = false;
}

double Affiliate::getReferralDiscount() const
{
    return m_ReferralDiscount;
}


void Affiliate::setReferralDiscount(double value)
{
    m_ReferralDiscount = value;
    m_ReferralDiscountIsSet = true;
}
bool Affiliate::referralDiscountIsSet() const
{
    return m_ReferralDiscountIsSet;
}

void Affiliate::unsetReferralDiscount()
{
    m_ReferralDiscountIsSet = false;
}

double Affiliate::getAffiliatePayout() const
{
    return m_AffiliatePayout;
}


void Affiliate::setAffiliatePayout(double value)
{
    m_AffiliatePayout = value;
    m_AffiliatePayoutIsSet = true;
}
bool Affiliate::affiliatePayoutIsSet() const
{
    return m_AffiliatePayoutIsSet;
}

void Affiliate::unsetAffiliatePayout()
{
    m_AffiliatePayoutIsSet = false;
}

double Affiliate::getId() const
{
    return m_Id;
}


void Affiliate::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Affiliate::idIsSet() const
{
    return m_IdIsSet;
}

void Affiliate::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}

