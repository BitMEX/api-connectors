/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.24-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GlobalNotification.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

GlobalNotification::GlobalNotification()
{
    m_Id = 0.0;
    m_IdIsSet = false;
    m_date = utility::datetime();
    m_Title = utility::conversions::to_string_t("");
    m_Body = utility::conversions::to_string_t("");
    m_Ttl = 0.0;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Closable = false;
    m_ClosableIsSet = false;
    m_Persist = false;
    m_PersistIsSet = false;
    m_WaitForVisibility = false;
    m_WaitForVisibilityIsSet = false;
    m_Sound = utility::conversions::to_string_t("");
    m_SoundIsSet = false;
}

GlobalNotification::~GlobalNotification()
{
}

void GlobalNotification::validate()
{
    // TODO: implement validation
}

web::json::value GlobalNotification::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    val[utility::conversions::to_string_t("date")] = ModelBase::toJson(m_date);
    val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    val[utility::conversions::to_string_t("ttl")] = ModelBase::toJson(m_Ttl);
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ClosableIsSet)
    {
        val[utility::conversions::to_string_t("closable")] = ModelBase::toJson(m_Closable);
    }
    if(m_PersistIsSet)
    {
        val[utility::conversions::to_string_t("persist")] = ModelBase::toJson(m_Persist);
    }
    if(m_WaitForVisibilityIsSet)
    {
        val[utility::conversions::to_string_t("waitForVisibility")] = ModelBase::toJson(m_WaitForVisibility);
    }
    if(m_SoundIsSet)
    {
        val[utility::conversions::to_string_t("sound")] = ModelBase::toJson(m_Sound);
    }

    return val;
}

void GlobalNotification::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setDate
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("date")]));
    setTitle(ModelBase::stringFromJson(val[utility::conversions::to_string_t("title")]));
    setBody(ModelBase::stringFromJson(val[utility::conversions::to_string_t("body")]));
    setTtl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("ttl")]));
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("closable")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("closable")];
        if(!fieldValue.is_null())
        {
            setClosable(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("persist")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("persist")];
        if(!fieldValue.is_null())
        {
            setPersist(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("waitForVisibility")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("waitForVisibility")];
        if(!fieldValue.is_null())
        {
            setWaitForVisibility(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sound")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sound")];
        if(!fieldValue.is_null())
        {
            setSound(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void GlobalNotification::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date"), m_date));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ttl"), m_Ttl));
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_ClosableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("closable"), m_Closable));
    }
    if(m_PersistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("persist"), m_Persist));
    }
    if(m_WaitForVisibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("waitForVisibility"), m_WaitForVisibility));
    }
    if(m_SoundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sound"), m_Sound));
        
    }
}

void GlobalNotification::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    setDate(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("date"))));
    setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    setBody(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("body"))));
    setTtl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ttl"))));
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("closable")))
    {
        setClosable(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("closable"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("persist")))
    {
        setPersist(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("persist"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("waitForVisibility")))
    {
        setWaitForVisibility(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("waitForVisibility"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sound")))
    {
        setSound(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sound"))));
    }
}

double GlobalNotification::getId() const
{
    return m_Id;
}


void GlobalNotification::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool GlobalNotification::idIsSet() const
{
    return m_IdIsSet;
}

void GlobalNotification::unsetId()
{
    m_IdIsSet = false;
}

utility::datetime GlobalNotification::getDate() const
{
    return m_date;
}


void GlobalNotification::setDate(utility::datetime value)
{
    m_date = value;
    
}
utility::string_t GlobalNotification::getTitle() const
{
    return m_Title;
}


void GlobalNotification::setTitle(utility::string_t value)
{
    m_Title = value;
    
}
utility::string_t GlobalNotification::getBody() const
{
    return m_Body;
}


void GlobalNotification::setBody(utility::string_t value)
{
    m_Body = value;
    
}
double GlobalNotification::getTtl() const
{
    return m_Ttl;
}


void GlobalNotification::setTtl(double value)
{
    m_Ttl = value;
    
}
utility::string_t GlobalNotification::getType() const
{
    return m_Type;
}


void GlobalNotification::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool GlobalNotification::typeIsSet() const
{
    return m_TypeIsSet;
}

void GlobalNotification::unsetType()
{
    m_TypeIsSet = false;
}

bool GlobalNotification::isClosable() const
{
    return m_Closable;
}


void GlobalNotification::setClosable(bool value)
{
    m_Closable = value;
    m_ClosableIsSet = true;
}
bool GlobalNotification::closableIsSet() const
{
    return m_ClosableIsSet;
}

void GlobalNotification::unsetClosable()
{
    m_ClosableIsSet = false;
}

bool GlobalNotification::isPersist() const
{
    return m_Persist;
}


void GlobalNotification::setPersist(bool value)
{
    m_Persist = value;
    m_PersistIsSet = true;
}
bool GlobalNotification::persistIsSet() const
{
    return m_PersistIsSet;
}

void GlobalNotification::unsetPersist()
{
    m_PersistIsSet = false;
}

bool GlobalNotification::isWaitForVisibility() const
{
    return m_WaitForVisibility;
}


void GlobalNotification::setWaitForVisibility(bool value)
{
    m_WaitForVisibility = value;
    m_WaitForVisibilityIsSet = true;
}
bool GlobalNotification::waitForVisibilityIsSet() const
{
    return m_WaitForVisibilityIsSet;
}

void GlobalNotification::unsetWaitForVisibility()
{
    m_WaitForVisibilityIsSet = false;
}

utility::string_t GlobalNotification::getSound() const
{
    return m_Sound;
}


void GlobalNotification::setSound(utility::string_t value)
{
    m_Sound = value;
    m_SoundIsSet = true;
}
bool GlobalNotification::soundIsSet() const
{
    return m_SoundIsSet;
}

void GlobalNotification::unsetSound()
{
    m_SoundIsSet = false;
}

}
}
}
}

