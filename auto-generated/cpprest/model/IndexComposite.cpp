/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.24-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IndexComposite.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IndexComposite::IndexComposite()
{
    m_Timestamp = utility::datetime();
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_IndexSymbol = utility::conversions::to_string_t("");
    m_IndexSymbolIsSet = false;
    m_IndexMultiplier = 0.0;
    m_IndexMultiplierIsSet = false;
    m_Reference = utility::conversions::to_string_t("");
    m_ReferenceIsSet = false;
    m_LastPrice = 0.0;
    m_LastPriceIsSet = false;
    m_SourcePrice = 0.0;
    m_SourcePriceIsSet = false;
    m_ConversionIndex = utility::conversions::to_string_t("");
    m_ConversionIndexIsSet = false;
    m_ConversionIndexPrice = 0.0;
    m_ConversionIndexPriceIsSet = false;
    m_Weight = 0.0;
    m_WeightIsSet = false;
    m_Logged = utility::datetime();
    m_LoggedIsSet = false;
}

IndexComposite::~IndexComposite()
{
}

void IndexComposite::validate()
{
    // TODO: implement validation
}

web::json::value IndexComposite::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_IndexSymbolIsSet)
    {
        val[utility::conversions::to_string_t("indexSymbol")] = ModelBase::toJson(m_IndexSymbol);
    }
    if(m_IndexMultiplierIsSet)
    {
        val[utility::conversions::to_string_t("indexMultiplier")] = ModelBase::toJson(m_IndexMultiplier);
    }
    if(m_ReferenceIsSet)
    {
        val[utility::conversions::to_string_t("reference")] = ModelBase::toJson(m_Reference);
    }
    if(m_LastPriceIsSet)
    {
        val[utility::conversions::to_string_t("lastPrice")] = ModelBase::toJson(m_LastPrice);
    }
    if(m_SourcePriceIsSet)
    {
        val[utility::conversions::to_string_t("sourcePrice")] = ModelBase::toJson(m_SourcePrice);
    }
    if(m_ConversionIndexIsSet)
    {
        val[utility::conversions::to_string_t("conversionIndex")] = ModelBase::toJson(m_ConversionIndex);
    }
    if(m_ConversionIndexPriceIsSet)
    {
        val[utility::conversions::to_string_t("conversionIndexPrice")] = ModelBase::toJson(m_ConversionIndexPrice);
    }
    if(m_WeightIsSet)
    {
        val[utility::conversions::to_string_t("weight")] = ModelBase::toJson(m_Weight);
    }
    if(m_LoggedIsSet)
    {
        val[utility::conversions::to_string_t("logged")] = ModelBase::toJson(m_Logged);
    }

    return val;
}

void IndexComposite::fromJson(web::json::value& val)
{
    setTimestamp
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("timestamp")]));
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("indexSymbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("indexSymbol")];
        if(!fieldValue.is_null())
        {
            setIndexSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("indexMultiplier")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("indexMultiplier")];
        if(!fieldValue.is_null())
        {
            setIndexMultiplier(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reference")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("reference")];
        if(!fieldValue.is_null())
        {
            setReference(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastPrice")];
        if(!fieldValue.is_null())
        {
            setLastPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourcePrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sourcePrice")];
        if(!fieldValue.is_null())
        {
            setSourcePrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("conversionIndex")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("conversionIndex")];
        if(!fieldValue.is_null())
        {
            setConversionIndex(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("conversionIndexPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("conversionIndexPrice")];
        if(!fieldValue.is_null())
        {
            setConversionIndexPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("weight")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("weight")];
        if(!fieldValue.is_null())
        {
            setWeight(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logged")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("logged")];
        if(!fieldValue.is_null())
        {
            setLogged(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void IndexComposite::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_IndexSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indexSymbol"), m_IndexSymbol));
        
    }
    if(m_IndexMultiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indexMultiplier"), m_IndexMultiplier));
    }
    if(m_ReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reference"), m_Reference));
        
    }
    if(m_LastPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastPrice"), m_LastPrice));
    }
    if(m_SourcePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourcePrice"), m_SourcePrice));
    }
    if(m_ConversionIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("conversionIndex"), m_ConversionIndex));
        
    }
    if(m_ConversionIndexPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("conversionIndexPrice"), m_ConversionIndexPrice));
    }
    if(m_WeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("weight"), m_Weight));
    }
    if(m_LoggedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logged"), m_Logged));
        
    }
}

void IndexComposite::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indexSymbol")))
    {
        setIndexSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("indexSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indexMultiplier")))
    {
        setIndexMultiplier(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("indexMultiplier"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reference")))
    {
        setReference(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("reference"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastPrice")))
    {
        setLastPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourcePrice")))
    {
        setSourcePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourcePrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("conversionIndex")))
    {
        setConversionIndex(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("conversionIndex"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("conversionIndexPrice")))
    {
        setConversionIndexPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("conversionIndexPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("weight")))
    {
        setWeight(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("weight"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logged")))
    {
        setLogged(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("logged"))));
    }
}

utility::datetime IndexComposite::getTimestamp() const
{
    return m_Timestamp;
}


void IndexComposite::setTimestamp(utility::datetime value)
{
    m_Timestamp = value;
    
}
utility::string_t IndexComposite::getSymbol() const
{
    return m_Symbol;
}


void IndexComposite::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool IndexComposite::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void IndexComposite::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t IndexComposite::getIndexSymbol() const
{
    return m_IndexSymbol;
}


void IndexComposite::setIndexSymbol(utility::string_t value)
{
    m_IndexSymbol = value;
    m_IndexSymbolIsSet = true;
}
bool IndexComposite::indexSymbolIsSet() const
{
    return m_IndexSymbolIsSet;
}

void IndexComposite::unsetIndexSymbol()
{
    m_IndexSymbolIsSet = false;
}

double IndexComposite::getIndexMultiplier() const
{
    return m_IndexMultiplier;
}


void IndexComposite::setIndexMultiplier(double value)
{
    m_IndexMultiplier = value;
    m_IndexMultiplierIsSet = true;
}
bool IndexComposite::indexMultiplierIsSet() const
{
    return m_IndexMultiplierIsSet;
}

void IndexComposite::unsetIndexMultiplier()
{
    m_IndexMultiplierIsSet = false;
}

utility::string_t IndexComposite::getReference() const
{
    return m_Reference;
}


void IndexComposite::setReference(utility::string_t value)
{
    m_Reference = value;
    m_ReferenceIsSet = true;
}
bool IndexComposite::referenceIsSet() const
{
    return m_ReferenceIsSet;
}

void IndexComposite::unsetReference()
{
    m_ReferenceIsSet = false;
}

double IndexComposite::getLastPrice() const
{
    return m_LastPrice;
}


void IndexComposite::setLastPrice(double value)
{
    m_LastPrice = value;
    m_LastPriceIsSet = true;
}
bool IndexComposite::lastPriceIsSet() const
{
    return m_LastPriceIsSet;
}

void IndexComposite::unsetLastPrice()
{
    m_LastPriceIsSet = false;
}

double IndexComposite::getSourcePrice() const
{
    return m_SourcePrice;
}


void IndexComposite::setSourcePrice(double value)
{
    m_SourcePrice = value;
    m_SourcePriceIsSet = true;
}
bool IndexComposite::sourcePriceIsSet() const
{
    return m_SourcePriceIsSet;
}

void IndexComposite::unsetSourcePrice()
{
    m_SourcePriceIsSet = false;
}

utility::string_t IndexComposite::getConversionIndex() const
{
    return m_ConversionIndex;
}


void IndexComposite::setConversionIndex(utility::string_t value)
{
    m_ConversionIndex = value;
    m_ConversionIndexIsSet = true;
}
bool IndexComposite::conversionIndexIsSet() const
{
    return m_ConversionIndexIsSet;
}

void IndexComposite::unsetConversionIndex()
{
    m_ConversionIndexIsSet = false;
}

double IndexComposite::getConversionIndexPrice() const
{
    return m_ConversionIndexPrice;
}


void IndexComposite::setConversionIndexPrice(double value)
{
    m_ConversionIndexPrice = value;
    m_ConversionIndexPriceIsSet = true;
}
bool IndexComposite::conversionIndexPriceIsSet() const
{
    return m_ConversionIndexPriceIsSet;
}

void IndexComposite::unsetConversionIndexPrice()
{
    m_ConversionIndexPriceIsSet = false;
}

double IndexComposite::getWeight() const
{
    return m_Weight;
}


void IndexComposite::setWeight(double value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}
bool IndexComposite::weightIsSet() const
{
    return m_WeightIsSet;
}

void IndexComposite::unsetWeight()
{
    m_WeightIsSet = false;
}

utility::datetime IndexComposite::getLogged() const
{
    return m_Logged;
}


void IndexComposite::setLogged(utility::datetime value)
{
    m_Logged = value;
    m_LoggedIsSet = true;
}
bool IndexComposite::loggedIsSet() const
{
    return m_LoggedIsSet;
}

void IndexComposite::unsetLogged()
{
    m_LoggedIsSet = false;
}

}
}
}
}

