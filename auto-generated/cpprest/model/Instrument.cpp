/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Instrument.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Instrument::Instrument()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_RootSymbol = utility::conversions::to_string_t("");
    m_RootSymbolIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_Typ = utility::conversions::to_string_t("");
    m_TypIsSet = false;
    m_Listing = utility::datetime();
    m_ListingIsSet = false;
    m_Front = utility::datetime();
    m_FrontIsSet = false;
    m_Expiry = utility::datetime();
    m_ExpiryIsSet = false;
    m_Settle = utility::datetime();
    m_SettleIsSet = false;
    m_RelistInterval = utility::datetime();
    m_RelistIntervalIsSet = false;
    m_InverseLeg = utility::conversions::to_string_t("");
    m_InverseLegIsSet = false;
    m_SellLeg = utility::conversions::to_string_t("");
    m_SellLegIsSet = false;
    m_BuyLeg = utility::conversions::to_string_t("");
    m_BuyLegIsSet = false;
    m_OptionStrikePcnt = 0.0;
    m_OptionStrikePcntIsSet = false;
    m_OptionStrikeRound = 0.0;
    m_OptionStrikeRoundIsSet = false;
    m_OptionStrikePrice = 0.0;
    m_OptionStrikePriceIsSet = false;
    m_OptionMultiplier = 0.0;
    m_OptionMultiplierIsSet = false;
    m_PositionCurrency = utility::conversions::to_string_t("");
    m_PositionCurrencyIsSet = false;
    m_Underlying = utility::conversions::to_string_t("");
    m_UnderlyingIsSet = false;
    m_QuoteCurrency = utility::conversions::to_string_t("");
    m_QuoteCurrencyIsSet = false;
    m_UnderlyingSymbol = utility::conversions::to_string_t("");
    m_UnderlyingSymbolIsSet = false;
    m_Reference = utility::conversions::to_string_t("");
    m_ReferenceIsSet = false;
    m_ReferenceSymbol = utility::conversions::to_string_t("");
    m_ReferenceSymbolIsSet = false;
    m_CalcInterval = utility::datetime();
    m_CalcIntervalIsSet = false;
    m_PublishInterval = utility::datetime();
    m_PublishIntervalIsSet = false;
    m_PublishTime = utility::datetime();
    m_PublishTimeIsSet = false;
    m_MaxOrderQty = 0.0;
    m_MaxOrderQtyIsSet = false;
    m_MaxPrice = 0.0;
    m_MaxPriceIsSet = false;
    m_LotSize = 0.0;
    m_LotSizeIsSet = false;
    m_TickSize = 0.0;
    m_TickSizeIsSet = false;
    m_Multiplier = 0.0;
    m_MultiplierIsSet = false;
    m_SettlCurrency = utility::conversions::to_string_t("");
    m_SettlCurrencyIsSet = false;
    m_UnderlyingToPositionMultiplier = 0.0;
    m_UnderlyingToPositionMultiplierIsSet = false;
    m_UnderlyingToSettleMultiplier = 0.0;
    m_UnderlyingToSettleMultiplierIsSet = false;
    m_QuoteToSettleMultiplier = 0.0;
    m_QuoteToSettleMultiplierIsSet = false;
    m_IsQuanto = false;
    m_IsQuantoIsSet = false;
    m_IsInverse = false;
    m_IsInverseIsSet = false;
    m_InitMargin = 0.0;
    m_InitMarginIsSet = false;
    m_MaintMargin = 0.0;
    m_MaintMarginIsSet = false;
    m_RiskLimit = 0.0;
    m_RiskLimitIsSet = false;
    m_RiskStep = 0.0;
    m_RiskStepIsSet = false;
    m_Limit = 0.0;
    m_LimitIsSet = false;
    m_Capped = false;
    m_CappedIsSet = false;
    m_Taxed = false;
    m_TaxedIsSet = false;
    m_Deleverage = false;
    m_DeleverageIsSet = false;
    m_MakerFee = 0.0;
    m_MakerFeeIsSet = false;
    m_TakerFee = 0.0;
    m_TakerFeeIsSet = false;
    m_SettlementFee = 0.0;
    m_SettlementFeeIsSet = false;
    m_InsuranceFee = 0.0;
    m_InsuranceFeeIsSet = false;
    m_FundingBaseSymbol = utility::conversions::to_string_t("");
    m_FundingBaseSymbolIsSet = false;
    m_FundingQuoteSymbol = utility::conversions::to_string_t("");
    m_FundingQuoteSymbolIsSet = false;
    m_FundingPremiumSymbol = utility::conversions::to_string_t("");
    m_FundingPremiumSymbolIsSet = false;
    m_FundingTimestamp = utility::datetime();
    m_FundingTimestampIsSet = false;
    m_FundingInterval = utility::datetime();
    m_FundingIntervalIsSet = false;
    m_FundingRate = 0.0;
    m_FundingRateIsSet = false;
    m_IndicativeFundingRate = 0.0;
    m_IndicativeFundingRateIsSet = false;
    m_RebalanceTimestamp = utility::datetime();
    m_RebalanceTimestampIsSet = false;
    m_RebalanceInterval = utility::datetime();
    m_RebalanceIntervalIsSet = false;
    m_OpeningTimestamp = utility::datetime();
    m_OpeningTimestampIsSet = false;
    m_ClosingTimestamp = utility::datetime();
    m_ClosingTimestampIsSet = false;
    m_SessionInterval = utility::datetime();
    m_SessionIntervalIsSet = false;
    m_PrevClosePrice = 0.0;
    m_PrevClosePriceIsSet = false;
    m_LimitDownPrice = 0.0;
    m_LimitDownPriceIsSet = false;
    m_LimitUpPrice = 0.0;
    m_LimitUpPriceIsSet = false;
    m_BankruptLimitDownPrice = 0.0;
    m_BankruptLimitDownPriceIsSet = false;
    m_BankruptLimitUpPrice = 0.0;
    m_BankruptLimitUpPriceIsSet = false;
    m_PrevTotalVolume = 0.0;
    m_PrevTotalVolumeIsSet = false;
    m_TotalVolume = 0.0;
    m_TotalVolumeIsSet = false;
    m_Volume = 0.0;
    m_VolumeIsSet = false;
    m_Volume24h = 0.0;
    m_Volume24hIsSet = false;
    m_PrevTotalTurnover = 0.0;
    m_PrevTotalTurnoverIsSet = false;
    m_TotalTurnover = 0.0;
    m_TotalTurnoverIsSet = false;
    m_Turnover = 0.0;
    m_TurnoverIsSet = false;
    m_Turnover24h = 0.0;
    m_Turnover24hIsSet = false;
    m_PrevPrice24h = 0.0;
    m_PrevPrice24hIsSet = false;
    m_Vwap = 0.0;
    m_VwapIsSet = false;
    m_HighPrice = 0.0;
    m_HighPriceIsSet = false;
    m_LowPrice = 0.0;
    m_LowPriceIsSet = false;
    m_LastPrice = 0.0;
    m_LastPriceIsSet = false;
    m_LastPriceProtected = 0.0;
    m_LastPriceProtectedIsSet = false;
    m_LastTickDirection = utility::conversions::to_string_t("");
    m_LastTickDirectionIsSet = false;
    m_LastChangePcnt = 0.0;
    m_LastChangePcntIsSet = false;
    m_BidPrice = 0.0;
    m_BidPriceIsSet = false;
    m_MidPrice = 0.0;
    m_MidPriceIsSet = false;
    m_AskPrice = 0.0;
    m_AskPriceIsSet = false;
    m_ImpactBidPrice = 0.0;
    m_ImpactBidPriceIsSet = false;
    m_ImpactMidPrice = 0.0;
    m_ImpactMidPriceIsSet = false;
    m_ImpactAskPrice = 0.0;
    m_ImpactAskPriceIsSet = false;
    m_HasLiquidity = false;
    m_HasLiquidityIsSet = false;
    m_OpenInterest = 0.0;
    m_OpenInterestIsSet = false;
    m_OpenValue = 0.0;
    m_OpenValueIsSet = false;
    m_FairMethod = utility::conversions::to_string_t("");
    m_FairMethodIsSet = false;
    m_FairBasisRate = 0.0;
    m_FairBasisRateIsSet = false;
    m_FairBasis = 0.0;
    m_FairBasisIsSet = false;
    m_FairPrice = 0.0;
    m_FairPriceIsSet = false;
    m_MarkMethod = utility::conversions::to_string_t("");
    m_MarkMethodIsSet = false;
    m_MarkPrice = 0.0;
    m_MarkPriceIsSet = false;
    m_IndicativeTaxRate = 0.0;
    m_IndicativeTaxRateIsSet = false;
    m_IndicativeSettlePrice = 0.0;
    m_IndicativeSettlePriceIsSet = false;
    m_OptionUnderlyingPrice = 0.0;
    m_OptionUnderlyingPriceIsSet = false;
    m_SettledPrice = 0.0;
    m_SettledPriceIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
}

Instrument::~Instrument()
{
}

void Instrument::validate()
{
    // TODO: implement validation
}

web::json::value Instrument::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    if(m_RootSymbolIsSet)
    {
        val[utility::conversions::to_string_t("rootSymbol")] = ModelBase::toJson(m_RootSymbol);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_TypIsSet)
    {
        val[utility::conversions::to_string_t("typ")] = ModelBase::toJson(m_Typ);
    }
    if(m_ListingIsSet)
    {
        val[utility::conversions::to_string_t("listing")] = ModelBase::toJson(m_Listing);
    }
    if(m_FrontIsSet)
    {
        val[utility::conversions::to_string_t("front")] = ModelBase::toJson(m_Front);
    }
    if(m_ExpiryIsSet)
    {
        val[utility::conversions::to_string_t("expiry")] = ModelBase::toJson(m_Expiry);
    }
    if(m_SettleIsSet)
    {
        val[utility::conversions::to_string_t("settle")] = ModelBase::toJson(m_Settle);
    }
    if(m_RelistIntervalIsSet)
    {
        val[utility::conversions::to_string_t("relistInterval")] = ModelBase::toJson(m_RelistInterval);
    }
    if(m_InverseLegIsSet)
    {
        val[utility::conversions::to_string_t("inverseLeg")] = ModelBase::toJson(m_InverseLeg);
    }
    if(m_SellLegIsSet)
    {
        val[utility::conversions::to_string_t("sellLeg")] = ModelBase::toJson(m_SellLeg);
    }
    if(m_BuyLegIsSet)
    {
        val[utility::conversions::to_string_t("buyLeg")] = ModelBase::toJson(m_BuyLeg);
    }
    if(m_OptionStrikePcntIsSet)
    {
        val[utility::conversions::to_string_t("optionStrikePcnt")] = ModelBase::toJson(m_OptionStrikePcnt);
    }
    if(m_OptionStrikeRoundIsSet)
    {
        val[utility::conversions::to_string_t("optionStrikeRound")] = ModelBase::toJson(m_OptionStrikeRound);
    }
    if(m_OptionStrikePriceIsSet)
    {
        val[utility::conversions::to_string_t("optionStrikePrice")] = ModelBase::toJson(m_OptionStrikePrice);
    }
    if(m_OptionMultiplierIsSet)
    {
        val[utility::conversions::to_string_t("optionMultiplier")] = ModelBase::toJson(m_OptionMultiplier);
    }
    if(m_PositionCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("positionCurrency")] = ModelBase::toJson(m_PositionCurrency);
    }
    if(m_UnderlyingIsSet)
    {
        val[utility::conversions::to_string_t("underlying")] = ModelBase::toJson(m_Underlying);
    }
    if(m_QuoteCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("quoteCurrency")] = ModelBase::toJson(m_QuoteCurrency);
    }
    if(m_UnderlyingSymbolIsSet)
    {
        val[utility::conversions::to_string_t("underlyingSymbol")] = ModelBase::toJson(m_UnderlyingSymbol);
    }
    if(m_ReferenceIsSet)
    {
        val[utility::conversions::to_string_t("reference")] = ModelBase::toJson(m_Reference);
    }
    if(m_ReferenceSymbolIsSet)
    {
        val[utility::conversions::to_string_t("referenceSymbol")] = ModelBase::toJson(m_ReferenceSymbol);
    }
    if(m_CalcIntervalIsSet)
    {
        val[utility::conversions::to_string_t("calcInterval")] = ModelBase::toJson(m_CalcInterval);
    }
    if(m_PublishIntervalIsSet)
    {
        val[utility::conversions::to_string_t("publishInterval")] = ModelBase::toJson(m_PublishInterval);
    }
    if(m_PublishTimeIsSet)
    {
        val[utility::conversions::to_string_t("publishTime")] = ModelBase::toJson(m_PublishTime);
    }
    if(m_MaxOrderQtyIsSet)
    {
        val[utility::conversions::to_string_t("maxOrderQty")] = ModelBase::toJson(m_MaxOrderQty);
    }
    if(m_MaxPriceIsSet)
    {
        val[utility::conversions::to_string_t("maxPrice")] = ModelBase::toJson(m_MaxPrice);
    }
    if(m_LotSizeIsSet)
    {
        val[utility::conversions::to_string_t("lotSize")] = ModelBase::toJson(m_LotSize);
    }
    if(m_TickSizeIsSet)
    {
        val[utility::conversions::to_string_t("tickSize")] = ModelBase::toJson(m_TickSize);
    }
    if(m_MultiplierIsSet)
    {
        val[utility::conversions::to_string_t("multiplier")] = ModelBase::toJson(m_Multiplier);
    }
    if(m_SettlCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("settlCurrency")] = ModelBase::toJson(m_SettlCurrency);
    }
    if(m_UnderlyingToPositionMultiplierIsSet)
    {
        val[utility::conversions::to_string_t("underlyingToPositionMultiplier")] = ModelBase::toJson(m_UnderlyingToPositionMultiplier);
    }
    if(m_UnderlyingToSettleMultiplierIsSet)
    {
        val[utility::conversions::to_string_t("underlyingToSettleMultiplier")] = ModelBase::toJson(m_UnderlyingToSettleMultiplier);
    }
    if(m_QuoteToSettleMultiplierIsSet)
    {
        val[utility::conversions::to_string_t("quoteToSettleMultiplier")] = ModelBase::toJson(m_QuoteToSettleMultiplier);
    }
    if(m_IsQuantoIsSet)
    {
        val[utility::conversions::to_string_t("isQuanto")] = ModelBase::toJson(m_IsQuanto);
    }
    if(m_IsInverseIsSet)
    {
        val[utility::conversions::to_string_t("isInverse")] = ModelBase::toJson(m_IsInverse);
    }
    if(m_InitMarginIsSet)
    {
        val[utility::conversions::to_string_t("initMargin")] = ModelBase::toJson(m_InitMargin);
    }
    if(m_MaintMarginIsSet)
    {
        val[utility::conversions::to_string_t("maintMargin")] = ModelBase::toJson(m_MaintMargin);
    }
    if(m_RiskLimitIsSet)
    {
        val[utility::conversions::to_string_t("riskLimit")] = ModelBase::toJson(m_RiskLimit);
    }
    if(m_RiskStepIsSet)
    {
        val[utility::conversions::to_string_t("riskStep")] = ModelBase::toJson(m_RiskStep);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t("limit")] = ModelBase::toJson(m_Limit);
    }
    if(m_CappedIsSet)
    {
        val[utility::conversions::to_string_t("capped")] = ModelBase::toJson(m_Capped);
    }
    if(m_TaxedIsSet)
    {
        val[utility::conversions::to_string_t("taxed")] = ModelBase::toJson(m_Taxed);
    }
    if(m_DeleverageIsSet)
    {
        val[utility::conversions::to_string_t("deleverage")] = ModelBase::toJson(m_Deleverage);
    }
    if(m_MakerFeeIsSet)
    {
        val[utility::conversions::to_string_t("makerFee")] = ModelBase::toJson(m_MakerFee);
    }
    if(m_TakerFeeIsSet)
    {
        val[utility::conversions::to_string_t("takerFee")] = ModelBase::toJson(m_TakerFee);
    }
    if(m_SettlementFeeIsSet)
    {
        val[utility::conversions::to_string_t("settlementFee")] = ModelBase::toJson(m_SettlementFee);
    }
    if(m_InsuranceFeeIsSet)
    {
        val[utility::conversions::to_string_t("insuranceFee")] = ModelBase::toJson(m_InsuranceFee);
    }
    if(m_FundingBaseSymbolIsSet)
    {
        val[utility::conversions::to_string_t("fundingBaseSymbol")] = ModelBase::toJson(m_FundingBaseSymbol);
    }
    if(m_FundingQuoteSymbolIsSet)
    {
        val[utility::conversions::to_string_t("fundingQuoteSymbol")] = ModelBase::toJson(m_FundingQuoteSymbol);
    }
    if(m_FundingPremiumSymbolIsSet)
    {
        val[utility::conversions::to_string_t("fundingPremiumSymbol")] = ModelBase::toJson(m_FundingPremiumSymbol);
    }
    if(m_FundingTimestampIsSet)
    {
        val[utility::conversions::to_string_t("fundingTimestamp")] = ModelBase::toJson(m_FundingTimestamp);
    }
    if(m_FundingIntervalIsSet)
    {
        val[utility::conversions::to_string_t("fundingInterval")] = ModelBase::toJson(m_FundingInterval);
    }
    if(m_FundingRateIsSet)
    {
        val[utility::conversions::to_string_t("fundingRate")] = ModelBase::toJson(m_FundingRate);
    }
    if(m_IndicativeFundingRateIsSet)
    {
        val[utility::conversions::to_string_t("indicativeFundingRate")] = ModelBase::toJson(m_IndicativeFundingRate);
    }
    if(m_RebalanceTimestampIsSet)
    {
        val[utility::conversions::to_string_t("rebalanceTimestamp")] = ModelBase::toJson(m_RebalanceTimestamp);
    }
    if(m_RebalanceIntervalIsSet)
    {
        val[utility::conversions::to_string_t("rebalanceInterval")] = ModelBase::toJson(m_RebalanceInterval);
    }
    if(m_OpeningTimestampIsSet)
    {
        val[utility::conversions::to_string_t("openingTimestamp")] = ModelBase::toJson(m_OpeningTimestamp);
    }
    if(m_ClosingTimestampIsSet)
    {
        val[utility::conversions::to_string_t("closingTimestamp")] = ModelBase::toJson(m_ClosingTimestamp);
    }
    if(m_SessionIntervalIsSet)
    {
        val[utility::conversions::to_string_t("sessionInterval")] = ModelBase::toJson(m_SessionInterval);
    }
    if(m_PrevClosePriceIsSet)
    {
        val[utility::conversions::to_string_t("prevClosePrice")] = ModelBase::toJson(m_PrevClosePrice);
    }
    if(m_LimitDownPriceIsSet)
    {
        val[utility::conversions::to_string_t("limitDownPrice")] = ModelBase::toJson(m_LimitDownPrice);
    }
    if(m_LimitUpPriceIsSet)
    {
        val[utility::conversions::to_string_t("limitUpPrice")] = ModelBase::toJson(m_LimitUpPrice);
    }
    if(m_BankruptLimitDownPriceIsSet)
    {
        val[utility::conversions::to_string_t("bankruptLimitDownPrice")] = ModelBase::toJson(m_BankruptLimitDownPrice);
    }
    if(m_BankruptLimitUpPriceIsSet)
    {
        val[utility::conversions::to_string_t("bankruptLimitUpPrice")] = ModelBase::toJson(m_BankruptLimitUpPrice);
    }
    if(m_PrevTotalVolumeIsSet)
    {
        val[utility::conversions::to_string_t("prevTotalVolume")] = ModelBase::toJson(m_PrevTotalVolume);
    }
    if(m_TotalVolumeIsSet)
    {
        val[utility::conversions::to_string_t("totalVolume")] = ModelBase::toJson(m_TotalVolume);
    }
    if(m_VolumeIsSet)
    {
        val[utility::conversions::to_string_t("volume")] = ModelBase::toJson(m_Volume);
    }
    if(m_Volume24hIsSet)
    {
        val[utility::conversions::to_string_t("volume24h")] = ModelBase::toJson(m_Volume24h);
    }
    if(m_PrevTotalTurnoverIsSet)
    {
        val[utility::conversions::to_string_t("prevTotalTurnover")] = ModelBase::toJson(m_PrevTotalTurnover);
    }
    if(m_TotalTurnoverIsSet)
    {
        val[utility::conversions::to_string_t("totalTurnover")] = ModelBase::toJson(m_TotalTurnover);
    }
    if(m_TurnoverIsSet)
    {
        val[utility::conversions::to_string_t("turnover")] = ModelBase::toJson(m_Turnover);
    }
    if(m_Turnover24hIsSet)
    {
        val[utility::conversions::to_string_t("turnover24h")] = ModelBase::toJson(m_Turnover24h);
    }
    if(m_PrevPrice24hIsSet)
    {
        val[utility::conversions::to_string_t("prevPrice24h")] = ModelBase::toJson(m_PrevPrice24h);
    }
    if(m_VwapIsSet)
    {
        val[utility::conversions::to_string_t("vwap")] = ModelBase::toJson(m_Vwap);
    }
    if(m_HighPriceIsSet)
    {
        val[utility::conversions::to_string_t("highPrice")] = ModelBase::toJson(m_HighPrice);
    }
    if(m_LowPriceIsSet)
    {
        val[utility::conversions::to_string_t("lowPrice")] = ModelBase::toJson(m_LowPrice);
    }
    if(m_LastPriceIsSet)
    {
        val[utility::conversions::to_string_t("lastPrice")] = ModelBase::toJson(m_LastPrice);
    }
    if(m_LastPriceProtectedIsSet)
    {
        val[utility::conversions::to_string_t("lastPriceProtected")] = ModelBase::toJson(m_LastPriceProtected);
    }
    if(m_LastTickDirectionIsSet)
    {
        val[utility::conversions::to_string_t("lastTickDirection")] = ModelBase::toJson(m_LastTickDirection);
    }
    if(m_LastChangePcntIsSet)
    {
        val[utility::conversions::to_string_t("lastChangePcnt")] = ModelBase::toJson(m_LastChangePcnt);
    }
    if(m_BidPriceIsSet)
    {
        val[utility::conversions::to_string_t("bidPrice")] = ModelBase::toJson(m_BidPrice);
    }
    if(m_MidPriceIsSet)
    {
        val[utility::conversions::to_string_t("midPrice")] = ModelBase::toJson(m_MidPrice);
    }
    if(m_AskPriceIsSet)
    {
        val[utility::conversions::to_string_t("askPrice")] = ModelBase::toJson(m_AskPrice);
    }
    if(m_ImpactBidPriceIsSet)
    {
        val[utility::conversions::to_string_t("impactBidPrice")] = ModelBase::toJson(m_ImpactBidPrice);
    }
    if(m_ImpactMidPriceIsSet)
    {
        val[utility::conversions::to_string_t("impactMidPrice")] = ModelBase::toJson(m_ImpactMidPrice);
    }
    if(m_ImpactAskPriceIsSet)
    {
        val[utility::conversions::to_string_t("impactAskPrice")] = ModelBase::toJson(m_ImpactAskPrice);
    }
    if(m_HasLiquidityIsSet)
    {
        val[utility::conversions::to_string_t("hasLiquidity")] = ModelBase::toJson(m_HasLiquidity);
    }
    if(m_OpenInterestIsSet)
    {
        val[utility::conversions::to_string_t("openInterest")] = ModelBase::toJson(m_OpenInterest);
    }
    if(m_OpenValueIsSet)
    {
        val[utility::conversions::to_string_t("openValue")] = ModelBase::toJson(m_OpenValue);
    }
    if(m_FairMethodIsSet)
    {
        val[utility::conversions::to_string_t("fairMethod")] = ModelBase::toJson(m_FairMethod);
    }
    if(m_FairBasisRateIsSet)
    {
        val[utility::conversions::to_string_t("fairBasisRate")] = ModelBase::toJson(m_FairBasisRate);
    }
    if(m_FairBasisIsSet)
    {
        val[utility::conversions::to_string_t("fairBasis")] = ModelBase::toJson(m_FairBasis);
    }
    if(m_FairPriceIsSet)
    {
        val[utility::conversions::to_string_t("fairPrice")] = ModelBase::toJson(m_FairPrice);
    }
    if(m_MarkMethodIsSet)
    {
        val[utility::conversions::to_string_t("markMethod")] = ModelBase::toJson(m_MarkMethod);
    }
    if(m_MarkPriceIsSet)
    {
        val[utility::conversions::to_string_t("markPrice")] = ModelBase::toJson(m_MarkPrice);
    }
    if(m_IndicativeTaxRateIsSet)
    {
        val[utility::conversions::to_string_t("indicativeTaxRate")] = ModelBase::toJson(m_IndicativeTaxRate);
    }
    if(m_IndicativeSettlePriceIsSet)
    {
        val[utility::conversions::to_string_t("indicativeSettlePrice")] = ModelBase::toJson(m_IndicativeSettlePrice);
    }
    if(m_OptionUnderlyingPriceIsSet)
    {
        val[utility::conversions::to_string_t("optionUnderlyingPrice")] = ModelBase::toJson(m_OptionUnderlyingPrice);
    }
    if(m_SettledPriceIsSet)
    {
        val[utility::conversions::to_string_t("settledPrice")] = ModelBase::toJson(m_SettledPrice);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

void Instrument::fromJson(web::json::value& val)
{
    setSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("symbol")]));
    if(val.has_field(utility::conversions::to_string_t("rootSymbol")))
    {
        setRootSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("rootSymbol")]));
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        setState(ModelBase::stringFromJson(val[utility::conversions::to_string_t("state")]));
    }
    if(val.has_field(utility::conversions::to_string_t("typ")))
    {
        setTyp(ModelBase::stringFromJson(val[utility::conversions::to_string_t("typ")]));
    }
    if(val.has_field(utility::conversions::to_string_t("listing")))
    {
        setListing(ModelBase::dateFromJson(val[utility::conversions::to_string_t("listing")]));
    }
    if(val.has_field(utility::conversions::to_string_t("front")))
    {
        setFront(ModelBase::dateFromJson(val[utility::conversions::to_string_t("front")]));
    }
    if(val.has_field(utility::conversions::to_string_t("expiry")))
    {
        setExpiry(ModelBase::dateFromJson(val[utility::conversions::to_string_t("expiry")]));
    }
    if(val.has_field(utility::conversions::to_string_t("settle")))
    {
        setSettle(ModelBase::dateFromJson(val[utility::conversions::to_string_t("settle")]));
    }
    if(val.has_field(utility::conversions::to_string_t("relistInterval")))
    {
        setRelistInterval(ModelBase::dateFromJson(val[utility::conversions::to_string_t("relistInterval")]));
    }
    if(val.has_field(utility::conversions::to_string_t("inverseLeg")))
    {
        setInverseLeg(ModelBase::stringFromJson(val[utility::conversions::to_string_t("inverseLeg")]));
    }
    if(val.has_field(utility::conversions::to_string_t("sellLeg")))
    {
        setSellLeg(ModelBase::stringFromJson(val[utility::conversions::to_string_t("sellLeg")]));
    }
    if(val.has_field(utility::conversions::to_string_t("buyLeg")))
    {
        setBuyLeg(ModelBase::stringFromJson(val[utility::conversions::to_string_t("buyLeg")]));
    }
    if(val.has_field(utility::conversions::to_string_t("optionStrikePcnt")))
    {
        setOptionStrikePcnt(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("optionStrikePcnt")]));
    }
    if(val.has_field(utility::conversions::to_string_t("optionStrikeRound")))
    {
        setOptionStrikeRound(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("optionStrikeRound")]));
    }
    if(val.has_field(utility::conversions::to_string_t("optionStrikePrice")))
    {
        setOptionStrikePrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("optionStrikePrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("optionMultiplier")))
    {
        setOptionMultiplier(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("optionMultiplier")]));
    }
    if(val.has_field(utility::conversions::to_string_t("positionCurrency")))
    {
        setPositionCurrency(ModelBase::stringFromJson(val[utility::conversions::to_string_t("positionCurrency")]));
    }
    if(val.has_field(utility::conversions::to_string_t("underlying")))
    {
        setUnderlying(ModelBase::stringFromJson(val[utility::conversions::to_string_t("underlying")]));
    }
    if(val.has_field(utility::conversions::to_string_t("quoteCurrency")))
    {
        setQuoteCurrency(ModelBase::stringFromJson(val[utility::conversions::to_string_t("quoteCurrency")]));
    }
    if(val.has_field(utility::conversions::to_string_t("underlyingSymbol")))
    {
        setUnderlyingSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("underlyingSymbol")]));
    }
    if(val.has_field(utility::conversions::to_string_t("reference")))
    {
        setReference(ModelBase::stringFromJson(val[utility::conversions::to_string_t("reference")]));
    }
    if(val.has_field(utility::conversions::to_string_t("referenceSymbol")))
    {
        setReferenceSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("referenceSymbol")]));
    }
    if(val.has_field(utility::conversions::to_string_t("calcInterval")))
    {
        setCalcInterval(ModelBase::dateFromJson(val[utility::conversions::to_string_t("calcInterval")]));
    }
    if(val.has_field(utility::conversions::to_string_t("publishInterval")))
    {
        setPublishInterval(ModelBase::dateFromJson(val[utility::conversions::to_string_t("publishInterval")]));
    }
    if(val.has_field(utility::conversions::to_string_t("publishTime")))
    {
        setPublishTime(ModelBase::dateFromJson(val[utility::conversions::to_string_t("publishTime")]));
    }
    if(val.has_field(utility::conversions::to_string_t("maxOrderQty")))
    {
        setMaxOrderQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("maxOrderQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("maxPrice")))
    {
        setMaxPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("maxPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lotSize")))
    {
        setLotSize(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("lotSize")]));
    }
    if(val.has_field(utility::conversions::to_string_t("tickSize")))
    {
        setTickSize(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("tickSize")]));
    }
    if(val.has_field(utility::conversions::to_string_t("multiplier")))
    {
        setMultiplier(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("multiplier")]));
    }
    if(val.has_field(utility::conversions::to_string_t("settlCurrency")))
    {
        setSettlCurrency(ModelBase::stringFromJson(val[utility::conversions::to_string_t("settlCurrency")]));
    }
    if(val.has_field(utility::conversions::to_string_t("underlyingToPositionMultiplier")))
    {
        setUnderlyingToPositionMultiplier(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("underlyingToPositionMultiplier")]));
    }
    if(val.has_field(utility::conversions::to_string_t("underlyingToSettleMultiplier")))
    {
        setUnderlyingToSettleMultiplier(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("underlyingToSettleMultiplier")]));
    }
    if(val.has_field(utility::conversions::to_string_t("quoteToSettleMultiplier")))
    {
        setQuoteToSettleMultiplier(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("quoteToSettleMultiplier")]));
    }
    if(val.has_field(utility::conversions::to_string_t("isQuanto")))
    {
        setIsQuanto(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isQuanto")]));
    }
    if(val.has_field(utility::conversions::to_string_t("isInverse")))
    {
        setIsInverse(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isInverse")]));
    }
    if(val.has_field(utility::conversions::to_string_t("initMargin")))
    {
        setInitMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("initMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("maintMargin")))
    {
        setMaintMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("maintMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("riskLimit")))
    {
        setRiskLimit(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("riskLimit")]));
    }
    if(val.has_field(utility::conversions::to_string_t("riskStep")))
    {
        setRiskStep(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("riskStep")]));
    }
    if(val.has_field(utility::conversions::to_string_t("limit")))
    {
        setLimit(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("limit")]));
    }
    if(val.has_field(utility::conversions::to_string_t("capped")))
    {
        setCapped(ModelBase::boolFromJson(val[utility::conversions::to_string_t("capped")]));
    }
    if(val.has_field(utility::conversions::to_string_t("taxed")))
    {
        setTaxed(ModelBase::boolFromJson(val[utility::conversions::to_string_t("taxed")]));
    }
    if(val.has_field(utility::conversions::to_string_t("deleverage")))
    {
        setDeleverage(ModelBase::boolFromJson(val[utility::conversions::to_string_t("deleverage")]));
    }
    if(val.has_field(utility::conversions::to_string_t("makerFee")))
    {
        setMakerFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("makerFee")]));
    }
    if(val.has_field(utility::conversions::to_string_t("takerFee")))
    {
        setTakerFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("takerFee")]));
    }
    if(val.has_field(utility::conversions::to_string_t("settlementFee")))
    {
        setSettlementFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("settlementFee")]));
    }
    if(val.has_field(utility::conversions::to_string_t("insuranceFee")))
    {
        setInsuranceFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("insuranceFee")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fundingBaseSymbol")))
    {
        setFundingBaseSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fundingBaseSymbol")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fundingQuoteSymbol")))
    {
        setFundingQuoteSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fundingQuoteSymbol")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fundingPremiumSymbol")))
    {
        setFundingPremiumSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fundingPremiumSymbol")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fundingTimestamp")))
    {
        setFundingTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("fundingTimestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fundingInterval")))
    {
        setFundingInterval(ModelBase::dateFromJson(val[utility::conversions::to_string_t("fundingInterval")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fundingRate")))
    {
        setFundingRate(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("fundingRate")]));
    }
    if(val.has_field(utility::conversions::to_string_t("indicativeFundingRate")))
    {
        setIndicativeFundingRate(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("indicativeFundingRate")]));
    }
    if(val.has_field(utility::conversions::to_string_t("rebalanceTimestamp")))
    {
        setRebalanceTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("rebalanceTimestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("rebalanceInterval")))
    {
        setRebalanceInterval(ModelBase::dateFromJson(val[utility::conversions::to_string_t("rebalanceInterval")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openingTimestamp")))
    {
        setOpeningTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("openingTimestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("closingTimestamp")))
    {
        setClosingTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("closingTimestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("sessionInterval")))
    {
        setSessionInterval(ModelBase::dateFromJson(val[utility::conversions::to_string_t("sessionInterval")]));
    }
    if(val.has_field(utility::conversions::to_string_t("prevClosePrice")))
    {
        setPrevClosePrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("prevClosePrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("limitDownPrice")))
    {
        setLimitDownPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("limitDownPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("limitUpPrice")))
    {
        setLimitUpPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("limitUpPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("bankruptLimitDownPrice")))
    {
        setBankruptLimitDownPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("bankruptLimitDownPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("bankruptLimitUpPrice")))
    {
        setBankruptLimitUpPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("bankruptLimitUpPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("prevTotalVolume")))
    {
        setPrevTotalVolume(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("prevTotalVolume")]));
    }
    if(val.has_field(utility::conversions::to_string_t("totalVolume")))
    {
        setTotalVolume(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("totalVolume")]));
    }
    if(val.has_field(utility::conversions::to_string_t("volume")))
    {
        setVolume(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("volume")]));
    }
    if(val.has_field(utility::conversions::to_string_t("volume24h")))
    {
        setVolume24h(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("volume24h")]));
    }
    if(val.has_field(utility::conversions::to_string_t("prevTotalTurnover")))
    {
        setPrevTotalTurnover(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("prevTotalTurnover")]));
    }
    if(val.has_field(utility::conversions::to_string_t("totalTurnover")))
    {
        setTotalTurnover(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("totalTurnover")]));
    }
    if(val.has_field(utility::conversions::to_string_t("turnover")))
    {
        setTurnover(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("turnover")]));
    }
    if(val.has_field(utility::conversions::to_string_t("turnover24h")))
    {
        setTurnover24h(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("turnover24h")]));
    }
    if(val.has_field(utility::conversions::to_string_t("prevPrice24h")))
    {
        setPrevPrice24h(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("prevPrice24h")]));
    }
    if(val.has_field(utility::conversions::to_string_t("vwap")))
    {
        setVwap(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("vwap")]));
    }
    if(val.has_field(utility::conversions::to_string_t("highPrice")))
    {
        setHighPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("highPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lowPrice")))
    {
        setLowPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("lowPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastPrice")))
    {
        setLastPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("lastPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastPriceProtected")))
    {
        setLastPriceProtected(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("lastPriceProtected")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastTickDirection")))
    {
        setLastTickDirection(ModelBase::stringFromJson(val[utility::conversions::to_string_t("lastTickDirection")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastChangePcnt")))
    {
        setLastChangePcnt(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("lastChangePcnt")]));
    }
    if(val.has_field(utility::conversions::to_string_t("bidPrice")))
    {
        setBidPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("bidPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("midPrice")))
    {
        setMidPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("midPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("askPrice")))
    {
        setAskPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("askPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("impactBidPrice")))
    {
        setImpactBidPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("impactBidPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("impactMidPrice")))
    {
        setImpactMidPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("impactMidPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("impactAskPrice")))
    {
        setImpactAskPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("impactAskPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("hasLiquidity")))
    {
        setHasLiquidity(ModelBase::boolFromJson(val[utility::conversions::to_string_t("hasLiquidity")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openInterest")))
    {
        setOpenInterest(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openInterest")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openValue")))
    {
        setOpenValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openValue")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fairMethod")))
    {
        setFairMethod(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fairMethod")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fairBasisRate")))
    {
        setFairBasisRate(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("fairBasisRate")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fairBasis")))
    {
        setFairBasis(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("fairBasis")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fairPrice")))
    {
        setFairPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("fairPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("markMethod")))
    {
        setMarkMethod(ModelBase::stringFromJson(val[utility::conversions::to_string_t("markMethod")]));
    }
    if(val.has_field(utility::conversions::to_string_t("markPrice")))
    {
        setMarkPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("markPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("indicativeTaxRate")))
    {
        setIndicativeTaxRate(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("indicativeTaxRate")]));
    }
    if(val.has_field(utility::conversions::to_string_t("indicativeSettlePrice")))
    {
        setIndicativeSettlePrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("indicativeSettlePrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("optionUnderlyingPrice")))
    {
        setOptionUnderlyingPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("optionUnderlyingPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("settledPrice")))
    {
        setSettledPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("settledPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("timestamp")]));
    }
}

void Instrument::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
    if(m_RootSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rootSymbol"), m_RootSymbol));
        
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
        
    }
    if(m_TypIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("typ"), m_Typ));
        
    }
    if(m_ListingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listing"), m_Listing));
        
    }
    if(m_FrontIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("front"), m_Front));
        
    }
    if(m_ExpiryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expiry"), m_Expiry));
        
    }
    if(m_SettleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("settle"), m_Settle));
        
    }
    if(m_RelistIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relistInterval"), m_RelistInterval));
        
    }
    if(m_InverseLegIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inverseLeg"), m_InverseLeg));
        
    }
    if(m_SellLegIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sellLeg"), m_SellLeg));
        
    }
    if(m_BuyLegIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("buyLeg"), m_BuyLeg));
        
    }
    if(m_OptionStrikePcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionStrikePcnt"), m_OptionStrikePcnt));
    }
    if(m_OptionStrikeRoundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionStrikeRound"), m_OptionStrikeRound));
    }
    if(m_OptionStrikePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionStrikePrice"), m_OptionStrikePrice));
    }
    if(m_OptionMultiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionMultiplier"), m_OptionMultiplier));
    }
    if(m_PositionCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("positionCurrency"), m_PositionCurrency));
        
    }
    if(m_UnderlyingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("underlying"), m_Underlying));
        
    }
    if(m_QuoteCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quoteCurrency"), m_QuoteCurrency));
        
    }
    if(m_UnderlyingSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("underlyingSymbol"), m_UnderlyingSymbol));
        
    }
    if(m_ReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reference"), m_Reference));
        
    }
    if(m_ReferenceSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceSymbol"), m_ReferenceSymbol));
        
    }
    if(m_CalcIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("calcInterval"), m_CalcInterval));
        
    }
    if(m_PublishIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("publishInterval"), m_PublishInterval));
        
    }
    if(m_PublishTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("publishTime"), m_PublishTime));
        
    }
    if(m_MaxOrderQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxOrderQty"), m_MaxOrderQty));
    }
    if(m_MaxPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxPrice"), m_MaxPrice));
    }
    if(m_LotSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lotSize"), m_LotSize));
    }
    if(m_TickSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tickSize"), m_TickSize));
    }
    if(m_MultiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("multiplier"), m_Multiplier));
    }
    if(m_SettlCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("settlCurrency"), m_SettlCurrency));
        
    }
    if(m_UnderlyingToPositionMultiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("underlyingToPositionMultiplier"), m_UnderlyingToPositionMultiplier));
    }
    if(m_UnderlyingToSettleMultiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("underlyingToSettleMultiplier"), m_UnderlyingToSettleMultiplier));
    }
    if(m_QuoteToSettleMultiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quoteToSettleMultiplier"), m_QuoteToSettleMultiplier));
    }
    if(m_IsQuantoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isQuanto"), m_IsQuanto));
    }
    if(m_IsInverseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isInverse"), m_IsInverse));
    }
    if(m_InitMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initMargin"), m_InitMargin));
    }
    if(m_MaintMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maintMargin"), m_MaintMargin));
    }
    if(m_RiskLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("riskLimit"), m_RiskLimit));
    }
    if(m_RiskStepIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("riskStep"), m_RiskStep));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("limit"), m_Limit));
    }
    if(m_CappedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("capped"), m_Capped));
    }
    if(m_TaxedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("taxed"), m_Taxed));
    }
    if(m_DeleverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deleverage"), m_Deleverage));
    }
    if(m_MakerFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("makerFee"), m_MakerFee));
    }
    if(m_TakerFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("takerFee"), m_TakerFee));
    }
    if(m_SettlementFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("settlementFee"), m_SettlementFee));
    }
    if(m_InsuranceFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("insuranceFee"), m_InsuranceFee));
    }
    if(m_FundingBaseSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fundingBaseSymbol"), m_FundingBaseSymbol));
        
    }
    if(m_FundingQuoteSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fundingQuoteSymbol"), m_FundingQuoteSymbol));
        
    }
    if(m_FundingPremiumSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fundingPremiumSymbol"), m_FundingPremiumSymbol));
        
    }
    if(m_FundingTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fundingTimestamp"), m_FundingTimestamp));
        
    }
    if(m_FundingIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fundingInterval"), m_FundingInterval));
        
    }
    if(m_FundingRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fundingRate"), m_FundingRate));
    }
    if(m_IndicativeFundingRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indicativeFundingRate"), m_IndicativeFundingRate));
    }
    if(m_RebalanceTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rebalanceTimestamp"), m_RebalanceTimestamp));
        
    }
    if(m_RebalanceIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rebalanceInterval"), m_RebalanceInterval));
        
    }
    if(m_OpeningTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openingTimestamp"), m_OpeningTimestamp));
        
    }
    if(m_ClosingTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("closingTimestamp"), m_ClosingTimestamp));
        
    }
    if(m_SessionIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sessionInterval"), m_SessionInterval));
        
    }
    if(m_PrevClosePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevClosePrice"), m_PrevClosePrice));
    }
    if(m_LimitDownPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("limitDownPrice"), m_LimitDownPrice));
    }
    if(m_LimitUpPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("limitUpPrice"), m_LimitUpPrice));
    }
    if(m_BankruptLimitDownPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bankruptLimitDownPrice"), m_BankruptLimitDownPrice));
    }
    if(m_BankruptLimitUpPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bankruptLimitUpPrice"), m_BankruptLimitUpPrice));
    }
    if(m_PrevTotalVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevTotalVolume"), m_PrevTotalVolume));
    }
    if(m_TotalVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("totalVolume"), m_TotalVolume));
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("volume"), m_Volume));
    }
    if(m_Volume24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("volume24h"), m_Volume24h));
    }
    if(m_PrevTotalTurnoverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevTotalTurnover"), m_PrevTotalTurnover));
    }
    if(m_TotalTurnoverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("totalTurnover"), m_TotalTurnover));
    }
    if(m_TurnoverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("turnover"), m_Turnover));
    }
    if(m_Turnover24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("turnover24h"), m_Turnover24h));
    }
    if(m_PrevPrice24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevPrice24h"), m_PrevPrice24h));
    }
    if(m_VwapIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vwap"), m_Vwap));
    }
    if(m_HighPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highPrice"), m_HighPrice));
    }
    if(m_LowPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowPrice"), m_LowPrice));
    }
    if(m_LastPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastPrice"), m_LastPrice));
    }
    if(m_LastPriceProtectedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastPriceProtected"), m_LastPriceProtected));
    }
    if(m_LastTickDirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastTickDirection"), m_LastTickDirection));
        
    }
    if(m_LastChangePcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastChangePcnt"), m_LastChangePcnt));
    }
    if(m_BidPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bidPrice"), m_BidPrice));
    }
    if(m_MidPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("midPrice"), m_MidPrice));
    }
    if(m_AskPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("askPrice"), m_AskPrice));
    }
    if(m_ImpactBidPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("impactBidPrice"), m_ImpactBidPrice));
    }
    if(m_ImpactMidPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("impactMidPrice"), m_ImpactMidPrice));
    }
    if(m_ImpactAskPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("impactAskPrice"), m_ImpactAskPrice));
    }
    if(m_HasLiquidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasLiquidity"), m_HasLiquidity));
    }
    if(m_OpenInterestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openInterest"), m_OpenInterest));
    }
    if(m_OpenValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openValue"), m_OpenValue));
    }
    if(m_FairMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fairMethod"), m_FairMethod));
        
    }
    if(m_FairBasisRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fairBasisRate"), m_FairBasisRate));
    }
    if(m_FairBasisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fairBasis"), m_FairBasis));
    }
    if(m_FairPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fairPrice"), m_FairPrice));
    }
    if(m_MarkMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("markMethod"), m_MarkMethod));
        
    }
    if(m_MarkPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("markPrice"), m_MarkPrice));
    }
    if(m_IndicativeTaxRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indicativeTaxRate"), m_IndicativeTaxRate));
    }
    if(m_IndicativeSettlePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indicativeSettlePrice"), m_IndicativeSettlePrice));
    }
    if(m_OptionUnderlyingPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionUnderlyingPrice"), m_OptionUnderlyingPrice));
    }
    if(m_SettledPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("settledPrice"), m_SettledPrice));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
        
    }
}

void Instrument::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    if(multipart->hasContent(utility::conversions::to_string_t("rootSymbol")))
    {
        setRootSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rootSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        setState(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("state"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typ")))
    {
        setTyp(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("typ"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("listing")))
    {
        setListing(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listing"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("front")))
    {
        setFront(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("front"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expiry")))
    {
        setExpiry(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("expiry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("settle")))
    {
        setSettle(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("settle"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relistInterval")))
    {
        setRelistInterval(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("relistInterval"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inverseLeg")))
    {
        setInverseLeg(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("inverseLeg"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sellLeg")))
    {
        setSellLeg(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sellLeg"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("buyLeg")))
    {
        setBuyLeg(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("buyLeg"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionStrikePcnt")))
    {
        setOptionStrikePcnt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionStrikePcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionStrikeRound")))
    {
        setOptionStrikeRound(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionStrikeRound"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionStrikePrice")))
    {
        setOptionStrikePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionStrikePrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionMultiplier")))
    {
        setOptionMultiplier(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionMultiplier"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("positionCurrency")))
    {
        setPositionCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("positionCurrency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("underlying")))
    {
        setUnderlying(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("underlying"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quoteCurrency")))
    {
        setQuoteCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quoteCurrency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("underlyingSymbol")))
    {
        setUnderlyingSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("underlyingSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reference")))
    {
        setReference(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("reference"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceSymbol")))
    {
        setReferenceSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("calcInterval")))
    {
        setCalcInterval(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("calcInterval"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("publishInterval")))
    {
        setPublishInterval(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("publishInterval"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("publishTime")))
    {
        setPublishTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("publishTime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxOrderQty")))
    {
        setMaxOrderQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxOrderQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxPrice")))
    {
        setMaxPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lotSize")))
    {
        setLotSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lotSize"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tickSize")))
    {
        setTickSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tickSize"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("multiplier")))
    {
        setMultiplier(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("multiplier"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("settlCurrency")))
    {
        setSettlCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("settlCurrency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("underlyingToPositionMultiplier")))
    {
        setUnderlyingToPositionMultiplier(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("underlyingToPositionMultiplier"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("underlyingToSettleMultiplier")))
    {
        setUnderlyingToSettleMultiplier(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("underlyingToSettleMultiplier"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quoteToSettleMultiplier")))
    {
        setQuoteToSettleMultiplier(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quoteToSettleMultiplier"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isQuanto")))
    {
        setIsQuanto(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isQuanto"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isInverse")))
    {
        setIsInverse(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isInverse"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initMargin")))
    {
        setInitMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maintMargin")))
    {
        setMaintMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maintMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("riskLimit")))
    {
        setRiskLimit(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("riskLimit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("riskStep")))
    {
        setRiskStep(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("riskStep"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("limit")))
    {
        setLimit(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("limit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("capped")))
    {
        setCapped(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("capped"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("taxed")))
    {
        setTaxed(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("taxed"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deleverage")))
    {
        setDeleverage(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deleverage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("makerFee")))
    {
        setMakerFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("makerFee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("takerFee")))
    {
        setTakerFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("takerFee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("settlementFee")))
    {
        setSettlementFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("settlementFee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("insuranceFee")))
    {
        setInsuranceFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("insuranceFee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fundingBaseSymbol")))
    {
        setFundingBaseSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fundingBaseSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fundingQuoteSymbol")))
    {
        setFundingQuoteSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fundingQuoteSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fundingPremiumSymbol")))
    {
        setFundingPremiumSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fundingPremiumSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fundingTimestamp")))
    {
        setFundingTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fundingTimestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fundingInterval")))
    {
        setFundingInterval(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fundingInterval"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fundingRate")))
    {
        setFundingRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fundingRate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indicativeFundingRate")))
    {
        setIndicativeFundingRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("indicativeFundingRate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rebalanceTimestamp")))
    {
        setRebalanceTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rebalanceTimestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rebalanceInterval")))
    {
        setRebalanceInterval(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rebalanceInterval"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openingTimestamp")))
    {
        setOpeningTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openingTimestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("closingTimestamp")))
    {
        setClosingTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("closingTimestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sessionInterval")))
    {
        setSessionInterval(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sessionInterval"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevClosePrice")))
    {
        setPrevClosePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevClosePrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("limitDownPrice")))
    {
        setLimitDownPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("limitDownPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("limitUpPrice")))
    {
        setLimitUpPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("limitUpPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bankruptLimitDownPrice")))
    {
        setBankruptLimitDownPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bankruptLimitDownPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bankruptLimitUpPrice")))
    {
        setBankruptLimitUpPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bankruptLimitUpPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevTotalVolume")))
    {
        setPrevTotalVolume(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevTotalVolume"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("totalVolume")))
    {
        setTotalVolume(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("totalVolume"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("volume")))
    {
        setVolume(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("volume"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("volume24h")))
    {
        setVolume24h(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("volume24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevTotalTurnover")))
    {
        setPrevTotalTurnover(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevTotalTurnover"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("totalTurnover")))
    {
        setTotalTurnover(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("totalTurnover"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("turnover")))
    {
        setTurnover(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("turnover"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("turnover24h")))
    {
        setTurnover24h(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("turnover24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevPrice24h")))
    {
        setPrevPrice24h(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevPrice24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vwap")))
    {
        setVwap(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vwap"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("highPrice")))
    {
        setHighPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("highPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lowPrice")))
    {
        setLowPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastPrice")))
    {
        setLastPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastPriceProtected")))
    {
        setLastPriceProtected(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastPriceProtected"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastTickDirection")))
    {
        setLastTickDirection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastTickDirection"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastChangePcnt")))
    {
        setLastChangePcnt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastChangePcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bidPrice")))
    {
        setBidPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bidPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("midPrice")))
    {
        setMidPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("midPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("askPrice")))
    {
        setAskPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("askPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("impactBidPrice")))
    {
        setImpactBidPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("impactBidPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("impactMidPrice")))
    {
        setImpactMidPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("impactMidPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("impactAskPrice")))
    {
        setImpactAskPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("impactAskPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasLiquidity")))
    {
        setHasLiquidity(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasLiquidity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openInterest")))
    {
        setOpenInterest(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openInterest"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openValue")))
    {
        setOpenValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openValue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fairMethod")))
    {
        setFairMethod(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fairMethod"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fairBasisRate")))
    {
        setFairBasisRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fairBasisRate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fairBasis")))
    {
        setFairBasis(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fairBasis"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fairPrice")))
    {
        setFairPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fairPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("markMethod")))
    {
        setMarkMethod(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("markMethod"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("markPrice")))
    {
        setMarkPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("markPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indicativeTaxRate")))
    {
        setIndicativeTaxRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("indicativeTaxRate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indicativeSettlePrice")))
    {
        setIndicativeSettlePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("indicativeSettlePrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionUnderlyingPrice")))
    {
        setOptionUnderlyingPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionUnderlyingPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("settledPrice")))
    {
        setSettledPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("settledPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
}

utility::string_t Instrument::getSymbol() const
{
    return m_Symbol;
}


void Instrument::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    
}
utility::string_t Instrument::getRootSymbol() const
{
    return m_RootSymbol;
}


void Instrument::setRootSymbol(utility::string_t value)
{
    m_RootSymbol = value;
    m_RootSymbolIsSet = true;
}
bool Instrument::rootSymbolIsSet() const
{
    return m_RootSymbolIsSet;
}

void Instrument::unsetRootSymbol()
{
    m_RootSymbolIsSet = false;
}

utility::string_t Instrument::getState() const
{
    return m_State;
}


void Instrument::setState(utility::string_t value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool Instrument::stateIsSet() const
{
    return m_StateIsSet;
}

void Instrument::unsetState()
{
    m_StateIsSet = false;
}

utility::string_t Instrument::getTyp() const
{
    return m_Typ;
}


void Instrument::setTyp(utility::string_t value)
{
    m_Typ = value;
    m_TypIsSet = true;
}
bool Instrument::typIsSet() const
{
    return m_TypIsSet;
}

void Instrument::unsetTyp()
{
    m_TypIsSet = false;
}

utility::datetime Instrument::getListing() const
{
    return m_Listing;
}


void Instrument::setListing(utility::datetime value)
{
    m_Listing = value;
    m_ListingIsSet = true;
}
bool Instrument::listingIsSet() const
{
    return m_ListingIsSet;
}

void Instrument::unsetListing()
{
    m_ListingIsSet = false;
}

utility::datetime Instrument::getFront() const
{
    return m_Front;
}


void Instrument::setFront(utility::datetime value)
{
    m_Front = value;
    m_FrontIsSet = true;
}
bool Instrument::frontIsSet() const
{
    return m_FrontIsSet;
}

void Instrument::unsetFront()
{
    m_FrontIsSet = false;
}

utility::datetime Instrument::getExpiry() const
{
    return m_Expiry;
}


void Instrument::setExpiry(utility::datetime value)
{
    m_Expiry = value;
    m_ExpiryIsSet = true;
}
bool Instrument::expiryIsSet() const
{
    return m_ExpiryIsSet;
}

void Instrument::unsetExpiry()
{
    m_ExpiryIsSet = false;
}

utility::datetime Instrument::getSettle() const
{
    return m_Settle;
}


void Instrument::setSettle(utility::datetime value)
{
    m_Settle = value;
    m_SettleIsSet = true;
}
bool Instrument::settleIsSet() const
{
    return m_SettleIsSet;
}

void Instrument::unsetSettle()
{
    m_SettleIsSet = false;
}

utility::datetime Instrument::getRelistInterval() const
{
    return m_RelistInterval;
}


void Instrument::setRelistInterval(utility::datetime value)
{
    m_RelistInterval = value;
    m_RelistIntervalIsSet = true;
}
bool Instrument::relistIntervalIsSet() const
{
    return m_RelistIntervalIsSet;
}

void Instrument::unsetRelistInterval()
{
    m_RelistIntervalIsSet = false;
}

utility::string_t Instrument::getInverseLeg() const
{
    return m_InverseLeg;
}


void Instrument::setInverseLeg(utility::string_t value)
{
    m_InverseLeg = value;
    m_InverseLegIsSet = true;
}
bool Instrument::inverseLegIsSet() const
{
    return m_InverseLegIsSet;
}

void Instrument::unsetInverseLeg()
{
    m_InverseLegIsSet = false;
}

utility::string_t Instrument::getSellLeg() const
{
    return m_SellLeg;
}


void Instrument::setSellLeg(utility::string_t value)
{
    m_SellLeg = value;
    m_SellLegIsSet = true;
}
bool Instrument::sellLegIsSet() const
{
    return m_SellLegIsSet;
}

void Instrument::unsetSellLeg()
{
    m_SellLegIsSet = false;
}

utility::string_t Instrument::getBuyLeg() const
{
    return m_BuyLeg;
}


void Instrument::setBuyLeg(utility::string_t value)
{
    m_BuyLeg = value;
    m_BuyLegIsSet = true;
}
bool Instrument::buyLegIsSet() const
{
    return m_BuyLegIsSet;
}

void Instrument::unsetBuyLeg()
{
    m_BuyLegIsSet = false;
}

double Instrument::getOptionStrikePcnt() const
{
    return m_OptionStrikePcnt;
}


void Instrument::setOptionStrikePcnt(double value)
{
    m_OptionStrikePcnt = value;
    m_OptionStrikePcntIsSet = true;
}
bool Instrument::optionStrikePcntIsSet() const
{
    return m_OptionStrikePcntIsSet;
}

void Instrument::unsetOptionStrikePcnt()
{
    m_OptionStrikePcntIsSet = false;
}

double Instrument::getOptionStrikeRound() const
{
    return m_OptionStrikeRound;
}


void Instrument::setOptionStrikeRound(double value)
{
    m_OptionStrikeRound = value;
    m_OptionStrikeRoundIsSet = true;
}
bool Instrument::optionStrikeRoundIsSet() const
{
    return m_OptionStrikeRoundIsSet;
}

void Instrument::unsetOptionStrikeRound()
{
    m_OptionStrikeRoundIsSet = false;
}

double Instrument::getOptionStrikePrice() const
{
    return m_OptionStrikePrice;
}


void Instrument::setOptionStrikePrice(double value)
{
    m_OptionStrikePrice = value;
    m_OptionStrikePriceIsSet = true;
}
bool Instrument::optionStrikePriceIsSet() const
{
    return m_OptionStrikePriceIsSet;
}

void Instrument::unsetOptionStrikePrice()
{
    m_OptionStrikePriceIsSet = false;
}

double Instrument::getOptionMultiplier() const
{
    return m_OptionMultiplier;
}


void Instrument::setOptionMultiplier(double value)
{
    m_OptionMultiplier = value;
    m_OptionMultiplierIsSet = true;
}
bool Instrument::optionMultiplierIsSet() const
{
    return m_OptionMultiplierIsSet;
}

void Instrument::unsetOptionMultiplier()
{
    m_OptionMultiplierIsSet = false;
}

utility::string_t Instrument::getPositionCurrency() const
{
    return m_PositionCurrency;
}


void Instrument::setPositionCurrency(utility::string_t value)
{
    m_PositionCurrency = value;
    m_PositionCurrencyIsSet = true;
}
bool Instrument::positionCurrencyIsSet() const
{
    return m_PositionCurrencyIsSet;
}

void Instrument::unsetPositionCurrency()
{
    m_PositionCurrencyIsSet = false;
}

utility::string_t Instrument::getUnderlying() const
{
    return m_Underlying;
}


void Instrument::setUnderlying(utility::string_t value)
{
    m_Underlying = value;
    m_UnderlyingIsSet = true;
}
bool Instrument::underlyingIsSet() const
{
    return m_UnderlyingIsSet;
}

void Instrument::unsetUnderlying()
{
    m_UnderlyingIsSet = false;
}

utility::string_t Instrument::getQuoteCurrency() const
{
    return m_QuoteCurrency;
}


void Instrument::setQuoteCurrency(utility::string_t value)
{
    m_QuoteCurrency = value;
    m_QuoteCurrencyIsSet = true;
}
bool Instrument::quoteCurrencyIsSet() const
{
    return m_QuoteCurrencyIsSet;
}

void Instrument::unsetQuoteCurrency()
{
    m_QuoteCurrencyIsSet = false;
}

utility::string_t Instrument::getUnderlyingSymbol() const
{
    return m_UnderlyingSymbol;
}


void Instrument::setUnderlyingSymbol(utility::string_t value)
{
    m_UnderlyingSymbol = value;
    m_UnderlyingSymbolIsSet = true;
}
bool Instrument::underlyingSymbolIsSet() const
{
    return m_UnderlyingSymbolIsSet;
}

void Instrument::unsetUnderlyingSymbol()
{
    m_UnderlyingSymbolIsSet = false;
}

utility::string_t Instrument::getReference() const
{
    return m_Reference;
}


void Instrument::setReference(utility::string_t value)
{
    m_Reference = value;
    m_ReferenceIsSet = true;
}
bool Instrument::referenceIsSet() const
{
    return m_ReferenceIsSet;
}

void Instrument::unsetReference()
{
    m_ReferenceIsSet = false;
}

utility::string_t Instrument::getReferenceSymbol() const
{
    return m_ReferenceSymbol;
}


void Instrument::setReferenceSymbol(utility::string_t value)
{
    m_ReferenceSymbol = value;
    m_ReferenceSymbolIsSet = true;
}
bool Instrument::referenceSymbolIsSet() const
{
    return m_ReferenceSymbolIsSet;
}

void Instrument::unsetReferenceSymbol()
{
    m_ReferenceSymbolIsSet = false;
}

utility::datetime Instrument::getCalcInterval() const
{
    return m_CalcInterval;
}


void Instrument::setCalcInterval(utility::datetime value)
{
    m_CalcInterval = value;
    m_CalcIntervalIsSet = true;
}
bool Instrument::calcIntervalIsSet() const
{
    return m_CalcIntervalIsSet;
}

void Instrument::unsetCalcInterval()
{
    m_CalcIntervalIsSet = false;
}

utility::datetime Instrument::getPublishInterval() const
{
    return m_PublishInterval;
}


void Instrument::setPublishInterval(utility::datetime value)
{
    m_PublishInterval = value;
    m_PublishIntervalIsSet = true;
}
bool Instrument::publishIntervalIsSet() const
{
    return m_PublishIntervalIsSet;
}

void Instrument::unsetPublishInterval()
{
    m_PublishIntervalIsSet = false;
}

utility::datetime Instrument::getPublishTime() const
{
    return m_PublishTime;
}


void Instrument::setPublishTime(utility::datetime value)
{
    m_PublishTime = value;
    m_PublishTimeIsSet = true;
}
bool Instrument::publishTimeIsSet() const
{
    return m_PublishTimeIsSet;
}

void Instrument::unsetPublishTime()
{
    m_PublishTimeIsSet = false;
}

double Instrument::getMaxOrderQty() const
{
    return m_MaxOrderQty;
}


void Instrument::setMaxOrderQty(double value)
{
    m_MaxOrderQty = value;
    m_MaxOrderQtyIsSet = true;
}
bool Instrument::maxOrderQtyIsSet() const
{
    return m_MaxOrderQtyIsSet;
}

void Instrument::unsetMaxOrderQty()
{
    m_MaxOrderQtyIsSet = false;
}

double Instrument::getMaxPrice() const
{
    return m_MaxPrice;
}


void Instrument::setMaxPrice(double value)
{
    m_MaxPrice = value;
    m_MaxPriceIsSet = true;
}
bool Instrument::maxPriceIsSet() const
{
    return m_MaxPriceIsSet;
}

void Instrument::unsetMaxPrice()
{
    m_MaxPriceIsSet = false;
}

double Instrument::getLotSize() const
{
    return m_LotSize;
}


void Instrument::setLotSize(double value)
{
    m_LotSize = value;
    m_LotSizeIsSet = true;
}
bool Instrument::lotSizeIsSet() const
{
    return m_LotSizeIsSet;
}

void Instrument::unsetLotSize()
{
    m_LotSizeIsSet = false;
}

double Instrument::getTickSize() const
{
    return m_TickSize;
}


void Instrument::setTickSize(double value)
{
    m_TickSize = value;
    m_TickSizeIsSet = true;
}
bool Instrument::tickSizeIsSet() const
{
    return m_TickSizeIsSet;
}

void Instrument::unsetTickSize()
{
    m_TickSizeIsSet = false;
}

double Instrument::getMultiplier() const
{
    return m_Multiplier;
}


void Instrument::setMultiplier(double value)
{
    m_Multiplier = value;
    m_MultiplierIsSet = true;
}
bool Instrument::multiplierIsSet() const
{
    return m_MultiplierIsSet;
}

void Instrument::unsetMultiplier()
{
    m_MultiplierIsSet = false;
}

utility::string_t Instrument::getSettlCurrency() const
{
    return m_SettlCurrency;
}


void Instrument::setSettlCurrency(utility::string_t value)
{
    m_SettlCurrency = value;
    m_SettlCurrencyIsSet = true;
}
bool Instrument::settlCurrencyIsSet() const
{
    return m_SettlCurrencyIsSet;
}

void Instrument::unsetSettlCurrency()
{
    m_SettlCurrencyIsSet = false;
}

double Instrument::getUnderlyingToPositionMultiplier() const
{
    return m_UnderlyingToPositionMultiplier;
}


void Instrument::setUnderlyingToPositionMultiplier(double value)
{
    m_UnderlyingToPositionMultiplier = value;
    m_UnderlyingToPositionMultiplierIsSet = true;
}
bool Instrument::underlyingToPositionMultiplierIsSet() const
{
    return m_UnderlyingToPositionMultiplierIsSet;
}

void Instrument::unsetUnderlyingToPositionMultiplier()
{
    m_UnderlyingToPositionMultiplierIsSet = false;
}

double Instrument::getUnderlyingToSettleMultiplier() const
{
    return m_UnderlyingToSettleMultiplier;
}


void Instrument::setUnderlyingToSettleMultiplier(double value)
{
    m_UnderlyingToSettleMultiplier = value;
    m_UnderlyingToSettleMultiplierIsSet = true;
}
bool Instrument::underlyingToSettleMultiplierIsSet() const
{
    return m_UnderlyingToSettleMultiplierIsSet;
}

void Instrument::unsetUnderlyingToSettleMultiplier()
{
    m_UnderlyingToSettleMultiplierIsSet = false;
}

double Instrument::getQuoteToSettleMultiplier() const
{
    return m_QuoteToSettleMultiplier;
}


void Instrument::setQuoteToSettleMultiplier(double value)
{
    m_QuoteToSettleMultiplier = value;
    m_QuoteToSettleMultiplierIsSet = true;
}
bool Instrument::quoteToSettleMultiplierIsSet() const
{
    return m_QuoteToSettleMultiplierIsSet;
}

void Instrument::unsetQuoteToSettleMultiplier()
{
    m_QuoteToSettleMultiplierIsSet = false;
}

bool Instrument::isIsQuanto() const
{
    return m_IsQuanto;
}


void Instrument::setIsQuanto(bool value)
{
    m_IsQuanto = value;
    m_IsQuantoIsSet = true;
}
bool Instrument::isQuantoIsSet() const
{
    return m_IsQuantoIsSet;
}

void Instrument::unsetIsQuanto()
{
    m_IsQuantoIsSet = false;
}

bool Instrument::isIsInverse() const
{
    return m_IsInverse;
}


void Instrument::setIsInverse(bool value)
{
    m_IsInverse = value;
    m_IsInverseIsSet = true;
}
bool Instrument::isInverseIsSet() const
{
    return m_IsInverseIsSet;
}

void Instrument::unsetIsInverse()
{
    m_IsInverseIsSet = false;
}

double Instrument::getInitMargin() const
{
    return m_InitMargin;
}


void Instrument::setInitMargin(double value)
{
    m_InitMargin = value;
    m_InitMarginIsSet = true;
}
bool Instrument::initMarginIsSet() const
{
    return m_InitMarginIsSet;
}

void Instrument::unsetInitMargin()
{
    m_InitMarginIsSet = false;
}

double Instrument::getMaintMargin() const
{
    return m_MaintMargin;
}


void Instrument::setMaintMargin(double value)
{
    m_MaintMargin = value;
    m_MaintMarginIsSet = true;
}
bool Instrument::maintMarginIsSet() const
{
    return m_MaintMarginIsSet;
}

void Instrument::unsetMaintMargin()
{
    m_MaintMarginIsSet = false;
}

double Instrument::getRiskLimit() const
{
    return m_RiskLimit;
}


void Instrument::setRiskLimit(double value)
{
    m_RiskLimit = value;
    m_RiskLimitIsSet = true;
}
bool Instrument::riskLimitIsSet() const
{
    return m_RiskLimitIsSet;
}

void Instrument::unsetRiskLimit()
{
    m_RiskLimitIsSet = false;
}

double Instrument::getRiskStep() const
{
    return m_RiskStep;
}


void Instrument::setRiskStep(double value)
{
    m_RiskStep = value;
    m_RiskStepIsSet = true;
}
bool Instrument::riskStepIsSet() const
{
    return m_RiskStepIsSet;
}

void Instrument::unsetRiskStep()
{
    m_RiskStepIsSet = false;
}

double Instrument::getLimit() const
{
    return m_Limit;
}


void Instrument::setLimit(double value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}
bool Instrument::limitIsSet() const
{
    return m_LimitIsSet;
}

void Instrument::unsetLimit()
{
    m_LimitIsSet = false;
}

bool Instrument::isCapped() const
{
    return m_Capped;
}


void Instrument::setCapped(bool value)
{
    m_Capped = value;
    m_CappedIsSet = true;
}
bool Instrument::cappedIsSet() const
{
    return m_CappedIsSet;
}

void Instrument::unsetCapped()
{
    m_CappedIsSet = false;
}

bool Instrument::isTaxed() const
{
    return m_Taxed;
}


void Instrument::setTaxed(bool value)
{
    m_Taxed = value;
    m_TaxedIsSet = true;
}
bool Instrument::taxedIsSet() const
{
    return m_TaxedIsSet;
}

void Instrument::unsetTaxed()
{
    m_TaxedIsSet = false;
}

bool Instrument::isDeleverage() const
{
    return m_Deleverage;
}


void Instrument::setDeleverage(bool value)
{
    m_Deleverage = value;
    m_DeleverageIsSet = true;
}
bool Instrument::deleverageIsSet() const
{
    return m_DeleverageIsSet;
}

void Instrument::unsetDeleverage()
{
    m_DeleverageIsSet = false;
}

double Instrument::getMakerFee() const
{
    return m_MakerFee;
}


void Instrument::setMakerFee(double value)
{
    m_MakerFee = value;
    m_MakerFeeIsSet = true;
}
bool Instrument::makerFeeIsSet() const
{
    return m_MakerFeeIsSet;
}

void Instrument::unsetMakerFee()
{
    m_MakerFeeIsSet = false;
}

double Instrument::getTakerFee() const
{
    return m_TakerFee;
}


void Instrument::setTakerFee(double value)
{
    m_TakerFee = value;
    m_TakerFeeIsSet = true;
}
bool Instrument::takerFeeIsSet() const
{
    return m_TakerFeeIsSet;
}

void Instrument::unsetTakerFee()
{
    m_TakerFeeIsSet = false;
}

double Instrument::getSettlementFee() const
{
    return m_SettlementFee;
}


void Instrument::setSettlementFee(double value)
{
    m_SettlementFee = value;
    m_SettlementFeeIsSet = true;
}
bool Instrument::settlementFeeIsSet() const
{
    return m_SettlementFeeIsSet;
}

void Instrument::unsetSettlementFee()
{
    m_SettlementFeeIsSet = false;
}

double Instrument::getInsuranceFee() const
{
    return m_InsuranceFee;
}


void Instrument::setInsuranceFee(double value)
{
    m_InsuranceFee = value;
    m_InsuranceFeeIsSet = true;
}
bool Instrument::insuranceFeeIsSet() const
{
    return m_InsuranceFeeIsSet;
}

void Instrument::unsetInsuranceFee()
{
    m_InsuranceFeeIsSet = false;
}

utility::string_t Instrument::getFundingBaseSymbol() const
{
    return m_FundingBaseSymbol;
}


void Instrument::setFundingBaseSymbol(utility::string_t value)
{
    m_FundingBaseSymbol = value;
    m_FundingBaseSymbolIsSet = true;
}
bool Instrument::fundingBaseSymbolIsSet() const
{
    return m_FundingBaseSymbolIsSet;
}

void Instrument::unsetFundingBaseSymbol()
{
    m_FundingBaseSymbolIsSet = false;
}

utility::string_t Instrument::getFundingQuoteSymbol() const
{
    return m_FundingQuoteSymbol;
}


void Instrument::setFundingQuoteSymbol(utility::string_t value)
{
    m_FundingQuoteSymbol = value;
    m_FundingQuoteSymbolIsSet = true;
}
bool Instrument::fundingQuoteSymbolIsSet() const
{
    return m_FundingQuoteSymbolIsSet;
}

void Instrument::unsetFundingQuoteSymbol()
{
    m_FundingQuoteSymbolIsSet = false;
}

utility::string_t Instrument::getFundingPremiumSymbol() const
{
    return m_FundingPremiumSymbol;
}


void Instrument::setFundingPremiumSymbol(utility::string_t value)
{
    m_FundingPremiumSymbol = value;
    m_FundingPremiumSymbolIsSet = true;
}
bool Instrument::fundingPremiumSymbolIsSet() const
{
    return m_FundingPremiumSymbolIsSet;
}

void Instrument::unsetFundingPremiumSymbol()
{
    m_FundingPremiumSymbolIsSet = false;
}

utility::datetime Instrument::getFundingTimestamp() const
{
    return m_FundingTimestamp;
}


void Instrument::setFundingTimestamp(utility::datetime value)
{
    m_FundingTimestamp = value;
    m_FundingTimestampIsSet = true;
}
bool Instrument::fundingTimestampIsSet() const
{
    return m_FundingTimestampIsSet;
}

void Instrument::unsetFundingTimestamp()
{
    m_FundingTimestampIsSet = false;
}

utility::datetime Instrument::getFundingInterval() const
{
    return m_FundingInterval;
}


void Instrument::setFundingInterval(utility::datetime value)
{
    m_FundingInterval = value;
    m_FundingIntervalIsSet = true;
}
bool Instrument::fundingIntervalIsSet() const
{
    return m_FundingIntervalIsSet;
}

void Instrument::unsetFundingInterval()
{
    m_FundingIntervalIsSet = false;
}

double Instrument::getFundingRate() const
{
    return m_FundingRate;
}


void Instrument::setFundingRate(double value)
{
    m_FundingRate = value;
    m_FundingRateIsSet = true;
}
bool Instrument::fundingRateIsSet() const
{
    return m_FundingRateIsSet;
}

void Instrument::unsetFundingRate()
{
    m_FundingRateIsSet = false;
}

double Instrument::getIndicativeFundingRate() const
{
    return m_IndicativeFundingRate;
}


void Instrument::setIndicativeFundingRate(double value)
{
    m_IndicativeFundingRate = value;
    m_IndicativeFundingRateIsSet = true;
}
bool Instrument::indicativeFundingRateIsSet() const
{
    return m_IndicativeFundingRateIsSet;
}

void Instrument::unsetIndicativeFundingRate()
{
    m_IndicativeFundingRateIsSet = false;
}

utility::datetime Instrument::getRebalanceTimestamp() const
{
    return m_RebalanceTimestamp;
}


void Instrument::setRebalanceTimestamp(utility::datetime value)
{
    m_RebalanceTimestamp = value;
    m_RebalanceTimestampIsSet = true;
}
bool Instrument::rebalanceTimestampIsSet() const
{
    return m_RebalanceTimestampIsSet;
}

void Instrument::unsetRebalanceTimestamp()
{
    m_RebalanceTimestampIsSet = false;
}

utility::datetime Instrument::getRebalanceInterval() const
{
    return m_RebalanceInterval;
}


void Instrument::setRebalanceInterval(utility::datetime value)
{
    m_RebalanceInterval = value;
    m_RebalanceIntervalIsSet = true;
}
bool Instrument::rebalanceIntervalIsSet() const
{
    return m_RebalanceIntervalIsSet;
}

void Instrument::unsetRebalanceInterval()
{
    m_RebalanceIntervalIsSet = false;
}

utility::datetime Instrument::getOpeningTimestamp() const
{
    return m_OpeningTimestamp;
}


void Instrument::setOpeningTimestamp(utility::datetime value)
{
    m_OpeningTimestamp = value;
    m_OpeningTimestampIsSet = true;
}
bool Instrument::openingTimestampIsSet() const
{
    return m_OpeningTimestampIsSet;
}

void Instrument::unsetOpeningTimestamp()
{
    m_OpeningTimestampIsSet = false;
}

utility::datetime Instrument::getClosingTimestamp() const
{
    return m_ClosingTimestamp;
}


void Instrument::setClosingTimestamp(utility::datetime value)
{
    m_ClosingTimestamp = value;
    m_ClosingTimestampIsSet = true;
}
bool Instrument::closingTimestampIsSet() const
{
    return m_ClosingTimestampIsSet;
}

void Instrument::unsetClosingTimestamp()
{
    m_ClosingTimestampIsSet = false;
}

utility::datetime Instrument::getSessionInterval() const
{
    return m_SessionInterval;
}


void Instrument::setSessionInterval(utility::datetime value)
{
    m_SessionInterval = value;
    m_SessionIntervalIsSet = true;
}
bool Instrument::sessionIntervalIsSet() const
{
    return m_SessionIntervalIsSet;
}

void Instrument::unsetSessionInterval()
{
    m_SessionIntervalIsSet = false;
}

double Instrument::getPrevClosePrice() const
{
    return m_PrevClosePrice;
}


void Instrument::setPrevClosePrice(double value)
{
    m_PrevClosePrice = value;
    m_PrevClosePriceIsSet = true;
}
bool Instrument::prevClosePriceIsSet() const
{
    return m_PrevClosePriceIsSet;
}

void Instrument::unsetPrevClosePrice()
{
    m_PrevClosePriceIsSet = false;
}

double Instrument::getLimitDownPrice() const
{
    return m_LimitDownPrice;
}


void Instrument::setLimitDownPrice(double value)
{
    m_LimitDownPrice = value;
    m_LimitDownPriceIsSet = true;
}
bool Instrument::limitDownPriceIsSet() const
{
    return m_LimitDownPriceIsSet;
}

void Instrument::unsetLimitDownPrice()
{
    m_LimitDownPriceIsSet = false;
}

double Instrument::getLimitUpPrice() const
{
    return m_LimitUpPrice;
}


void Instrument::setLimitUpPrice(double value)
{
    m_LimitUpPrice = value;
    m_LimitUpPriceIsSet = true;
}
bool Instrument::limitUpPriceIsSet() const
{
    return m_LimitUpPriceIsSet;
}

void Instrument::unsetLimitUpPrice()
{
    m_LimitUpPriceIsSet = false;
}

double Instrument::getBankruptLimitDownPrice() const
{
    return m_BankruptLimitDownPrice;
}


void Instrument::setBankruptLimitDownPrice(double value)
{
    m_BankruptLimitDownPrice = value;
    m_BankruptLimitDownPriceIsSet = true;
}
bool Instrument::bankruptLimitDownPriceIsSet() const
{
    return m_BankruptLimitDownPriceIsSet;
}

void Instrument::unsetBankruptLimitDownPrice()
{
    m_BankruptLimitDownPriceIsSet = false;
}

double Instrument::getBankruptLimitUpPrice() const
{
    return m_BankruptLimitUpPrice;
}


void Instrument::setBankruptLimitUpPrice(double value)
{
    m_BankruptLimitUpPrice = value;
    m_BankruptLimitUpPriceIsSet = true;
}
bool Instrument::bankruptLimitUpPriceIsSet() const
{
    return m_BankruptLimitUpPriceIsSet;
}

void Instrument::unsetBankruptLimitUpPrice()
{
    m_BankruptLimitUpPriceIsSet = false;
}

double Instrument::getPrevTotalVolume() const
{
    return m_PrevTotalVolume;
}


void Instrument::setPrevTotalVolume(double value)
{
    m_PrevTotalVolume = value;
    m_PrevTotalVolumeIsSet = true;
}
bool Instrument::prevTotalVolumeIsSet() const
{
    return m_PrevTotalVolumeIsSet;
}

void Instrument::unsetPrevTotalVolume()
{
    m_PrevTotalVolumeIsSet = false;
}

double Instrument::getTotalVolume() const
{
    return m_TotalVolume;
}


void Instrument::setTotalVolume(double value)
{
    m_TotalVolume = value;
    m_TotalVolumeIsSet = true;
}
bool Instrument::totalVolumeIsSet() const
{
    return m_TotalVolumeIsSet;
}

void Instrument::unsetTotalVolume()
{
    m_TotalVolumeIsSet = false;
}

double Instrument::getVolume() const
{
    return m_Volume;
}


void Instrument::setVolume(double value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}
bool Instrument::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void Instrument::unsetVolume()
{
    m_VolumeIsSet = false;
}

double Instrument::getVolume24h() const
{
    return m_Volume24h;
}


void Instrument::setVolume24h(double value)
{
    m_Volume24h = value;
    m_Volume24hIsSet = true;
}
bool Instrument::volume24hIsSet() const
{
    return m_Volume24hIsSet;
}

void Instrument::unsetVolume24h()
{
    m_Volume24hIsSet = false;
}

double Instrument::getPrevTotalTurnover() const
{
    return m_PrevTotalTurnover;
}


void Instrument::setPrevTotalTurnover(double value)
{
    m_PrevTotalTurnover = value;
    m_PrevTotalTurnoverIsSet = true;
}
bool Instrument::prevTotalTurnoverIsSet() const
{
    return m_PrevTotalTurnoverIsSet;
}

void Instrument::unsetPrevTotalTurnover()
{
    m_PrevTotalTurnoverIsSet = false;
}

double Instrument::getTotalTurnover() const
{
    return m_TotalTurnover;
}


void Instrument::setTotalTurnover(double value)
{
    m_TotalTurnover = value;
    m_TotalTurnoverIsSet = true;
}
bool Instrument::totalTurnoverIsSet() const
{
    return m_TotalTurnoverIsSet;
}

void Instrument::unsetTotalTurnover()
{
    m_TotalTurnoverIsSet = false;
}

double Instrument::getTurnover() const
{
    return m_Turnover;
}


void Instrument::setTurnover(double value)
{
    m_Turnover = value;
    m_TurnoverIsSet = true;
}
bool Instrument::turnoverIsSet() const
{
    return m_TurnoverIsSet;
}

void Instrument::unsetTurnover()
{
    m_TurnoverIsSet = false;
}

double Instrument::getTurnover24h() const
{
    return m_Turnover24h;
}


void Instrument::setTurnover24h(double value)
{
    m_Turnover24h = value;
    m_Turnover24hIsSet = true;
}
bool Instrument::turnover24hIsSet() const
{
    return m_Turnover24hIsSet;
}

void Instrument::unsetTurnover24h()
{
    m_Turnover24hIsSet = false;
}

double Instrument::getPrevPrice24h() const
{
    return m_PrevPrice24h;
}


void Instrument::setPrevPrice24h(double value)
{
    m_PrevPrice24h = value;
    m_PrevPrice24hIsSet = true;
}
bool Instrument::prevPrice24hIsSet() const
{
    return m_PrevPrice24hIsSet;
}

void Instrument::unsetPrevPrice24h()
{
    m_PrevPrice24hIsSet = false;
}

double Instrument::getVwap() const
{
    return m_Vwap;
}


void Instrument::setVwap(double value)
{
    m_Vwap = value;
    m_VwapIsSet = true;
}
bool Instrument::vwapIsSet() const
{
    return m_VwapIsSet;
}

void Instrument::unsetVwap()
{
    m_VwapIsSet = false;
}

double Instrument::getHighPrice() const
{
    return m_HighPrice;
}


void Instrument::setHighPrice(double value)
{
    m_HighPrice = value;
    m_HighPriceIsSet = true;
}
bool Instrument::highPriceIsSet() const
{
    return m_HighPriceIsSet;
}

void Instrument::unsetHighPrice()
{
    m_HighPriceIsSet = false;
}

double Instrument::getLowPrice() const
{
    return m_LowPrice;
}


void Instrument::setLowPrice(double value)
{
    m_LowPrice = value;
    m_LowPriceIsSet = true;
}
bool Instrument::lowPriceIsSet() const
{
    return m_LowPriceIsSet;
}

void Instrument::unsetLowPrice()
{
    m_LowPriceIsSet = false;
}

double Instrument::getLastPrice() const
{
    return m_LastPrice;
}


void Instrument::setLastPrice(double value)
{
    m_LastPrice = value;
    m_LastPriceIsSet = true;
}
bool Instrument::lastPriceIsSet() const
{
    return m_LastPriceIsSet;
}

void Instrument::unsetLastPrice()
{
    m_LastPriceIsSet = false;
}

double Instrument::getLastPriceProtected() const
{
    return m_LastPriceProtected;
}


void Instrument::setLastPriceProtected(double value)
{
    m_LastPriceProtected = value;
    m_LastPriceProtectedIsSet = true;
}
bool Instrument::lastPriceProtectedIsSet() const
{
    return m_LastPriceProtectedIsSet;
}

void Instrument::unsetLastPriceProtected()
{
    m_LastPriceProtectedIsSet = false;
}

utility::string_t Instrument::getLastTickDirection() const
{
    return m_LastTickDirection;
}


void Instrument::setLastTickDirection(utility::string_t value)
{
    m_LastTickDirection = value;
    m_LastTickDirectionIsSet = true;
}
bool Instrument::lastTickDirectionIsSet() const
{
    return m_LastTickDirectionIsSet;
}

void Instrument::unsetLastTickDirection()
{
    m_LastTickDirectionIsSet = false;
}

double Instrument::getLastChangePcnt() const
{
    return m_LastChangePcnt;
}


void Instrument::setLastChangePcnt(double value)
{
    m_LastChangePcnt = value;
    m_LastChangePcntIsSet = true;
}
bool Instrument::lastChangePcntIsSet() const
{
    return m_LastChangePcntIsSet;
}

void Instrument::unsetLastChangePcnt()
{
    m_LastChangePcntIsSet = false;
}

double Instrument::getBidPrice() const
{
    return m_BidPrice;
}


void Instrument::setBidPrice(double value)
{
    m_BidPrice = value;
    m_BidPriceIsSet = true;
}
bool Instrument::bidPriceIsSet() const
{
    return m_BidPriceIsSet;
}

void Instrument::unsetBidPrice()
{
    m_BidPriceIsSet = false;
}

double Instrument::getMidPrice() const
{
    return m_MidPrice;
}


void Instrument::setMidPrice(double value)
{
    m_MidPrice = value;
    m_MidPriceIsSet = true;
}
bool Instrument::midPriceIsSet() const
{
    return m_MidPriceIsSet;
}

void Instrument::unsetMidPrice()
{
    m_MidPriceIsSet = false;
}

double Instrument::getAskPrice() const
{
    return m_AskPrice;
}


void Instrument::setAskPrice(double value)
{
    m_AskPrice = value;
    m_AskPriceIsSet = true;
}
bool Instrument::askPriceIsSet() const
{
    return m_AskPriceIsSet;
}

void Instrument::unsetAskPrice()
{
    m_AskPriceIsSet = false;
}

double Instrument::getImpactBidPrice() const
{
    return m_ImpactBidPrice;
}


void Instrument::setImpactBidPrice(double value)
{
    m_ImpactBidPrice = value;
    m_ImpactBidPriceIsSet = true;
}
bool Instrument::impactBidPriceIsSet() const
{
    return m_ImpactBidPriceIsSet;
}

void Instrument::unsetImpactBidPrice()
{
    m_ImpactBidPriceIsSet = false;
}

double Instrument::getImpactMidPrice() const
{
    return m_ImpactMidPrice;
}


void Instrument::setImpactMidPrice(double value)
{
    m_ImpactMidPrice = value;
    m_ImpactMidPriceIsSet = true;
}
bool Instrument::impactMidPriceIsSet() const
{
    return m_ImpactMidPriceIsSet;
}

void Instrument::unsetImpactMidPrice()
{
    m_ImpactMidPriceIsSet = false;
}

double Instrument::getImpactAskPrice() const
{
    return m_ImpactAskPrice;
}


void Instrument::setImpactAskPrice(double value)
{
    m_ImpactAskPrice = value;
    m_ImpactAskPriceIsSet = true;
}
bool Instrument::impactAskPriceIsSet() const
{
    return m_ImpactAskPriceIsSet;
}

void Instrument::unsetImpactAskPrice()
{
    m_ImpactAskPriceIsSet = false;
}

bool Instrument::isHasLiquidity() const
{
    return m_HasLiquidity;
}


void Instrument::setHasLiquidity(bool value)
{
    m_HasLiquidity = value;
    m_HasLiquidityIsSet = true;
}
bool Instrument::hasLiquidityIsSet() const
{
    return m_HasLiquidityIsSet;
}

void Instrument::unsetHasLiquidity()
{
    m_HasLiquidityIsSet = false;
}

double Instrument::getOpenInterest() const
{
    return m_OpenInterest;
}


void Instrument::setOpenInterest(double value)
{
    m_OpenInterest = value;
    m_OpenInterestIsSet = true;
}
bool Instrument::openInterestIsSet() const
{
    return m_OpenInterestIsSet;
}

void Instrument::unsetOpenInterest()
{
    m_OpenInterestIsSet = false;
}

double Instrument::getOpenValue() const
{
    return m_OpenValue;
}


void Instrument::setOpenValue(double value)
{
    m_OpenValue = value;
    m_OpenValueIsSet = true;
}
bool Instrument::openValueIsSet() const
{
    return m_OpenValueIsSet;
}

void Instrument::unsetOpenValue()
{
    m_OpenValueIsSet = false;
}

utility::string_t Instrument::getFairMethod() const
{
    return m_FairMethod;
}


void Instrument::setFairMethod(utility::string_t value)
{
    m_FairMethod = value;
    m_FairMethodIsSet = true;
}
bool Instrument::fairMethodIsSet() const
{
    return m_FairMethodIsSet;
}

void Instrument::unsetFairMethod()
{
    m_FairMethodIsSet = false;
}

double Instrument::getFairBasisRate() const
{
    return m_FairBasisRate;
}


void Instrument::setFairBasisRate(double value)
{
    m_FairBasisRate = value;
    m_FairBasisRateIsSet = true;
}
bool Instrument::fairBasisRateIsSet() const
{
    return m_FairBasisRateIsSet;
}

void Instrument::unsetFairBasisRate()
{
    m_FairBasisRateIsSet = false;
}

double Instrument::getFairBasis() const
{
    return m_FairBasis;
}


void Instrument::setFairBasis(double value)
{
    m_FairBasis = value;
    m_FairBasisIsSet = true;
}
bool Instrument::fairBasisIsSet() const
{
    return m_FairBasisIsSet;
}

void Instrument::unsetFairBasis()
{
    m_FairBasisIsSet = false;
}

double Instrument::getFairPrice() const
{
    return m_FairPrice;
}


void Instrument::setFairPrice(double value)
{
    m_FairPrice = value;
    m_FairPriceIsSet = true;
}
bool Instrument::fairPriceIsSet() const
{
    return m_FairPriceIsSet;
}

void Instrument::unsetFairPrice()
{
    m_FairPriceIsSet = false;
}

utility::string_t Instrument::getMarkMethod() const
{
    return m_MarkMethod;
}


void Instrument::setMarkMethod(utility::string_t value)
{
    m_MarkMethod = value;
    m_MarkMethodIsSet = true;
}
bool Instrument::markMethodIsSet() const
{
    return m_MarkMethodIsSet;
}

void Instrument::unsetMarkMethod()
{
    m_MarkMethodIsSet = false;
}

double Instrument::getMarkPrice() const
{
    return m_MarkPrice;
}


void Instrument::setMarkPrice(double value)
{
    m_MarkPrice = value;
    m_MarkPriceIsSet = true;
}
bool Instrument::markPriceIsSet() const
{
    return m_MarkPriceIsSet;
}

void Instrument::unsetMarkPrice()
{
    m_MarkPriceIsSet = false;
}

double Instrument::getIndicativeTaxRate() const
{
    return m_IndicativeTaxRate;
}


void Instrument::setIndicativeTaxRate(double value)
{
    m_IndicativeTaxRate = value;
    m_IndicativeTaxRateIsSet = true;
}
bool Instrument::indicativeTaxRateIsSet() const
{
    return m_IndicativeTaxRateIsSet;
}

void Instrument::unsetIndicativeTaxRate()
{
    m_IndicativeTaxRateIsSet = false;
}

double Instrument::getIndicativeSettlePrice() const
{
    return m_IndicativeSettlePrice;
}


void Instrument::setIndicativeSettlePrice(double value)
{
    m_IndicativeSettlePrice = value;
    m_IndicativeSettlePriceIsSet = true;
}
bool Instrument::indicativeSettlePriceIsSet() const
{
    return m_IndicativeSettlePriceIsSet;
}

void Instrument::unsetIndicativeSettlePrice()
{
    m_IndicativeSettlePriceIsSet = false;
}

double Instrument::getOptionUnderlyingPrice() const
{
    return m_OptionUnderlyingPrice;
}


void Instrument::setOptionUnderlyingPrice(double value)
{
    m_OptionUnderlyingPrice = value;
    m_OptionUnderlyingPriceIsSet = true;
}
bool Instrument::optionUnderlyingPriceIsSet() const
{
    return m_OptionUnderlyingPriceIsSet;
}

void Instrument::unsetOptionUnderlyingPrice()
{
    m_OptionUnderlyingPriceIsSet = false;
}

double Instrument::getSettledPrice() const
{
    return m_SettledPrice;
}


void Instrument::setSettledPrice(double value)
{
    m_SettledPrice = value;
    m_SettledPriceIsSet = true;
}
bool Instrument::settledPriceIsSet() const
{
    return m_SettledPriceIsSet;
}

void Instrument::unsetSettledPrice()
{
    m_SettledPriceIsSet = false;
}

utility::datetime Instrument::getTimestamp() const
{
    return m_Timestamp;
}


void Instrument::setTimestamp(utility::datetime value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Instrument::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Instrument::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

}
}
}
}

