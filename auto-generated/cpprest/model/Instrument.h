/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Instrument.h
 *
 * Tradeable Contracts, Indices, and History
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Instrument_H_
#define IO_SWAGGER_CLIENT_MODEL_Instrument_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Tradeable Contracts, Indices, and History
/// </summary>
class  Instrument
    : public ModelBase
{
public:
    Instrument();
    virtual ~Instrument();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Instrument members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSymbol() const;
        void setSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRootSymbol() const;
    bool rootSymbolIsSet() const;
    void unsetRootSymbol();
    void setRootSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();
    void setState(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTyp() const;
    bool typIsSet() const;
    void unsetTyp();
    void setTyp(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getListing() const;
    bool listingIsSet() const;
    void unsetListing();
    void setListing(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getFront() const;
    bool frontIsSet() const;
    void unsetFront();
    void setFront(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpiry() const;
    bool expiryIsSet() const;
    void unsetExpiry();
    void setExpiry(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getSettle() const;
    bool settleIsSet() const;
    void unsetSettle();
    void setSettle(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRelistInterval() const;
    bool relistIntervalIsSet() const;
    void unsetRelistInterval();
    void setRelistInterval(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInverseLeg() const;
    bool inverseLegIsSet() const;
    void unsetInverseLeg();
    void setInverseLeg(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSellLeg() const;
    bool sellLegIsSet() const;
    void unsetSellLeg();
    void setSellLeg(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBuyLeg() const;
    bool buyLegIsSet() const;
    void unsetBuyLeg();
    void setBuyLeg(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getOptionStrikePcnt() const;
    bool optionStrikePcntIsSet() const;
    void unsetOptionStrikePcnt();
    void setOptionStrikePcnt(double value);
    /// <summary>
    /// 
    /// </summary>
    double getOptionStrikeRound() const;
    bool optionStrikeRoundIsSet() const;
    void unsetOptionStrikeRound();
    void setOptionStrikeRound(double value);
    /// <summary>
    /// 
    /// </summary>
    double getOptionStrikePrice() const;
    bool optionStrikePriceIsSet() const;
    void unsetOptionStrikePrice();
    void setOptionStrikePrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getOptionMultiplier() const;
    bool optionMultiplierIsSet() const;
    void unsetOptionMultiplier();
    void setOptionMultiplier(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPositionCurrency() const;
    bool positionCurrencyIsSet() const;
    void unsetPositionCurrency();
    void setPositionCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnderlying() const;
    bool underlyingIsSet() const;
    void unsetUnderlying();
    void setUnderlying(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getQuoteCurrency() const;
    bool quoteCurrencyIsSet() const;
    void unsetQuoteCurrency();
    void setQuoteCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnderlyingSymbol() const;
    bool underlyingSymbolIsSet() const;
    void unsetUnderlyingSymbol();
    void setUnderlyingSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReference() const;
    bool referenceIsSet() const;
    void unsetReference();
    void setReference(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReferenceSymbol() const;
    bool referenceSymbolIsSet() const;
    void unsetReferenceSymbol();
    void setReferenceSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCalcInterval() const;
    bool calcIntervalIsSet() const;
    void unsetCalcInterval();
    void setCalcInterval(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getPublishInterval() const;
    bool publishIntervalIsSet() const;
    void unsetPublishInterval();
    void setPublishInterval(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getPublishTime() const;
    bool publishTimeIsSet() const;
    void unsetPublishTime();
    void setPublishTime(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    double getMaxOrderQty() const;
    bool maxOrderQtyIsSet() const;
    void unsetMaxOrderQty();
    void setMaxOrderQty(double value);
    /// <summary>
    /// 
    /// </summary>
    double getMaxPrice() const;
    bool maxPriceIsSet() const;
    void unsetMaxPrice();
    void setMaxPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLotSize() const;
    bool lotSizeIsSet() const;
    void unsetLotSize();
    void setLotSize(double value);
    /// <summary>
    /// 
    /// </summary>
    double getTickSize() const;
    bool tickSizeIsSet() const;
    void unsetTickSize();
    void setTickSize(double value);
    /// <summary>
    /// 
    /// </summary>
    double getMultiplier() const;
    bool multiplierIsSet() const;
    void unsetMultiplier();
    void setMultiplier(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSettlCurrency() const;
    bool settlCurrencyIsSet() const;
    void unsetSettlCurrency();
    void setSettlCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getUnderlyingToPositionMultiplier() const;
    bool underlyingToPositionMultiplierIsSet() const;
    void unsetUnderlyingToPositionMultiplier();
    void setUnderlyingToPositionMultiplier(double value);
    /// <summary>
    /// 
    /// </summary>
    double getUnderlyingToSettleMultiplier() const;
    bool underlyingToSettleMultiplierIsSet() const;
    void unsetUnderlyingToSettleMultiplier();
    void setUnderlyingToSettleMultiplier(double value);
    /// <summary>
    /// 
    /// </summary>
    double getQuoteToSettleMultiplier() const;
    bool quoteToSettleMultiplierIsSet() const;
    void unsetQuoteToSettleMultiplier();
    void setQuoteToSettleMultiplier(double value);
    /// <summary>
    /// 
    /// </summary>
    bool isIsQuanto() const;
    bool isQuantoIsSet() const;
    void unsetIsQuanto();
    void setIsQuanto(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isIsInverse() const;
    bool isInverseIsSet() const;
    void unsetIsInverse();
    void setIsInverse(bool value);
    /// <summary>
    /// 
    /// </summary>
    double getInitMargin() const;
    bool initMarginIsSet() const;
    void unsetInitMargin();
    void setInitMargin(double value);
    /// <summary>
    /// 
    /// </summary>
    double getMaintMargin() const;
    bool maintMarginIsSet() const;
    void unsetMaintMargin();
    void setMaintMargin(double value);
    /// <summary>
    /// 
    /// </summary>
    double getRiskLimit() const;
    bool riskLimitIsSet() const;
    void unsetRiskLimit();
    void setRiskLimit(double value);
    /// <summary>
    /// 
    /// </summary>
    double getRiskStep() const;
    bool riskStepIsSet() const;
    void unsetRiskStep();
    void setRiskStep(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLimit() const;
    bool limitIsSet() const;
    void unsetLimit();
    void setLimit(double value);
    /// <summary>
    /// 
    /// </summary>
    bool isCapped() const;
    bool cappedIsSet() const;
    void unsetCapped();
    void setCapped(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isTaxed() const;
    bool taxedIsSet() const;
    void unsetTaxed();
    void setTaxed(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isDeleverage() const;
    bool deleverageIsSet() const;
    void unsetDeleverage();
    void setDeleverage(bool value);
    /// <summary>
    /// 
    /// </summary>
    double getMakerFee() const;
    bool makerFeeIsSet() const;
    void unsetMakerFee();
    void setMakerFee(double value);
    /// <summary>
    /// 
    /// </summary>
    double getTakerFee() const;
    bool takerFeeIsSet() const;
    void unsetTakerFee();
    void setTakerFee(double value);
    /// <summary>
    /// 
    /// </summary>
    double getSettlementFee() const;
    bool settlementFeeIsSet() const;
    void unsetSettlementFee();
    void setSettlementFee(double value);
    /// <summary>
    /// 
    /// </summary>
    double getInsuranceFee() const;
    bool insuranceFeeIsSet() const;
    void unsetInsuranceFee();
    void setInsuranceFee(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFundingBaseSymbol() const;
    bool fundingBaseSymbolIsSet() const;
    void unsetFundingBaseSymbol();
    void setFundingBaseSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFundingQuoteSymbol() const;
    bool fundingQuoteSymbolIsSet() const;
    void unsetFundingQuoteSymbol();
    void setFundingQuoteSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFundingPremiumSymbol() const;
    bool fundingPremiumSymbolIsSet() const;
    void unsetFundingPremiumSymbol();
    void setFundingPremiumSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getFundingTimestamp() const;
    bool fundingTimestampIsSet() const;
    void unsetFundingTimestamp();
    void setFundingTimestamp(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getFundingInterval() const;
    bool fundingIntervalIsSet() const;
    void unsetFundingInterval();
    void setFundingInterval(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    double getFundingRate() const;
    bool fundingRateIsSet() const;
    void unsetFundingRate();
    void setFundingRate(double value);
    /// <summary>
    /// 
    /// </summary>
    double getIndicativeFundingRate() const;
    bool indicativeFundingRateIsSet() const;
    void unsetIndicativeFundingRate();
    void setIndicativeFundingRate(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRebalanceTimestamp() const;
    bool rebalanceTimestampIsSet() const;
    void unsetRebalanceTimestamp();
    void setRebalanceTimestamp(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRebalanceInterval() const;
    bool rebalanceIntervalIsSet() const;
    void unsetRebalanceInterval();
    void setRebalanceInterval(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getOpeningTimestamp() const;
    bool openingTimestampIsSet() const;
    void unsetOpeningTimestamp();
    void setOpeningTimestamp(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getClosingTimestamp() const;
    bool closingTimestampIsSet() const;
    void unsetClosingTimestamp();
    void setClosingTimestamp(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getSessionInterval() const;
    bool sessionIntervalIsSet() const;
    void unsetSessionInterval();
    void setSessionInterval(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    double getPrevClosePrice() const;
    bool prevClosePriceIsSet() const;
    void unsetPrevClosePrice();
    void setPrevClosePrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLimitDownPrice() const;
    bool limitDownPriceIsSet() const;
    void unsetLimitDownPrice();
    void setLimitDownPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLimitUpPrice() const;
    bool limitUpPriceIsSet() const;
    void unsetLimitUpPrice();
    void setLimitUpPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getBankruptLimitDownPrice() const;
    bool bankruptLimitDownPriceIsSet() const;
    void unsetBankruptLimitDownPrice();
    void setBankruptLimitDownPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getBankruptLimitUpPrice() const;
    bool bankruptLimitUpPriceIsSet() const;
    void unsetBankruptLimitUpPrice();
    void setBankruptLimitUpPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getPrevTotalVolume() const;
    bool prevTotalVolumeIsSet() const;
    void unsetPrevTotalVolume();
    void setPrevTotalVolume(double value);
    /// <summary>
    /// 
    /// </summary>
    double getTotalVolume() const;
    bool totalVolumeIsSet() const;
    void unsetTotalVolume();
    void setTotalVolume(double value);
    /// <summary>
    /// 
    /// </summary>
    double getVolume() const;
    bool volumeIsSet() const;
    void unsetVolume();
    void setVolume(double value);
    /// <summary>
    /// 
    /// </summary>
    double getVolume24h() const;
    bool volume24hIsSet() const;
    void unsetVolume24h();
    void setVolume24h(double value);
    /// <summary>
    /// 
    /// </summary>
    double getPrevTotalTurnover() const;
    bool prevTotalTurnoverIsSet() const;
    void unsetPrevTotalTurnover();
    void setPrevTotalTurnover(double value);
    /// <summary>
    /// 
    /// </summary>
    double getTotalTurnover() const;
    bool totalTurnoverIsSet() const;
    void unsetTotalTurnover();
    void setTotalTurnover(double value);
    /// <summary>
    /// 
    /// </summary>
    double getTurnover() const;
    bool turnoverIsSet() const;
    void unsetTurnover();
    void setTurnover(double value);
    /// <summary>
    /// 
    /// </summary>
    double getTurnover24h() const;
    bool turnover24hIsSet() const;
    void unsetTurnover24h();
    void setTurnover24h(double value);
    /// <summary>
    /// 
    /// </summary>
    double getPrevPrice24h() const;
    bool prevPrice24hIsSet() const;
    void unsetPrevPrice24h();
    void setPrevPrice24h(double value);
    /// <summary>
    /// 
    /// </summary>
    double getVwap() const;
    bool vwapIsSet() const;
    void unsetVwap();
    void setVwap(double value);
    /// <summary>
    /// 
    /// </summary>
    double getHighPrice() const;
    bool highPriceIsSet() const;
    void unsetHighPrice();
    void setHighPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLowPrice() const;
    bool lowPriceIsSet() const;
    void unsetLowPrice();
    void setLowPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLastPrice() const;
    bool lastPriceIsSet() const;
    void unsetLastPrice();
    void setLastPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLastPriceProtected() const;
    bool lastPriceProtectedIsSet() const;
    void unsetLastPriceProtected();
    void setLastPriceProtected(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastTickDirection() const;
    bool lastTickDirectionIsSet() const;
    void unsetLastTickDirection();
    void setLastTickDirection(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getLastChangePcnt() const;
    bool lastChangePcntIsSet() const;
    void unsetLastChangePcnt();
    void setLastChangePcnt(double value);
    /// <summary>
    /// 
    /// </summary>
    double getBidPrice() const;
    bool bidPriceIsSet() const;
    void unsetBidPrice();
    void setBidPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getMidPrice() const;
    bool midPriceIsSet() const;
    void unsetMidPrice();
    void setMidPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getAskPrice() const;
    bool askPriceIsSet() const;
    void unsetAskPrice();
    void setAskPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getImpactBidPrice() const;
    bool impactBidPriceIsSet() const;
    void unsetImpactBidPrice();
    void setImpactBidPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getImpactMidPrice() const;
    bool impactMidPriceIsSet() const;
    void unsetImpactMidPrice();
    void setImpactMidPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getImpactAskPrice() const;
    bool impactAskPriceIsSet() const;
    void unsetImpactAskPrice();
    void setImpactAskPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    bool isHasLiquidity() const;
    bool hasLiquidityIsSet() const;
    void unsetHasLiquidity();
    void setHasLiquidity(bool value);
    /// <summary>
    /// 
    /// </summary>
    double getOpenInterest() const;
    bool openInterestIsSet() const;
    void unsetOpenInterest();
    void setOpenInterest(double value);
    /// <summary>
    /// 
    /// </summary>
    double getOpenValue() const;
    bool openValueIsSet() const;
    void unsetOpenValue();
    void setOpenValue(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFairMethod() const;
    bool fairMethodIsSet() const;
    void unsetFairMethod();
    void setFairMethod(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getFairBasisRate() const;
    bool fairBasisRateIsSet() const;
    void unsetFairBasisRate();
    void setFairBasisRate(double value);
    /// <summary>
    /// 
    /// </summary>
    double getFairBasis() const;
    bool fairBasisIsSet() const;
    void unsetFairBasis();
    void setFairBasis(double value);
    /// <summary>
    /// 
    /// </summary>
    double getFairPrice() const;
    bool fairPriceIsSet() const;
    void unsetFairPrice();
    void setFairPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMarkMethod() const;
    bool markMethodIsSet() const;
    void unsetMarkMethod();
    void setMarkMethod(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getMarkPrice() const;
    bool markPriceIsSet() const;
    void unsetMarkPrice();
    void setMarkPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getIndicativeTaxRate() const;
    bool indicativeTaxRateIsSet() const;
    void unsetIndicativeTaxRate();
    void setIndicativeTaxRate(double value);
    /// <summary>
    /// 
    /// </summary>
    double getIndicativeSettlePrice() const;
    bool indicativeSettlePriceIsSet() const;
    void unsetIndicativeSettlePrice();
    void setIndicativeSettlePrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getOptionUnderlyingPrice() const;
    bool optionUnderlyingPriceIsSet() const;
    void unsetOptionUnderlyingPrice();
    void setOptionUnderlyingPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getSettledPrice() const;
    bool settledPriceIsSet() const;
    void unsetSettledPrice();
    void setSettledPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(utility::datetime value);

protected:
    utility::string_t m_Symbol;
        utility::string_t m_RootSymbol;
    bool m_RootSymbolIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    utility::string_t m_Typ;
    bool m_TypIsSet;
    utility::datetime m_Listing;
    bool m_ListingIsSet;
    utility::datetime m_Front;
    bool m_FrontIsSet;
    utility::datetime m_Expiry;
    bool m_ExpiryIsSet;
    utility::datetime m_Settle;
    bool m_SettleIsSet;
    utility::datetime m_RelistInterval;
    bool m_RelistIntervalIsSet;
    utility::string_t m_InverseLeg;
    bool m_InverseLegIsSet;
    utility::string_t m_SellLeg;
    bool m_SellLegIsSet;
    utility::string_t m_BuyLeg;
    bool m_BuyLegIsSet;
    double m_OptionStrikePcnt;
    bool m_OptionStrikePcntIsSet;
    double m_OptionStrikeRound;
    bool m_OptionStrikeRoundIsSet;
    double m_OptionStrikePrice;
    bool m_OptionStrikePriceIsSet;
    double m_OptionMultiplier;
    bool m_OptionMultiplierIsSet;
    utility::string_t m_PositionCurrency;
    bool m_PositionCurrencyIsSet;
    utility::string_t m_Underlying;
    bool m_UnderlyingIsSet;
    utility::string_t m_QuoteCurrency;
    bool m_QuoteCurrencyIsSet;
    utility::string_t m_UnderlyingSymbol;
    bool m_UnderlyingSymbolIsSet;
    utility::string_t m_Reference;
    bool m_ReferenceIsSet;
    utility::string_t m_ReferenceSymbol;
    bool m_ReferenceSymbolIsSet;
    utility::datetime m_CalcInterval;
    bool m_CalcIntervalIsSet;
    utility::datetime m_PublishInterval;
    bool m_PublishIntervalIsSet;
    utility::datetime m_PublishTime;
    bool m_PublishTimeIsSet;
    double m_MaxOrderQty;
    bool m_MaxOrderQtyIsSet;
    double m_MaxPrice;
    bool m_MaxPriceIsSet;
    double m_LotSize;
    bool m_LotSizeIsSet;
    double m_TickSize;
    bool m_TickSizeIsSet;
    double m_Multiplier;
    bool m_MultiplierIsSet;
    utility::string_t m_SettlCurrency;
    bool m_SettlCurrencyIsSet;
    double m_UnderlyingToPositionMultiplier;
    bool m_UnderlyingToPositionMultiplierIsSet;
    double m_UnderlyingToSettleMultiplier;
    bool m_UnderlyingToSettleMultiplierIsSet;
    double m_QuoteToSettleMultiplier;
    bool m_QuoteToSettleMultiplierIsSet;
    bool m_IsQuanto;
    bool m_IsQuantoIsSet;
    bool m_IsInverse;
    bool m_IsInverseIsSet;
    double m_InitMargin;
    bool m_InitMarginIsSet;
    double m_MaintMargin;
    bool m_MaintMarginIsSet;
    double m_RiskLimit;
    bool m_RiskLimitIsSet;
    double m_RiskStep;
    bool m_RiskStepIsSet;
    double m_Limit;
    bool m_LimitIsSet;
    bool m_Capped;
    bool m_CappedIsSet;
    bool m_Taxed;
    bool m_TaxedIsSet;
    bool m_Deleverage;
    bool m_DeleverageIsSet;
    double m_MakerFee;
    bool m_MakerFeeIsSet;
    double m_TakerFee;
    bool m_TakerFeeIsSet;
    double m_SettlementFee;
    bool m_SettlementFeeIsSet;
    double m_InsuranceFee;
    bool m_InsuranceFeeIsSet;
    utility::string_t m_FundingBaseSymbol;
    bool m_FundingBaseSymbolIsSet;
    utility::string_t m_FundingQuoteSymbol;
    bool m_FundingQuoteSymbolIsSet;
    utility::string_t m_FundingPremiumSymbol;
    bool m_FundingPremiumSymbolIsSet;
    utility::datetime m_FundingTimestamp;
    bool m_FundingTimestampIsSet;
    utility::datetime m_FundingInterval;
    bool m_FundingIntervalIsSet;
    double m_FundingRate;
    bool m_FundingRateIsSet;
    double m_IndicativeFundingRate;
    bool m_IndicativeFundingRateIsSet;
    utility::datetime m_RebalanceTimestamp;
    bool m_RebalanceTimestampIsSet;
    utility::datetime m_RebalanceInterval;
    bool m_RebalanceIntervalIsSet;
    utility::datetime m_OpeningTimestamp;
    bool m_OpeningTimestampIsSet;
    utility::datetime m_ClosingTimestamp;
    bool m_ClosingTimestampIsSet;
    utility::datetime m_SessionInterval;
    bool m_SessionIntervalIsSet;
    double m_PrevClosePrice;
    bool m_PrevClosePriceIsSet;
    double m_LimitDownPrice;
    bool m_LimitDownPriceIsSet;
    double m_LimitUpPrice;
    bool m_LimitUpPriceIsSet;
    double m_BankruptLimitDownPrice;
    bool m_BankruptLimitDownPriceIsSet;
    double m_BankruptLimitUpPrice;
    bool m_BankruptLimitUpPriceIsSet;
    double m_PrevTotalVolume;
    bool m_PrevTotalVolumeIsSet;
    double m_TotalVolume;
    bool m_TotalVolumeIsSet;
    double m_Volume;
    bool m_VolumeIsSet;
    double m_Volume24h;
    bool m_Volume24hIsSet;
    double m_PrevTotalTurnover;
    bool m_PrevTotalTurnoverIsSet;
    double m_TotalTurnover;
    bool m_TotalTurnoverIsSet;
    double m_Turnover;
    bool m_TurnoverIsSet;
    double m_Turnover24h;
    bool m_Turnover24hIsSet;
    double m_PrevPrice24h;
    bool m_PrevPrice24hIsSet;
    double m_Vwap;
    bool m_VwapIsSet;
    double m_HighPrice;
    bool m_HighPriceIsSet;
    double m_LowPrice;
    bool m_LowPriceIsSet;
    double m_LastPrice;
    bool m_LastPriceIsSet;
    double m_LastPriceProtected;
    bool m_LastPriceProtectedIsSet;
    utility::string_t m_LastTickDirection;
    bool m_LastTickDirectionIsSet;
    double m_LastChangePcnt;
    bool m_LastChangePcntIsSet;
    double m_BidPrice;
    bool m_BidPriceIsSet;
    double m_MidPrice;
    bool m_MidPriceIsSet;
    double m_AskPrice;
    bool m_AskPriceIsSet;
    double m_ImpactBidPrice;
    bool m_ImpactBidPriceIsSet;
    double m_ImpactMidPrice;
    bool m_ImpactMidPriceIsSet;
    double m_ImpactAskPrice;
    bool m_ImpactAskPriceIsSet;
    bool m_HasLiquidity;
    bool m_HasLiquidityIsSet;
    double m_OpenInterest;
    bool m_OpenInterestIsSet;
    double m_OpenValue;
    bool m_OpenValueIsSet;
    utility::string_t m_FairMethod;
    bool m_FairMethodIsSet;
    double m_FairBasisRate;
    bool m_FairBasisRateIsSet;
    double m_FairBasis;
    bool m_FairBasisIsSet;
    double m_FairPrice;
    bool m_FairPriceIsSet;
    utility::string_t m_MarkMethod;
    bool m_MarkMethodIsSet;
    double m_MarkPrice;
    bool m_MarkPriceIsSet;
    double m_IndicativeTaxRate;
    bool m_IndicativeTaxRateIsSet;
    double m_IndicativeSettlePrice;
    bool m_IndicativeSettlePriceIsSet;
    double m_OptionUnderlyingPrice;
    bool m_OptionUnderlyingPriceIsSet;
    double m_SettledPrice;
    bool m_SettledPriceIsSet;
    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Instrument_H_ */
