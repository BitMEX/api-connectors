/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OrderBookL2.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OrderBookL2::OrderBookL2()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_Id = 0.0;
    m_Side = utility::conversions::to_string_t("");
    m_Size = 0.0;
    m_SizeIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
}

OrderBookL2::~OrderBookL2()
{
}

void OrderBookL2::validate()
{
    // TODO: implement validation
}

web::json::value OrderBookL2::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }

    return val;
}

void OrderBookL2::fromJson(web::json::value& val)
{
    setSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("symbol")]));
    setId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("id")]));
    setSide(ModelBase::stringFromJson(val[utility::conversions::to_string_t("side")]));
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        setSize(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("size")]));
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("price")]));
    }
}

void OrderBookL2::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    }
}

void OrderBookL2::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        setSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("size"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
}

utility::string_t OrderBookL2::getSymbol() const
{
    return m_Symbol;
}


void OrderBookL2::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    
}
double OrderBookL2::getId() const
{
    return m_Id;
}


void OrderBookL2::setId(double value)
{
    m_Id = value;
    
}
utility::string_t OrderBookL2::getSide() const
{
    return m_Side;
}


void OrderBookL2::setSide(utility::string_t value)
{
    m_Side = value;
    
}
double OrderBookL2::getSize() const
{
    return m_Size;
}


void OrderBookL2::setSize(double value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool OrderBookL2::sizeIsSet() const
{
    return m_SizeIsSet;
}

void OrderBookL2::unsetSize()
{
    m_SizeIsSet = false;
}

double OrderBookL2::getPrice() const
{
    return m_Price;
}


void OrderBookL2::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool OrderBookL2::priceIsSet() const
{
    return m_PriceIsSet;
}

void OrderBookL2::unsetPrice()
{
    m_PriceIsSet = false;
}

}
}
}
}

