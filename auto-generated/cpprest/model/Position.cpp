/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Position.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Position::Position()
{
    m_Account = 0.0;
    m_Symbol = utility::conversions::to_string_t("");
    m_Currency = utility::conversions::to_string_t("");
    m_Underlying = utility::conversions::to_string_t("");
    m_UnderlyingIsSet = false;
    m_QuoteCurrency = utility::conversions::to_string_t("");
    m_QuoteCurrencyIsSet = false;
    m_Commission = 0.0;
    m_CommissionIsSet = false;
    m_InitMarginReq = 0.0;
    m_InitMarginReqIsSet = false;
    m_MaintMarginReq = 0.0;
    m_MaintMarginReqIsSet = false;
    m_RiskLimit = 0.0;
    m_RiskLimitIsSet = false;
    m_Leverage = 0.0;
    m_LeverageIsSet = false;
    m_CrossMargin = false;
    m_CrossMarginIsSet = false;
    m_DeleveragePercentile = 0.0;
    m_DeleveragePercentileIsSet = false;
    m_RebalancedPnl = 0.0;
    m_RebalancedPnlIsSet = false;
    m_PrevRealisedPnl = 0.0;
    m_PrevRealisedPnlIsSet = false;
    m_PrevUnrealisedPnl = 0.0;
    m_PrevUnrealisedPnlIsSet = false;
    m_PrevClosePrice = 0.0;
    m_PrevClosePriceIsSet = false;
    m_OpeningTimestamp = utility::datetime();
    m_OpeningTimestampIsSet = false;
    m_OpeningQty = 0.0;
    m_OpeningQtyIsSet = false;
    m_OpeningCost = 0.0;
    m_OpeningCostIsSet = false;
    m_OpeningComm = 0.0;
    m_OpeningCommIsSet = false;
    m_OpenOrderBuyQty = 0.0;
    m_OpenOrderBuyQtyIsSet = false;
    m_OpenOrderBuyCost = 0.0;
    m_OpenOrderBuyCostIsSet = false;
    m_OpenOrderBuyPremium = 0.0;
    m_OpenOrderBuyPremiumIsSet = false;
    m_OpenOrderSellQty = 0.0;
    m_OpenOrderSellQtyIsSet = false;
    m_OpenOrderSellCost = 0.0;
    m_OpenOrderSellCostIsSet = false;
    m_OpenOrderSellPremium = 0.0;
    m_OpenOrderSellPremiumIsSet = false;
    m_ExecBuyQty = 0.0;
    m_ExecBuyQtyIsSet = false;
    m_ExecBuyCost = 0.0;
    m_ExecBuyCostIsSet = false;
    m_ExecSellQty = 0.0;
    m_ExecSellQtyIsSet = false;
    m_ExecSellCost = 0.0;
    m_ExecSellCostIsSet = false;
    m_ExecQty = 0.0;
    m_ExecQtyIsSet = false;
    m_ExecCost = 0.0;
    m_ExecCostIsSet = false;
    m_ExecComm = 0.0;
    m_ExecCommIsSet = false;
    m_CurrentTimestamp = utility::datetime();
    m_CurrentTimestampIsSet = false;
    m_CurrentQty = 0.0;
    m_CurrentQtyIsSet = false;
    m_CurrentCost = 0.0;
    m_CurrentCostIsSet = false;
    m_CurrentComm = 0.0;
    m_CurrentCommIsSet = false;
    m_RealisedCost = 0.0;
    m_RealisedCostIsSet = false;
    m_UnrealisedCost = 0.0;
    m_UnrealisedCostIsSet = false;
    m_GrossOpenCost = 0.0;
    m_GrossOpenCostIsSet = false;
    m_GrossOpenPremium = 0.0;
    m_GrossOpenPremiumIsSet = false;
    m_GrossExecCost = 0.0;
    m_GrossExecCostIsSet = false;
    m_IsOpen = false;
    m_IsOpenIsSet = false;
    m_MarkPrice = 0.0;
    m_MarkPriceIsSet = false;
    m_MarkValue = 0.0;
    m_MarkValueIsSet = false;
    m_RiskValue = 0.0;
    m_RiskValueIsSet = false;
    m_HomeNotional = 0.0;
    m_HomeNotionalIsSet = false;
    m_ForeignNotional = 0.0;
    m_ForeignNotionalIsSet = false;
    m_PosState = utility::conversions::to_string_t("");
    m_PosStateIsSet = false;
    m_PosCost = 0.0;
    m_PosCostIsSet = false;
    m_PosCost2 = 0.0;
    m_PosCost2IsSet = false;
    m_PosCross = 0.0;
    m_PosCrossIsSet = false;
    m_PosInit = 0.0;
    m_PosInitIsSet = false;
    m_PosComm = 0.0;
    m_PosCommIsSet = false;
    m_PosLoss = 0.0;
    m_PosLossIsSet = false;
    m_PosMargin = 0.0;
    m_PosMarginIsSet = false;
    m_PosMaint = 0.0;
    m_PosMaintIsSet = false;
    m_PosAllowance = 0.0;
    m_PosAllowanceIsSet = false;
    m_TaxableMargin = 0.0;
    m_TaxableMarginIsSet = false;
    m_InitMargin = 0.0;
    m_InitMarginIsSet = false;
    m_MaintMargin = 0.0;
    m_MaintMarginIsSet = false;
    m_SessionMargin = 0.0;
    m_SessionMarginIsSet = false;
    m_TargetExcessMargin = 0.0;
    m_TargetExcessMarginIsSet = false;
    m_VarMargin = 0.0;
    m_VarMarginIsSet = false;
    m_RealisedGrossPnl = 0.0;
    m_RealisedGrossPnlIsSet = false;
    m_RealisedTax = 0.0;
    m_RealisedTaxIsSet = false;
    m_RealisedPnl = 0.0;
    m_RealisedPnlIsSet = false;
    m_UnrealisedGrossPnl = 0.0;
    m_UnrealisedGrossPnlIsSet = false;
    m_LongBankrupt = 0.0;
    m_LongBankruptIsSet = false;
    m_ShortBankrupt = 0.0;
    m_ShortBankruptIsSet = false;
    m_TaxBase = 0.0;
    m_TaxBaseIsSet = false;
    m_IndicativeTaxRate = 0.0;
    m_IndicativeTaxRateIsSet = false;
    m_IndicativeTax = 0.0;
    m_IndicativeTaxIsSet = false;
    m_UnrealisedTax = 0.0;
    m_UnrealisedTaxIsSet = false;
    m_UnrealisedPnl = 0.0;
    m_UnrealisedPnlIsSet = false;
    m_UnrealisedPnlPcnt = 0.0;
    m_UnrealisedPnlPcntIsSet = false;
    m_UnrealisedRoePcnt = 0.0;
    m_UnrealisedRoePcntIsSet = false;
    m_SimpleQty = 0.0;
    m_SimpleQtyIsSet = false;
    m_SimpleCost = 0.0;
    m_SimpleCostIsSet = false;
    m_SimpleValue = 0.0;
    m_SimpleValueIsSet = false;
    m_SimplePnl = 0.0;
    m_SimplePnlIsSet = false;
    m_SimplePnlPcnt = 0.0;
    m_SimplePnlPcntIsSet = false;
    m_AvgCostPrice = 0.0;
    m_AvgCostPriceIsSet = false;
    m_AvgEntryPrice = 0.0;
    m_AvgEntryPriceIsSet = false;
    m_BreakEvenPrice = 0.0;
    m_BreakEvenPriceIsSet = false;
    m_MarginCallPrice = 0.0;
    m_MarginCallPriceIsSet = false;
    m_LiquidationPrice = 0.0;
    m_LiquidationPriceIsSet = false;
    m_BankruptPrice = 0.0;
    m_BankruptPriceIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_LastPrice = 0.0;
    m_LastPriceIsSet = false;
    m_LastValue = 0.0;
    m_LastValueIsSet = false;
}

Position::~Position()
{
}

void Position::validate()
{
    // TODO: implement validation
}

web::json::value Position::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    if(m_UnderlyingIsSet)
    {
        val[utility::conversions::to_string_t("underlying")] = ModelBase::toJson(m_Underlying);
    }
    if(m_QuoteCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("quoteCurrency")] = ModelBase::toJson(m_QuoteCurrency);
    }
    if(m_CommissionIsSet)
    {
        val[utility::conversions::to_string_t("commission")] = ModelBase::toJson(m_Commission);
    }
    if(m_InitMarginReqIsSet)
    {
        val[utility::conversions::to_string_t("initMarginReq")] = ModelBase::toJson(m_InitMarginReq);
    }
    if(m_MaintMarginReqIsSet)
    {
        val[utility::conversions::to_string_t("maintMarginReq")] = ModelBase::toJson(m_MaintMarginReq);
    }
    if(m_RiskLimitIsSet)
    {
        val[utility::conversions::to_string_t("riskLimit")] = ModelBase::toJson(m_RiskLimit);
    }
    if(m_LeverageIsSet)
    {
        val[utility::conversions::to_string_t("leverage")] = ModelBase::toJson(m_Leverage);
    }
    if(m_CrossMarginIsSet)
    {
        val[utility::conversions::to_string_t("crossMargin")] = ModelBase::toJson(m_CrossMargin);
    }
    if(m_DeleveragePercentileIsSet)
    {
        val[utility::conversions::to_string_t("deleveragePercentile")] = ModelBase::toJson(m_DeleveragePercentile);
    }
    if(m_RebalancedPnlIsSet)
    {
        val[utility::conversions::to_string_t("rebalancedPnl")] = ModelBase::toJson(m_RebalancedPnl);
    }
    if(m_PrevRealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("prevRealisedPnl")] = ModelBase::toJson(m_PrevRealisedPnl);
    }
    if(m_PrevUnrealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("prevUnrealisedPnl")] = ModelBase::toJson(m_PrevUnrealisedPnl);
    }
    if(m_PrevClosePriceIsSet)
    {
        val[utility::conversions::to_string_t("prevClosePrice")] = ModelBase::toJson(m_PrevClosePrice);
    }
    if(m_OpeningTimestampIsSet)
    {
        val[utility::conversions::to_string_t("openingTimestamp")] = ModelBase::toJson(m_OpeningTimestamp);
    }
    if(m_OpeningQtyIsSet)
    {
        val[utility::conversions::to_string_t("openingQty")] = ModelBase::toJson(m_OpeningQty);
    }
    if(m_OpeningCostIsSet)
    {
        val[utility::conversions::to_string_t("openingCost")] = ModelBase::toJson(m_OpeningCost);
    }
    if(m_OpeningCommIsSet)
    {
        val[utility::conversions::to_string_t("openingComm")] = ModelBase::toJson(m_OpeningComm);
    }
    if(m_OpenOrderBuyQtyIsSet)
    {
        val[utility::conversions::to_string_t("openOrderBuyQty")] = ModelBase::toJson(m_OpenOrderBuyQty);
    }
    if(m_OpenOrderBuyCostIsSet)
    {
        val[utility::conversions::to_string_t("openOrderBuyCost")] = ModelBase::toJson(m_OpenOrderBuyCost);
    }
    if(m_OpenOrderBuyPremiumIsSet)
    {
        val[utility::conversions::to_string_t("openOrderBuyPremium")] = ModelBase::toJson(m_OpenOrderBuyPremium);
    }
    if(m_OpenOrderSellQtyIsSet)
    {
        val[utility::conversions::to_string_t("openOrderSellQty")] = ModelBase::toJson(m_OpenOrderSellQty);
    }
    if(m_OpenOrderSellCostIsSet)
    {
        val[utility::conversions::to_string_t("openOrderSellCost")] = ModelBase::toJson(m_OpenOrderSellCost);
    }
    if(m_OpenOrderSellPremiumIsSet)
    {
        val[utility::conversions::to_string_t("openOrderSellPremium")] = ModelBase::toJson(m_OpenOrderSellPremium);
    }
    if(m_ExecBuyQtyIsSet)
    {
        val[utility::conversions::to_string_t("execBuyQty")] = ModelBase::toJson(m_ExecBuyQty);
    }
    if(m_ExecBuyCostIsSet)
    {
        val[utility::conversions::to_string_t("execBuyCost")] = ModelBase::toJson(m_ExecBuyCost);
    }
    if(m_ExecSellQtyIsSet)
    {
        val[utility::conversions::to_string_t("execSellQty")] = ModelBase::toJson(m_ExecSellQty);
    }
    if(m_ExecSellCostIsSet)
    {
        val[utility::conversions::to_string_t("execSellCost")] = ModelBase::toJson(m_ExecSellCost);
    }
    if(m_ExecQtyIsSet)
    {
        val[utility::conversions::to_string_t("execQty")] = ModelBase::toJson(m_ExecQty);
    }
    if(m_ExecCostIsSet)
    {
        val[utility::conversions::to_string_t("execCost")] = ModelBase::toJson(m_ExecCost);
    }
    if(m_ExecCommIsSet)
    {
        val[utility::conversions::to_string_t("execComm")] = ModelBase::toJson(m_ExecComm);
    }
    if(m_CurrentTimestampIsSet)
    {
        val[utility::conversions::to_string_t("currentTimestamp")] = ModelBase::toJson(m_CurrentTimestamp);
    }
    if(m_CurrentQtyIsSet)
    {
        val[utility::conversions::to_string_t("currentQty")] = ModelBase::toJson(m_CurrentQty);
    }
    if(m_CurrentCostIsSet)
    {
        val[utility::conversions::to_string_t("currentCost")] = ModelBase::toJson(m_CurrentCost);
    }
    if(m_CurrentCommIsSet)
    {
        val[utility::conversions::to_string_t("currentComm")] = ModelBase::toJson(m_CurrentComm);
    }
    if(m_RealisedCostIsSet)
    {
        val[utility::conversions::to_string_t("realisedCost")] = ModelBase::toJson(m_RealisedCost);
    }
    if(m_UnrealisedCostIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedCost")] = ModelBase::toJson(m_UnrealisedCost);
    }
    if(m_GrossOpenCostIsSet)
    {
        val[utility::conversions::to_string_t("grossOpenCost")] = ModelBase::toJson(m_GrossOpenCost);
    }
    if(m_GrossOpenPremiumIsSet)
    {
        val[utility::conversions::to_string_t("grossOpenPremium")] = ModelBase::toJson(m_GrossOpenPremium);
    }
    if(m_GrossExecCostIsSet)
    {
        val[utility::conversions::to_string_t("grossExecCost")] = ModelBase::toJson(m_GrossExecCost);
    }
    if(m_IsOpenIsSet)
    {
        val[utility::conversions::to_string_t("isOpen")] = ModelBase::toJson(m_IsOpen);
    }
    if(m_MarkPriceIsSet)
    {
        val[utility::conversions::to_string_t("markPrice")] = ModelBase::toJson(m_MarkPrice);
    }
    if(m_MarkValueIsSet)
    {
        val[utility::conversions::to_string_t("markValue")] = ModelBase::toJson(m_MarkValue);
    }
    if(m_RiskValueIsSet)
    {
        val[utility::conversions::to_string_t("riskValue")] = ModelBase::toJson(m_RiskValue);
    }
    if(m_HomeNotionalIsSet)
    {
        val[utility::conversions::to_string_t("homeNotional")] = ModelBase::toJson(m_HomeNotional);
    }
    if(m_ForeignNotionalIsSet)
    {
        val[utility::conversions::to_string_t("foreignNotional")] = ModelBase::toJson(m_ForeignNotional);
    }
    if(m_PosStateIsSet)
    {
        val[utility::conversions::to_string_t("posState")] = ModelBase::toJson(m_PosState);
    }
    if(m_PosCostIsSet)
    {
        val[utility::conversions::to_string_t("posCost")] = ModelBase::toJson(m_PosCost);
    }
    if(m_PosCost2IsSet)
    {
        val[utility::conversions::to_string_t("posCost2")] = ModelBase::toJson(m_PosCost2);
    }
    if(m_PosCrossIsSet)
    {
        val[utility::conversions::to_string_t("posCross")] = ModelBase::toJson(m_PosCross);
    }
    if(m_PosInitIsSet)
    {
        val[utility::conversions::to_string_t("posInit")] = ModelBase::toJson(m_PosInit);
    }
    if(m_PosCommIsSet)
    {
        val[utility::conversions::to_string_t("posComm")] = ModelBase::toJson(m_PosComm);
    }
    if(m_PosLossIsSet)
    {
        val[utility::conversions::to_string_t("posLoss")] = ModelBase::toJson(m_PosLoss);
    }
    if(m_PosMarginIsSet)
    {
        val[utility::conversions::to_string_t("posMargin")] = ModelBase::toJson(m_PosMargin);
    }
    if(m_PosMaintIsSet)
    {
        val[utility::conversions::to_string_t("posMaint")] = ModelBase::toJson(m_PosMaint);
    }
    if(m_PosAllowanceIsSet)
    {
        val[utility::conversions::to_string_t("posAllowance")] = ModelBase::toJson(m_PosAllowance);
    }
    if(m_TaxableMarginIsSet)
    {
        val[utility::conversions::to_string_t("taxableMargin")] = ModelBase::toJson(m_TaxableMargin);
    }
    if(m_InitMarginIsSet)
    {
        val[utility::conversions::to_string_t("initMargin")] = ModelBase::toJson(m_InitMargin);
    }
    if(m_MaintMarginIsSet)
    {
        val[utility::conversions::to_string_t("maintMargin")] = ModelBase::toJson(m_MaintMargin);
    }
    if(m_SessionMarginIsSet)
    {
        val[utility::conversions::to_string_t("sessionMargin")] = ModelBase::toJson(m_SessionMargin);
    }
    if(m_TargetExcessMarginIsSet)
    {
        val[utility::conversions::to_string_t("targetExcessMargin")] = ModelBase::toJson(m_TargetExcessMargin);
    }
    if(m_VarMarginIsSet)
    {
        val[utility::conversions::to_string_t("varMargin")] = ModelBase::toJson(m_VarMargin);
    }
    if(m_RealisedGrossPnlIsSet)
    {
        val[utility::conversions::to_string_t("realisedGrossPnl")] = ModelBase::toJson(m_RealisedGrossPnl);
    }
    if(m_RealisedTaxIsSet)
    {
        val[utility::conversions::to_string_t("realisedTax")] = ModelBase::toJson(m_RealisedTax);
    }
    if(m_RealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("realisedPnl")] = ModelBase::toJson(m_RealisedPnl);
    }
    if(m_UnrealisedGrossPnlIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedGrossPnl")] = ModelBase::toJson(m_UnrealisedGrossPnl);
    }
    if(m_LongBankruptIsSet)
    {
        val[utility::conversions::to_string_t("longBankrupt")] = ModelBase::toJson(m_LongBankrupt);
    }
    if(m_ShortBankruptIsSet)
    {
        val[utility::conversions::to_string_t("shortBankrupt")] = ModelBase::toJson(m_ShortBankrupt);
    }
    if(m_TaxBaseIsSet)
    {
        val[utility::conversions::to_string_t("taxBase")] = ModelBase::toJson(m_TaxBase);
    }
    if(m_IndicativeTaxRateIsSet)
    {
        val[utility::conversions::to_string_t("indicativeTaxRate")] = ModelBase::toJson(m_IndicativeTaxRate);
    }
    if(m_IndicativeTaxIsSet)
    {
        val[utility::conversions::to_string_t("indicativeTax")] = ModelBase::toJson(m_IndicativeTax);
    }
    if(m_UnrealisedTaxIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedTax")] = ModelBase::toJson(m_UnrealisedTax);
    }
    if(m_UnrealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedPnl")] = ModelBase::toJson(m_UnrealisedPnl);
    }
    if(m_UnrealisedPnlPcntIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedPnlPcnt")] = ModelBase::toJson(m_UnrealisedPnlPcnt);
    }
    if(m_UnrealisedRoePcntIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedRoePcnt")] = ModelBase::toJson(m_UnrealisedRoePcnt);
    }
    if(m_SimpleQtyIsSet)
    {
        val[utility::conversions::to_string_t("simpleQty")] = ModelBase::toJson(m_SimpleQty);
    }
    if(m_SimpleCostIsSet)
    {
        val[utility::conversions::to_string_t("simpleCost")] = ModelBase::toJson(m_SimpleCost);
    }
    if(m_SimpleValueIsSet)
    {
        val[utility::conversions::to_string_t("simpleValue")] = ModelBase::toJson(m_SimpleValue);
    }
    if(m_SimplePnlIsSet)
    {
        val[utility::conversions::to_string_t("simplePnl")] = ModelBase::toJson(m_SimplePnl);
    }
    if(m_SimplePnlPcntIsSet)
    {
        val[utility::conversions::to_string_t("simplePnlPcnt")] = ModelBase::toJson(m_SimplePnlPcnt);
    }
    if(m_AvgCostPriceIsSet)
    {
        val[utility::conversions::to_string_t("avgCostPrice")] = ModelBase::toJson(m_AvgCostPrice);
    }
    if(m_AvgEntryPriceIsSet)
    {
        val[utility::conversions::to_string_t("avgEntryPrice")] = ModelBase::toJson(m_AvgEntryPrice);
    }
    if(m_BreakEvenPriceIsSet)
    {
        val[utility::conversions::to_string_t("breakEvenPrice")] = ModelBase::toJson(m_BreakEvenPrice);
    }
    if(m_MarginCallPriceIsSet)
    {
        val[utility::conversions::to_string_t("marginCallPrice")] = ModelBase::toJson(m_MarginCallPrice);
    }
    if(m_LiquidationPriceIsSet)
    {
        val[utility::conversions::to_string_t("liquidationPrice")] = ModelBase::toJson(m_LiquidationPrice);
    }
    if(m_BankruptPriceIsSet)
    {
        val[utility::conversions::to_string_t("bankruptPrice")] = ModelBase::toJson(m_BankruptPrice);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_LastPriceIsSet)
    {
        val[utility::conversions::to_string_t("lastPrice")] = ModelBase::toJson(m_LastPrice);
    }
    if(m_LastValueIsSet)
    {
        val[utility::conversions::to_string_t("lastValue")] = ModelBase::toJson(m_LastValue);
    }

    return val;
}

void Position::fromJson(web::json::value& val)
{
    setAccount(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("account")]));
    setSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("symbol")]));
    setCurrency(ModelBase::stringFromJson(val[utility::conversions::to_string_t("currency")]));
    if(val.has_field(utility::conversions::to_string_t("underlying")))
    {
        setUnderlying(ModelBase::stringFromJson(val[utility::conversions::to_string_t("underlying")]));
    }
    if(val.has_field(utility::conversions::to_string_t("quoteCurrency")))
    {
        setQuoteCurrency(ModelBase::stringFromJson(val[utility::conversions::to_string_t("quoteCurrency")]));
    }
    if(val.has_field(utility::conversions::to_string_t("commission")))
    {
        setCommission(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("commission")]));
    }
    if(val.has_field(utility::conversions::to_string_t("initMarginReq")))
    {
        setInitMarginReq(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("initMarginReq")]));
    }
    if(val.has_field(utility::conversions::to_string_t("maintMarginReq")))
    {
        setMaintMarginReq(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("maintMarginReq")]));
    }
    if(val.has_field(utility::conversions::to_string_t("riskLimit")))
    {
        setRiskLimit(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("riskLimit")]));
    }
    if(val.has_field(utility::conversions::to_string_t("leverage")))
    {
        setLeverage(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("leverage")]));
    }
    if(val.has_field(utility::conversions::to_string_t("crossMargin")))
    {
        setCrossMargin(ModelBase::boolFromJson(val[utility::conversions::to_string_t("crossMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("deleveragePercentile")))
    {
        setDeleveragePercentile(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("deleveragePercentile")]));
    }
    if(val.has_field(utility::conversions::to_string_t("rebalancedPnl")))
    {
        setRebalancedPnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("rebalancedPnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("prevRealisedPnl")))
    {
        setPrevRealisedPnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("prevRealisedPnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("prevUnrealisedPnl")))
    {
        setPrevUnrealisedPnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("prevUnrealisedPnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("prevClosePrice")))
    {
        setPrevClosePrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("prevClosePrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openingTimestamp")))
    {
        setOpeningTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("openingTimestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openingQty")))
    {
        setOpeningQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openingQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openingCost")))
    {
        setOpeningCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openingCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openingComm")))
    {
        setOpeningComm(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openingComm")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderBuyQty")))
    {
        setOpenOrderBuyQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openOrderBuyQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderBuyCost")))
    {
        setOpenOrderBuyCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openOrderBuyCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderBuyPremium")))
    {
        setOpenOrderBuyPremium(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openOrderBuyPremium")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderSellQty")))
    {
        setOpenOrderSellQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openOrderSellQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderSellCost")))
    {
        setOpenOrderSellCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openOrderSellCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderSellPremium")))
    {
        setOpenOrderSellPremium(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("openOrderSellPremium")]));
    }
    if(val.has_field(utility::conversions::to_string_t("execBuyQty")))
    {
        setExecBuyQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("execBuyQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("execBuyCost")))
    {
        setExecBuyCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("execBuyCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("execSellQty")))
    {
        setExecSellQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("execSellQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("execSellCost")))
    {
        setExecSellCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("execSellCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("execQty")))
    {
        setExecQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("execQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("execCost")))
    {
        setExecCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("execCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("execComm")))
    {
        setExecComm(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("execComm")]));
    }
    if(val.has_field(utility::conversions::to_string_t("currentTimestamp")))
    {
        setCurrentTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("currentTimestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("currentQty")))
    {
        setCurrentQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("currentQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("currentCost")))
    {
        setCurrentCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("currentCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("currentComm")))
    {
        setCurrentComm(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("currentComm")]));
    }
    if(val.has_field(utility::conversions::to_string_t("realisedCost")))
    {
        setRealisedCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("realisedCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedCost")))
    {
        setUnrealisedCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("unrealisedCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("grossOpenCost")))
    {
        setGrossOpenCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("grossOpenCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("grossOpenPremium")))
    {
        setGrossOpenPremium(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("grossOpenPremium")]));
    }
    if(val.has_field(utility::conversions::to_string_t("grossExecCost")))
    {
        setGrossExecCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("grossExecCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("isOpen")))
    {
        setIsOpen(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isOpen")]));
    }
    if(val.has_field(utility::conversions::to_string_t("markPrice")))
    {
        setMarkPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("markPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("markValue")))
    {
        setMarkValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("markValue")]));
    }
    if(val.has_field(utility::conversions::to_string_t("riskValue")))
    {
        setRiskValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("riskValue")]));
    }
    if(val.has_field(utility::conversions::to_string_t("homeNotional")))
    {
        setHomeNotional(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("homeNotional")]));
    }
    if(val.has_field(utility::conversions::to_string_t("foreignNotional")))
    {
        setForeignNotional(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("foreignNotional")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posState")))
    {
        setPosState(ModelBase::stringFromJson(val[utility::conversions::to_string_t("posState")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posCost")))
    {
        setPosCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posCost2")))
    {
        setPosCost2(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posCost2")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posCross")))
    {
        setPosCross(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posCross")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posInit")))
    {
        setPosInit(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posInit")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posComm")))
    {
        setPosComm(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posComm")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posLoss")))
    {
        setPosLoss(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posLoss")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posMargin")))
    {
        setPosMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posMaint")))
    {
        setPosMaint(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posMaint")]));
    }
    if(val.has_field(utility::conversions::to_string_t("posAllowance")))
    {
        setPosAllowance(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("posAllowance")]));
    }
    if(val.has_field(utility::conversions::to_string_t("taxableMargin")))
    {
        setTaxableMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("taxableMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("initMargin")))
    {
        setInitMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("initMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("maintMargin")))
    {
        setMaintMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("maintMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("sessionMargin")))
    {
        setSessionMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("sessionMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("targetExcessMargin")))
    {
        setTargetExcessMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("targetExcessMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("varMargin")))
    {
        setVarMargin(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("varMargin")]));
    }
    if(val.has_field(utility::conversions::to_string_t("realisedGrossPnl")))
    {
        setRealisedGrossPnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("realisedGrossPnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("realisedTax")))
    {
        setRealisedTax(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("realisedTax")]));
    }
    if(val.has_field(utility::conversions::to_string_t("realisedPnl")))
    {
        setRealisedPnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("realisedPnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedGrossPnl")))
    {
        setUnrealisedGrossPnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("unrealisedGrossPnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("longBankrupt")))
    {
        setLongBankrupt(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("longBankrupt")]));
    }
    if(val.has_field(utility::conversions::to_string_t("shortBankrupt")))
    {
        setShortBankrupt(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("shortBankrupt")]));
    }
    if(val.has_field(utility::conversions::to_string_t("taxBase")))
    {
        setTaxBase(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("taxBase")]));
    }
    if(val.has_field(utility::conversions::to_string_t("indicativeTaxRate")))
    {
        setIndicativeTaxRate(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("indicativeTaxRate")]));
    }
    if(val.has_field(utility::conversions::to_string_t("indicativeTax")))
    {
        setIndicativeTax(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("indicativeTax")]));
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedTax")))
    {
        setUnrealisedTax(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("unrealisedTax")]));
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedPnl")))
    {
        setUnrealisedPnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("unrealisedPnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedPnlPcnt")))
    {
        setUnrealisedPnlPcnt(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("unrealisedPnlPcnt")]));
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedRoePcnt")))
    {
        setUnrealisedRoePcnt(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("unrealisedRoePcnt")]));
    }
    if(val.has_field(utility::conversions::to_string_t("simpleQty")))
    {
        setSimpleQty(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("simpleQty")]));
    }
    if(val.has_field(utility::conversions::to_string_t("simpleCost")))
    {
        setSimpleCost(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("simpleCost")]));
    }
    if(val.has_field(utility::conversions::to_string_t("simpleValue")))
    {
        setSimpleValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("simpleValue")]));
    }
    if(val.has_field(utility::conversions::to_string_t("simplePnl")))
    {
        setSimplePnl(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("simplePnl")]));
    }
    if(val.has_field(utility::conversions::to_string_t("simplePnlPcnt")))
    {
        setSimplePnlPcnt(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("simplePnlPcnt")]));
    }
    if(val.has_field(utility::conversions::to_string_t("avgCostPrice")))
    {
        setAvgCostPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("avgCostPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("avgEntryPrice")))
    {
        setAvgEntryPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("avgEntryPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("breakEvenPrice")))
    {
        setBreakEvenPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("breakEvenPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("marginCallPrice")))
    {
        setMarginCallPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("marginCallPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("liquidationPrice")))
    {
        setLiquidationPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("liquidationPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("bankruptPrice")))
    {
        setBankruptPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("bankruptPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::dateFromJson(val[utility::conversions::to_string_t("timestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastPrice")))
    {
        setLastPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("lastPrice")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastValue")))
    {
        setLastValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("lastValue")]));
    }
}

void Position::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
    if(m_UnderlyingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("underlying"), m_Underlying));
        
    }
    if(m_QuoteCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quoteCurrency"), m_QuoteCurrency));
        
    }
    if(m_CommissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("commission"), m_Commission));
    }
    if(m_InitMarginReqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initMarginReq"), m_InitMarginReq));
    }
    if(m_MaintMarginReqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maintMarginReq"), m_MaintMarginReq));
    }
    if(m_RiskLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("riskLimit"), m_RiskLimit));
    }
    if(m_LeverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leverage"), m_Leverage));
    }
    if(m_CrossMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("crossMargin"), m_CrossMargin));
    }
    if(m_DeleveragePercentileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deleveragePercentile"), m_DeleveragePercentile));
    }
    if(m_RebalancedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rebalancedPnl"), m_RebalancedPnl));
    }
    if(m_PrevRealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevRealisedPnl"), m_PrevRealisedPnl));
    }
    if(m_PrevUnrealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevUnrealisedPnl"), m_PrevUnrealisedPnl));
    }
    if(m_PrevClosePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevClosePrice"), m_PrevClosePrice));
    }
    if(m_OpeningTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openingTimestamp"), m_OpeningTimestamp));
        
    }
    if(m_OpeningQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openingQty"), m_OpeningQty));
    }
    if(m_OpeningCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openingCost"), m_OpeningCost));
    }
    if(m_OpeningCommIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openingComm"), m_OpeningComm));
    }
    if(m_OpenOrderBuyQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderBuyQty"), m_OpenOrderBuyQty));
    }
    if(m_OpenOrderBuyCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderBuyCost"), m_OpenOrderBuyCost));
    }
    if(m_OpenOrderBuyPremiumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderBuyPremium"), m_OpenOrderBuyPremium));
    }
    if(m_OpenOrderSellQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderSellQty"), m_OpenOrderSellQty));
    }
    if(m_OpenOrderSellCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderSellCost"), m_OpenOrderSellCost));
    }
    if(m_OpenOrderSellPremiumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderSellPremium"), m_OpenOrderSellPremium));
    }
    if(m_ExecBuyQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execBuyQty"), m_ExecBuyQty));
    }
    if(m_ExecBuyCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execBuyCost"), m_ExecBuyCost));
    }
    if(m_ExecSellQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execSellQty"), m_ExecSellQty));
    }
    if(m_ExecSellCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execSellCost"), m_ExecSellCost));
    }
    if(m_ExecQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execQty"), m_ExecQty));
    }
    if(m_ExecCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execCost"), m_ExecCost));
    }
    if(m_ExecCommIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execComm"), m_ExecComm));
    }
    if(m_CurrentTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentTimestamp"), m_CurrentTimestamp));
        
    }
    if(m_CurrentQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentQty"), m_CurrentQty));
    }
    if(m_CurrentCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentCost"), m_CurrentCost));
    }
    if(m_CurrentCommIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentComm"), m_CurrentComm));
    }
    if(m_RealisedCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realisedCost"), m_RealisedCost));
    }
    if(m_UnrealisedCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedCost"), m_UnrealisedCost));
    }
    if(m_GrossOpenCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("grossOpenCost"), m_GrossOpenCost));
    }
    if(m_GrossOpenPremiumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("grossOpenPremium"), m_GrossOpenPremium));
    }
    if(m_GrossExecCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("grossExecCost"), m_GrossExecCost));
    }
    if(m_IsOpenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isOpen"), m_IsOpen));
    }
    if(m_MarkPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("markPrice"), m_MarkPrice));
    }
    if(m_MarkValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("markValue"), m_MarkValue));
    }
    if(m_RiskValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("riskValue"), m_RiskValue));
    }
    if(m_HomeNotionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("homeNotional"), m_HomeNotional));
    }
    if(m_ForeignNotionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foreignNotional"), m_ForeignNotional));
    }
    if(m_PosStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posState"), m_PosState));
        
    }
    if(m_PosCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posCost"), m_PosCost));
    }
    if(m_PosCost2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posCost2"), m_PosCost2));
    }
    if(m_PosCrossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posCross"), m_PosCross));
    }
    if(m_PosInitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posInit"), m_PosInit));
    }
    if(m_PosCommIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posComm"), m_PosComm));
    }
    if(m_PosLossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posLoss"), m_PosLoss));
    }
    if(m_PosMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posMargin"), m_PosMargin));
    }
    if(m_PosMaintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posMaint"), m_PosMaint));
    }
    if(m_PosAllowanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posAllowance"), m_PosAllowance));
    }
    if(m_TaxableMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("taxableMargin"), m_TaxableMargin));
    }
    if(m_InitMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initMargin"), m_InitMargin));
    }
    if(m_MaintMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maintMargin"), m_MaintMargin));
    }
    if(m_SessionMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sessionMargin"), m_SessionMargin));
    }
    if(m_TargetExcessMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetExcessMargin"), m_TargetExcessMargin));
    }
    if(m_VarMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("varMargin"), m_VarMargin));
    }
    if(m_RealisedGrossPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realisedGrossPnl"), m_RealisedGrossPnl));
    }
    if(m_RealisedTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realisedTax"), m_RealisedTax));
    }
    if(m_RealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realisedPnl"), m_RealisedPnl));
    }
    if(m_UnrealisedGrossPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedGrossPnl"), m_UnrealisedGrossPnl));
    }
    if(m_LongBankruptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longBankrupt"), m_LongBankrupt));
    }
    if(m_ShortBankruptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortBankrupt"), m_ShortBankrupt));
    }
    if(m_TaxBaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("taxBase"), m_TaxBase));
    }
    if(m_IndicativeTaxRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indicativeTaxRate"), m_IndicativeTaxRate));
    }
    if(m_IndicativeTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indicativeTax"), m_IndicativeTax));
    }
    if(m_UnrealisedTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedTax"), m_UnrealisedTax));
    }
    if(m_UnrealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedPnl"), m_UnrealisedPnl));
    }
    if(m_UnrealisedPnlPcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedPnlPcnt"), m_UnrealisedPnlPcnt));
    }
    if(m_UnrealisedRoePcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedRoePcnt"), m_UnrealisedRoePcnt));
    }
    if(m_SimpleQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("simpleQty"), m_SimpleQty));
    }
    if(m_SimpleCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("simpleCost"), m_SimpleCost));
    }
    if(m_SimpleValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("simpleValue"), m_SimpleValue));
    }
    if(m_SimplePnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("simplePnl"), m_SimplePnl));
    }
    if(m_SimplePnlPcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("simplePnlPcnt"), m_SimplePnlPcnt));
    }
    if(m_AvgCostPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avgCostPrice"), m_AvgCostPrice));
    }
    if(m_AvgEntryPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avgEntryPrice"), m_AvgEntryPrice));
    }
    if(m_BreakEvenPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("breakEvenPrice"), m_BreakEvenPrice));
    }
    if(m_MarginCallPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("marginCallPrice"), m_MarginCallPrice));
    }
    if(m_LiquidationPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("liquidationPrice"), m_LiquidationPrice));
    }
    if(m_BankruptPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bankruptPrice"), m_BankruptPrice));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
        
    }
    if(m_LastPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastPrice"), m_LastPrice));
    }
    if(m_LastValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastValue"), m_LastValue));
    }
}

void Position::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAccount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    if(multipart->hasContent(utility::conversions::to_string_t("underlying")))
    {
        setUnderlying(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("underlying"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quoteCurrency")))
    {
        setQuoteCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quoteCurrency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("commission")))
    {
        setCommission(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("commission"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initMarginReq")))
    {
        setInitMarginReq(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initMarginReq"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maintMarginReq")))
    {
        setMaintMarginReq(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maintMarginReq"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("riskLimit")))
    {
        setRiskLimit(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("riskLimit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leverage")))
    {
        setLeverage(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leverage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("crossMargin")))
    {
        setCrossMargin(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("crossMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deleveragePercentile")))
    {
        setDeleveragePercentile(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deleveragePercentile"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rebalancedPnl")))
    {
        setRebalancedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rebalancedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevRealisedPnl")))
    {
        setPrevRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevRealisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevUnrealisedPnl")))
    {
        setPrevUnrealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevUnrealisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevClosePrice")))
    {
        setPrevClosePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevClosePrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openingTimestamp")))
    {
        setOpeningTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openingTimestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openingQty")))
    {
        setOpeningQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openingQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openingCost")))
    {
        setOpeningCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openingCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openingComm")))
    {
        setOpeningComm(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openingComm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderBuyQty")))
    {
        setOpenOrderBuyQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderBuyQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderBuyCost")))
    {
        setOpenOrderBuyCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderBuyCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderBuyPremium")))
    {
        setOpenOrderBuyPremium(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderBuyPremium"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderSellQty")))
    {
        setOpenOrderSellQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderSellQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderSellCost")))
    {
        setOpenOrderSellCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderSellCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderSellPremium")))
    {
        setOpenOrderSellPremium(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderSellPremium"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execBuyQty")))
    {
        setExecBuyQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("execBuyQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execBuyCost")))
    {
        setExecBuyCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("execBuyCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execSellQty")))
    {
        setExecSellQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("execSellQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execSellCost")))
    {
        setExecSellCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("execSellCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execQty")))
    {
        setExecQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("execQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execCost")))
    {
        setExecCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("execCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execComm")))
    {
        setExecComm(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("execComm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentTimestamp")))
    {
        setCurrentTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentTimestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentQty")))
    {
        setCurrentQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentCost")))
    {
        setCurrentCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentComm")))
    {
        setCurrentComm(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentComm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realisedCost")))
    {
        setRealisedCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realisedCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedCost")))
    {
        setUnrealisedCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("grossOpenCost")))
    {
        setGrossOpenCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("grossOpenCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("grossOpenPremium")))
    {
        setGrossOpenPremium(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("grossOpenPremium"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("grossExecCost")))
    {
        setGrossExecCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("grossExecCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isOpen")))
    {
        setIsOpen(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isOpen"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("markPrice")))
    {
        setMarkPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("markPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("markValue")))
    {
        setMarkValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("markValue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("riskValue")))
    {
        setRiskValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("riskValue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("homeNotional")))
    {
        setHomeNotional(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("homeNotional"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foreignNotional")))
    {
        setForeignNotional(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("foreignNotional"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posState")))
    {
        setPosState(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posState"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posCost")))
    {
        setPosCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posCost2")))
    {
        setPosCost2(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posCost2"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posCross")))
    {
        setPosCross(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posCross"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posInit")))
    {
        setPosInit(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posInit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posComm")))
    {
        setPosComm(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posComm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posLoss")))
    {
        setPosLoss(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posLoss"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posMargin")))
    {
        setPosMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posMaint")))
    {
        setPosMaint(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posMaint"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posAllowance")))
    {
        setPosAllowance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posAllowance"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("taxableMargin")))
    {
        setTaxableMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("taxableMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initMargin")))
    {
        setInitMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maintMargin")))
    {
        setMaintMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maintMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sessionMargin")))
    {
        setSessionMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sessionMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetExcessMargin")))
    {
        setTargetExcessMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetExcessMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("varMargin")))
    {
        setVarMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("varMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realisedGrossPnl")))
    {
        setRealisedGrossPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realisedGrossPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realisedTax")))
    {
        setRealisedTax(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realisedTax"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realisedPnl")))
    {
        setRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedGrossPnl")))
    {
        setUnrealisedGrossPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedGrossPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longBankrupt")))
    {
        setLongBankrupt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longBankrupt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortBankrupt")))
    {
        setShortBankrupt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortBankrupt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("taxBase")))
    {
        setTaxBase(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("taxBase"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indicativeTaxRate")))
    {
        setIndicativeTaxRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("indicativeTaxRate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indicativeTax")))
    {
        setIndicativeTax(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("indicativeTax"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedTax")))
    {
        setUnrealisedTax(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedTax"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedPnl")))
    {
        setUnrealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedPnlPcnt")))
    {
        setUnrealisedPnlPcnt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedPnlPcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedRoePcnt")))
    {
        setUnrealisedRoePcnt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedRoePcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("simpleQty")))
    {
        setSimpleQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("simpleQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("simpleCost")))
    {
        setSimpleCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("simpleCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("simpleValue")))
    {
        setSimpleValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("simpleValue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("simplePnl")))
    {
        setSimplePnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("simplePnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("simplePnlPcnt")))
    {
        setSimplePnlPcnt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("simplePnlPcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avgCostPrice")))
    {
        setAvgCostPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avgCostPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avgEntryPrice")))
    {
        setAvgEntryPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avgEntryPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("breakEvenPrice")))
    {
        setBreakEvenPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("breakEvenPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("marginCallPrice")))
    {
        setMarginCallPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("marginCallPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("liquidationPrice")))
    {
        setLiquidationPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("liquidationPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bankruptPrice")))
    {
        setBankruptPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bankruptPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastPrice")))
    {
        setLastPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastValue")))
    {
        setLastValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastValue"))));
    }
}

double Position::getAccount() const
{
    return m_Account;
}


void Position::setAccount(double value)
{
    m_Account = value;
    
}
utility::string_t Position::getSymbol() const
{
    return m_Symbol;
}


void Position::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    
}
utility::string_t Position::getCurrency() const
{
    return m_Currency;
}


void Position::setCurrency(utility::string_t value)
{
    m_Currency = value;
    
}
utility::string_t Position::getUnderlying() const
{
    return m_Underlying;
}


void Position::setUnderlying(utility::string_t value)
{
    m_Underlying = value;
    m_UnderlyingIsSet = true;
}
bool Position::underlyingIsSet() const
{
    return m_UnderlyingIsSet;
}

void Position::unsetUnderlying()
{
    m_UnderlyingIsSet = false;
}

utility::string_t Position::getQuoteCurrency() const
{
    return m_QuoteCurrency;
}


void Position::setQuoteCurrency(utility::string_t value)
{
    m_QuoteCurrency = value;
    m_QuoteCurrencyIsSet = true;
}
bool Position::quoteCurrencyIsSet() const
{
    return m_QuoteCurrencyIsSet;
}

void Position::unsetQuoteCurrency()
{
    m_QuoteCurrencyIsSet = false;
}

double Position::getCommission() const
{
    return m_Commission;
}


void Position::setCommission(double value)
{
    m_Commission = value;
    m_CommissionIsSet = true;
}
bool Position::commissionIsSet() const
{
    return m_CommissionIsSet;
}

void Position::unsetCommission()
{
    m_CommissionIsSet = false;
}

double Position::getInitMarginReq() const
{
    return m_InitMarginReq;
}


void Position::setInitMarginReq(double value)
{
    m_InitMarginReq = value;
    m_InitMarginReqIsSet = true;
}
bool Position::initMarginReqIsSet() const
{
    return m_InitMarginReqIsSet;
}

void Position::unsetInitMarginReq()
{
    m_InitMarginReqIsSet = false;
}

double Position::getMaintMarginReq() const
{
    return m_MaintMarginReq;
}


void Position::setMaintMarginReq(double value)
{
    m_MaintMarginReq = value;
    m_MaintMarginReqIsSet = true;
}
bool Position::maintMarginReqIsSet() const
{
    return m_MaintMarginReqIsSet;
}

void Position::unsetMaintMarginReq()
{
    m_MaintMarginReqIsSet = false;
}

double Position::getRiskLimit() const
{
    return m_RiskLimit;
}


void Position::setRiskLimit(double value)
{
    m_RiskLimit = value;
    m_RiskLimitIsSet = true;
}
bool Position::riskLimitIsSet() const
{
    return m_RiskLimitIsSet;
}

void Position::unsetRiskLimit()
{
    m_RiskLimitIsSet = false;
}

double Position::getLeverage() const
{
    return m_Leverage;
}


void Position::setLeverage(double value)
{
    m_Leverage = value;
    m_LeverageIsSet = true;
}
bool Position::leverageIsSet() const
{
    return m_LeverageIsSet;
}

void Position::unsetLeverage()
{
    m_LeverageIsSet = false;
}

bool Position::isCrossMargin() const
{
    return m_CrossMargin;
}


void Position::setCrossMargin(bool value)
{
    m_CrossMargin = value;
    m_CrossMarginIsSet = true;
}
bool Position::crossMarginIsSet() const
{
    return m_CrossMarginIsSet;
}

void Position::unsetCrossMargin()
{
    m_CrossMarginIsSet = false;
}

double Position::getDeleveragePercentile() const
{
    return m_DeleveragePercentile;
}


void Position::setDeleveragePercentile(double value)
{
    m_DeleveragePercentile = value;
    m_DeleveragePercentileIsSet = true;
}
bool Position::deleveragePercentileIsSet() const
{
    return m_DeleveragePercentileIsSet;
}

void Position::unsetDeleveragePercentile()
{
    m_DeleveragePercentileIsSet = false;
}

double Position::getRebalancedPnl() const
{
    return m_RebalancedPnl;
}


void Position::setRebalancedPnl(double value)
{
    m_RebalancedPnl = value;
    m_RebalancedPnlIsSet = true;
}
bool Position::rebalancedPnlIsSet() const
{
    return m_RebalancedPnlIsSet;
}

void Position::unsetRebalancedPnl()
{
    m_RebalancedPnlIsSet = false;
}

double Position::getPrevRealisedPnl() const
{
    return m_PrevRealisedPnl;
}


void Position::setPrevRealisedPnl(double value)
{
    m_PrevRealisedPnl = value;
    m_PrevRealisedPnlIsSet = true;
}
bool Position::prevRealisedPnlIsSet() const
{
    return m_PrevRealisedPnlIsSet;
}

void Position::unsetPrevRealisedPnl()
{
    m_PrevRealisedPnlIsSet = false;
}

double Position::getPrevUnrealisedPnl() const
{
    return m_PrevUnrealisedPnl;
}


void Position::setPrevUnrealisedPnl(double value)
{
    m_PrevUnrealisedPnl = value;
    m_PrevUnrealisedPnlIsSet = true;
}
bool Position::prevUnrealisedPnlIsSet() const
{
    return m_PrevUnrealisedPnlIsSet;
}

void Position::unsetPrevUnrealisedPnl()
{
    m_PrevUnrealisedPnlIsSet = false;
}

double Position::getPrevClosePrice() const
{
    return m_PrevClosePrice;
}


void Position::setPrevClosePrice(double value)
{
    m_PrevClosePrice = value;
    m_PrevClosePriceIsSet = true;
}
bool Position::prevClosePriceIsSet() const
{
    return m_PrevClosePriceIsSet;
}

void Position::unsetPrevClosePrice()
{
    m_PrevClosePriceIsSet = false;
}

utility::datetime Position::getOpeningTimestamp() const
{
    return m_OpeningTimestamp;
}


void Position::setOpeningTimestamp(utility::datetime value)
{
    m_OpeningTimestamp = value;
    m_OpeningTimestampIsSet = true;
}
bool Position::openingTimestampIsSet() const
{
    return m_OpeningTimestampIsSet;
}

void Position::unsetOpeningTimestamp()
{
    m_OpeningTimestampIsSet = false;
}

double Position::getOpeningQty() const
{
    return m_OpeningQty;
}


void Position::setOpeningQty(double value)
{
    m_OpeningQty = value;
    m_OpeningQtyIsSet = true;
}
bool Position::openingQtyIsSet() const
{
    return m_OpeningQtyIsSet;
}

void Position::unsetOpeningQty()
{
    m_OpeningQtyIsSet = false;
}

double Position::getOpeningCost() const
{
    return m_OpeningCost;
}


void Position::setOpeningCost(double value)
{
    m_OpeningCost = value;
    m_OpeningCostIsSet = true;
}
bool Position::openingCostIsSet() const
{
    return m_OpeningCostIsSet;
}

void Position::unsetOpeningCost()
{
    m_OpeningCostIsSet = false;
}

double Position::getOpeningComm() const
{
    return m_OpeningComm;
}


void Position::setOpeningComm(double value)
{
    m_OpeningComm = value;
    m_OpeningCommIsSet = true;
}
bool Position::openingCommIsSet() const
{
    return m_OpeningCommIsSet;
}

void Position::unsetOpeningComm()
{
    m_OpeningCommIsSet = false;
}

double Position::getOpenOrderBuyQty() const
{
    return m_OpenOrderBuyQty;
}


void Position::setOpenOrderBuyQty(double value)
{
    m_OpenOrderBuyQty = value;
    m_OpenOrderBuyQtyIsSet = true;
}
bool Position::openOrderBuyQtyIsSet() const
{
    return m_OpenOrderBuyQtyIsSet;
}

void Position::unsetOpenOrderBuyQty()
{
    m_OpenOrderBuyQtyIsSet = false;
}

double Position::getOpenOrderBuyCost() const
{
    return m_OpenOrderBuyCost;
}


void Position::setOpenOrderBuyCost(double value)
{
    m_OpenOrderBuyCost = value;
    m_OpenOrderBuyCostIsSet = true;
}
bool Position::openOrderBuyCostIsSet() const
{
    return m_OpenOrderBuyCostIsSet;
}

void Position::unsetOpenOrderBuyCost()
{
    m_OpenOrderBuyCostIsSet = false;
}

double Position::getOpenOrderBuyPremium() const
{
    return m_OpenOrderBuyPremium;
}


void Position::setOpenOrderBuyPremium(double value)
{
    m_OpenOrderBuyPremium = value;
    m_OpenOrderBuyPremiumIsSet = true;
}
bool Position::openOrderBuyPremiumIsSet() const
{
    return m_OpenOrderBuyPremiumIsSet;
}

void Position::unsetOpenOrderBuyPremium()
{
    m_OpenOrderBuyPremiumIsSet = false;
}

double Position::getOpenOrderSellQty() const
{
    return m_OpenOrderSellQty;
}


void Position::setOpenOrderSellQty(double value)
{
    m_OpenOrderSellQty = value;
    m_OpenOrderSellQtyIsSet = true;
}
bool Position::openOrderSellQtyIsSet() const
{
    return m_OpenOrderSellQtyIsSet;
}

void Position::unsetOpenOrderSellQty()
{
    m_OpenOrderSellQtyIsSet = false;
}

double Position::getOpenOrderSellCost() const
{
    return m_OpenOrderSellCost;
}


void Position::setOpenOrderSellCost(double value)
{
    m_OpenOrderSellCost = value;
    m_OpenOrderSellCostIsSet = true;
}
bool Position::openOrderSellCostIsSet() const
{
    return m_OpenOrderSellCostIsSet;
}

void Position::unsetOpenOrderSellCost()
{
    m_OpenOrderSellCostIsSet = false;
}

double Position::getOpenOrderSellPremium() const
{
    return m_OpenOrderSellPremium;
}


void Position::setOpenOrderSellPremium(double value)
{
    m_OpenOrderSellPremium = value;
    m_OpenOrderSellPremiumIsSet = true;
}
bool Position::openOrderSellPremiumIsSet() const
{
    return m_OpenOrderSellPremiumIsSet;
}

void Position::unsetOpenOrderSellPremium()
{
    m_OpenOrderSellPremiumIsSet = false;
}

double Position::getExecBuyQty() const
{
    return m_ExecBuyQty;
}


void Position::setExecBuyQty(double value)
{
    m_ExecBuyQty = value;
    m_ExecBuyQtyIsSet = true;
}
bool Position::execBuyQtyIsSet() const
{
    return m_ExecBuyQtyIsSet;
}

void Position::unsetExecBuyQty()
{
    m_ExecBuyQtyIsSet = false;
}

double Position::getExecBuyCost() const
{
    return m_ExecBuyCost;
}


void Position::setExecBuyCost(double value)
{
    m_ExecBuyCost = value;
    m_ExecBuyCostIsSet = true;
}
bool Position::execBuyCostIsSet() const
{
    return m_ExecBuyCostIsSet;
}

void Position::unsetExecBuyCost()
{
    m_ExecBuyCostIsSet = false;
}

double Position::getExecSellQty() const
{
    return m_ExecSellQty;
}


void Position::setExecSellQty(double value)
{
    m_ExecSellQty = value;
    m_ExecSellQtyIsSet = true;
}
bool Position::execSellQtyIsSet() const
{
    return m_ExecSellQtyIsSet;
}

void Position::unsetExecSellQty()
{
    m_ExecSellQtyIsSet = false;
}

double Position::getExecSellCost() const
{
    return m_ExecSellCost;
}


void Position::setExecSellCost(double value)
{
    m_ExecSellCost = value;
    m_ExecSellCostIsSet = true;
}
bool Position::execSellCostIsSet() const
{
    return m_ExecSellCostIsSet;
}

void Position::unsetExecSellCost()
{
    m_ExecSellCostIsSet = false;
}

double Position::getExecQty() const
{
    return m_ExecQty;
}


void Position::setExecQty(double value)
{
    m_ExecQty = value;
    m_ExecQtyIsSet = true;
}
bool Position::execQtyIsSet() const
{
    return m_ExecQtyIsSet;
}

void Position::unsetExecQty()
{
    m_ExecQtyIsSet = false;
}

double Position::getExecCost() const
{
    return m_ExecCost;
}


void Position::setExecCost(double value)
{
    m_ExecCost = value;
    m_ExecCostIsSet = true;
}
bool Position::execCostIsSet() const
{
    return m_ExecCostIsSet;
}

void Position::unsetExecCost()
{
    m_ExecCostIsSet = false;
}

double Position::getExecComm() const
{
    return m_ExecComm;
}


void Position::setExecComm(double value)
{
    m_ExecComm = value;
    m_ExecCommIsSet = true;
}
bool Position::execCommIsSet() const
{
    return m_ExecCommIsSet;
}

void Position::unsetExecComm()
{
    m_ExecCommIsSet = false;
}

utility::datetime Position::getCurrentTimestamp() const
{
    return m_CurrentTimestamp;
}


void Position::setCurrentTimestamp(utility::datetime value)
{
    m_CurrentTimestamp = value;
    m_CurrentTimestampIsSet = true;
}
bool Position::currentTimestampIsSet() const
{
    return m_CurrentTimestampIsSet;
}

void Position::unsetCurrentTimestamp()
{
    m_CurrentTimestampIsSet = false;
}

double Position::getCurrentQty() const
{
    return m_CurrentQty;
}


void Position::setCurrentQty(double value)
{
    m_CurrentQty = value;
    m_CurrentQtyIsSet = true;
}
bool Position::currentQtyIsSet() const
{
    return m_CurrentQtyIsSet;
}

void Position::unsetCurrentQty()
{
    m_CurrentQtyIsSet = false;
}

double Position::getCurrentCost() const
{
    return m_CurrentCost;
}


void Position::setCurrentCost(double value)
{
    m_CurrentCost = value;
    m_CurrentCostIsSet = true;
}
bool Position::currentCostIsSet() const
{
    return m_CurrentCostIsSet;
}

void Position::unsetCurrentCost()
{
    m_CurrentCostIsSet = false;
}

double Position::getCurrentComm() const
{
    return m_CurrentComm;
}


void Position::setCurrentComm(double value)
{
    m_CurrentComm = value;
    m_CurrentCommIsSet = true;
}
bool Position::currentCommIsSet() const
{
    return m_CurrentCommIsSet;
}

void Position::unsetCurrentComm()
{
    m_CurrentCommIsSet = false;
}

double Position::getRealisedCost() const
{
    return m_RealisedCost;
}


void Position::setRealisedCost(double value)
{
    m_RealisedCost = value;
    m_RealisedCostIsSet = true;
}
bool Position::realisedCostIsSet() const
{
    return m_RealisedCostIsSet;
}

void Position::unsetRealisedCost()
{
    m_RealisedCostIsSet = false;
}

double Position::getUnrealisedCost() const
{
    return m_UnrealisedCost;
}


void Position::setUnrealisedCost(double value)
{
    m_UnrealisedCost = value;
    m_UnrealisedCostIsSet = true;
}
bool Position::unrealisedCostIsSet() const
{
    return m_UnrealisedCostIsSet;
}

void Position::unsetUnrealisedCost()
{
    m_UnrealisedCostIsSet = false;
}

double Position::getGrossOpenCost() const
{
    return m_GrossOpenCost;
}


void Position::setGrossOpenCost(double value)
{
    m_GrossOpenCost = value;
    m_GrossOpenCostIsSet = true;
}
bool Position::grossOpenCostIsSet() const
{
    return m_GrossOpenCostIsSet;
}

void Position::unsetGrossOpenCost()
{
    m_GrossOpenCostIsSet = false;
}

double Position::getGrossOpenPremium() const
{
    return m_GrossOpenPremium;
}


void Position::setGrossOpenPremium(double value)
{
    m_GrossOpenPremium = value;
    m_GrossOpenPremiumIsSet = true;
}
bool Position::grossOpenPremiumIsSet() const
{
    return m_GrossOpenPremiumIsSet;
}

void Position::unsetGrossOpenPremium()
{
    m_GrossOpenPremiumIsSet = false;
}

double Position::getGrossExecCost() const
{
    return m_GrossExecCost;
}


void Position::setGrossExecCost(double value)
{
    m_GrossExecCost = value;
    m_GrossExecCostIsSet = true;
}
bool Position::grossExecCostIsSet() const
{
    return m_GrossExecCostIsSet;
}

void Position::unsetGrossExecCost()
{
    m_GrossExecCostIsSet = false;
}

bool Position::isIsOpen() const
{
    return m_IsOpen;
}


void Position::setIsOpen(bool value)
{
    m_IsOpen = value;
    m_IsOpenIsSet = true;
}
bool Position::isOpenIsSet() const
{
    return m_IsOpenIsSet;
}

void Position::unsetIsOpen()
{
    m_IsOpenIsSet = false;
}

double Position::getMarkPrice() const
{
    return m_MarkPrice;
}


void Position::setMarkPrice(double value)
{
    m_MarkPrice = value;
    m_MarkPriceIsSet = true;
}
bool Position::markPriceIsSet() const
{
    return m_MarkPriceIsSet;
}

void Position::unsetMarkPrice()
{
    m_MarkPriceIsSet = false;
}

double Position::getMarkValue() const
{
    return m_MarkValue;
}


void Position::setMarkValue(double value)
{
    m_MarkValue = value;
    m_MarkValueIsSet = true;
}
bool Position::markValueIsSet() const
{
    return m_MarkValueIsSet;
}

void Position::unsetMarkValue()
{
    m_MarkValueIsSet = false;
}

double Position::getRiskValue() const
{
    return m_RiskValue;
}


void Position::setRiskValue(double value)
{
    m_RiskValue = value;
    m_RiskValueIsSet = true;
}
bool Position::riskValueIsSet() const
{
    return m_RiskValueIsSet;
}

void Position::unsetRiskValue()
{
    m_RiskValueIsSet = false;
}

double Position::getHomeNotional() const
{
    return m_HomeNotional;
}


void Position::setHomeNotional(double value)
{
    m_HomeNotional = value;
    m_HomeNotionalIsSet = true;
}
bool Position::homeNotionalIsSet() const
{
    return m_HomeNotionalIsSet;
}

void Position::unsetHomeNotional()
{
    m_HomeNotionalIsSet = false;
}

double Position::getForeignNotional() const
{
    return m_ForeignNotional;
}


void Position::setForeignNotional(double value)
{
    m_ForeignNotional = value;
    m_ForeignNotionalIsSet = true;
}
bool Position::foreignNotionalIsSet() const
{
    return m_ForeignNotionalIsSet;
}

void Position::unsetForeignNotional()
{
    m_ForeignNotionalIsSet = false;
}

utility::string_t Position::getPosState() const
{
    return m_PosState;
}


void Position::setPosState(utility::string_t value)
{
    m_PosState = value;
    m_PosStateIsSet = true;
}
bool Position::posStateIsSet() const
{
    return m_PosStateIsSet;
}

void Position::unsetPosState()
{
    m_PosStateIsSet = false;
}

double Position::getPosCost() const
{
    return m_PosCost;
}


void Position::setPosCost(double value)
{
    m_PosCost = value;
    m_PosCostIsSet = true;
}
bool Position::posCostIsSet() const
{
    return m_PosCostIsSet;
}

void Position::unsetPosCost()
{
    m_PosCostIsSet = false;
}

double Position::getPosCost2() const
{
    return m_PosCost2;
}


void Position::setPosCost2(double value)
{
    m_PosCost2 = value;
    m_PosCost2IsSet = true;
}
bool Position::posCost2IsSet() const
{
    return m_PosCost2IsSet;
}

void Position::unsetPosCost2()
{
    m_PosCost2IsSet = false;
}

double Position::getPosCross() const
{
    return m_PosCross;
}


void Position::setPosCross(double value)
{
    m_PosCross = value;
    m_PosCrossIsSet = true;
}
bool Position::posCrossIsSet() const
{
    return m_PosCrossIsSet;
}

void Position::unsetPosCross()
{
    m_PosCrossIsSet = false;
}

double Position::getPosInit() const
{
    return m_PosInit;
}


void Position::setPosInit(double value)
{
    m_PosInit = value;
    m_PosInitIsSet = true;
}
bool Position::posInitIsSet() const
{
    return m_PosInitIsSet;
}

void Position::unsetPosInit()
{
    m_PosInitIsSet = false;
}

double Position::getPosComm() const
{
    return m_PosComm;
}


void Position::setPosComm(double value)
{
    m_PosComm = value;
    m_PosCommIsSet = true;
}
bool Position::posCommIsSet() const
{
    return m_PosCommIsSet;
}

void Position::unsetPosComm()
{
    m_PosCommIsSet = false;
}

double Position::getPosLoss() const
{
    return m_PosLoss;
}


void Position::setPosLoss(double value)
{
    m_PosLoss = value;
    m_PosLossIsSet = true;
}
bool Position::posLossIsSet() const
{
    return m_PosLossIsSet;
}

void Position::unsetPosLoss()
{
    m_PosLossIsSet = false;
}

double Position::getPosMargin() const
{
    return m_PosMargin;
}


void Position::setPosMargin(double value)
{
    m_PosMargin = value;
    m_PosMarginIsSet = true;
}
bool Position::posMarginIsSet() const
{
    return m_PosMarginIsSet;
}

void Position::unsetPosMargin()
{
    m_PosMarginIsSet = false;
}

double Position::getPosMaint() const
{
    return m_PosMaint;
}


void Position::setPosMaint(double value)
{
    m_PosMaint = value;
    m_PosMaintIsSet = true;
}
bool Position::posMaintIsSet() const
{
    return m_PosMaintIsSet;
}

void Position::unsetPosMaint()
{
    m_PosMaintIsSet = false;
}

double Position::getPosAllowance() const
{
    return m_PosAllowance;
}


void Position::setPosAllowance(double value)
{
    m_PosAllowance = value;
    m_PosAllowanceIsSet = true;
}
bool Position::posAllowanceIsSet() const
{
    return m_PosAllowanceIsSet;
}

void Position::unsetPosAllowance()
{
    m_PosAllowanceIsSet = false;
}

double Position::getTaxableMargin() const
{
    return m_TaxableMargin;
}


void Position::setTaxableMargin(double value)
{
    m_TaxableMargin = value;
    m_TaxableMarginIsSet = true;
}
bool Position::taxableMarginIsSet() const
{
    return m_TaxableMarginIsSet;
}

void Position::unsetTaxableMargin()
{
    m_TaxableMarginIsSet = false;
}

double Position::getInitMargin() const
{
    return m_InitMargin;
}


void Position::setInitMargin(double value)
{
    m_InitMargin = value;
    m_InitMarginIsSet = true;
}
bool Position::initMarginIsSet() const
{
    return m_InitMarginIsSet;
}

void Position::unsetInitMargin()
{
    m_InitMarginIsSet = false;
}

double Position::getMaintMargin() const
{
    return m_MaintMargin;
}


void Position::setMaintMargin(double value)
{
    m_MaintMargin = value;
    m_MaintMarginIsSet = true;
}
bool Position::maintMarginIsSet() const
{
    return m_MaintMarginIsSet;
}

void Position::unsetMaintMargin()
{
    m_MaintMarginIsSet = false;
}

double Position::getSessionMargin() const
{
    return m_SessionMargin;
}


void Position::setSessionMargin(double value)
{
    m_SessionMargin = value;
    m_SessionMarginIsSet = true;
}
bool Position::sessionMarginIsSet() const
{
    return m_SessionMarginIsSet;
}

void Position::unsetSessionMargin()
{
    m_SessionMarginIsSet = false;
}

double Position::getTargetExcessMargin() const
{
    return m_TargetExcessMargin;
}


void Position::setTargetExcessMargin(double value)
{
    m_TargetExcessMargin = value;
    m_TargetExcessMarginIsSet = true;
}
bool Position::targetExcessMarginIsSet() const
{
    return m_TargetExcessMarginIsSet;
}

void Position::unsetTargetExcessMargin()
{
    m_TargetExcessMarginIsSet = false;
}

double Position::getVarMargin() const
{
    return m_VarMargin;
}


void Position::setVarMargin(double value)
{
    m_VarMargin = value;
    m_VarMarginIsSet = true;
}
bool Position::varMarginIsSet() const
{
    return m_VarMarginIsSet;
}

void Position::unsetVarMargin()
{
    m_VarMarginIsSet = false;
}

double Position::getRealisedGrossPnl() const
{
    return m_RealisedGrossPnl;
}


void Position::setRealisedGrossPnl(double value)
{
    m_RealisedGrossPnl = value;
    m_RealisedGrossPnlIsSet = true;
}
bool Position::realisedGrossPnlIsSet() const
{
    return m_RealisedGrossPnlIsSet;
}

void Position::unsetRealisedGrossPnl()
{
    m_RealisedGrossPnlIsSet = false;
}

double Position::getRealisedTax() const
{
    return m_RealisedTax;
}


void Position::setRealisedTax(double value)
{
    m_RealisedTax = value;
    m_RealisedTaxIsSet = true;
}
bool Position::realisedTaxIsSet() const
{
    return m_RealisedTaxIsSet;
}

void Position::unsetRealisedTax()
{
    m_RealisedTaxIsSet = false;
}

double Position::getRealisedPnl() const
{
    return m_RealisedPnl;
}


void Position::setRealisedPnl(double value)
{
    m_RealisedPnl = value;
    m_RealisedPnlIsSet = true;
}
bool Position::realisedPnlIsSet() const
{
    return m_RealisedPnlIsSet;
}

void Position::unsetRealisedPnl()
{
    m_RealisedPnlIsSet = false;
}

double Position::getUnrealisedGrossPnl() const
{
    return m_UnrealisedGrossPnl;
}


void Position::setUnrealisedGrossPnl(double value)
{
    m_UnrealisedGrossPnl = value;
    m_UnrealisedGrossPnlIsSet = true;
}
bool Position::unrealisedGrossPnlIsSet() const
{
    return m_UnrealisedGrossPnlIsSet;
}

void Position::unsetUnrealisedGrossPnl()
{
    m_UnrealisedGrossPnlIsSet = false;
}

double Position::getLongBankrupt() const
{
    return m_LongBankrupt;
}


void Position::setLongBankrupt(double value)
{
    m_LongBankrupt = value;
    m_LongBankruptIsSet = true;
}
bool Position::longBankruptIsSet() const
{
    return m_LongBankruptIsSet;
}

void Position::unsetLongBankrupt()
{
    m_LongBankruptIsSet = false;
}

double Position::getShortBankrupt() const
{
    return m_ShortBankrupt;
}


void Position::setShortBankrupt(double value)
{
    m_ShortBankrupt = value;
    m_ShortBankruptIsSet = true;
}
bool Position::shortBankruptIsSet() const
{
    return m_ShortBankruptIsSet;
}

void Position::unsetShortBankrupt()
{
    m_ShortBankruptIsSet = false;
}

double Position::getTaxBase() const
{
    return m_TaxBase;
}


void Position::setTaxBase(double value)
{
    m_TaxBase = value;
    m_TaxBaseIsSet = true;
}
bool Position::taxBaseIsSet() const
{
    return m_TaxBaseIsSet;
}

void Position::unsetTaxBase()
{
    m_TaxBaseIsSet = false;
}

double Position::getIndicativeTaxRate() const
{
    return m_IndicativeTaxRate;
}


void Position::setIndicativeTaxRate(double value)
{
    m_IndicativeTaxRate = value;
    m_IndicativeTaxRateIsSet = true;
}
bool Position::indicativeTaxRateIsSet() const
{
    return m_IndicativeTaxRateIsSet;
}

void Position::unsetIndicativeTaxRate()
{
    m_IndicativeTaxRateIsSet = false;
}

double Position::getIndicativeTax() const
{
    return m_IndicativeTax;
}


void Position::setIndicativeTax(double value)
{
    m_IndicativeTax = value;
    m_IndicativeTaxIsSet = true;
}
bool Position::indicativeTaxIsSet() const
{
    return m_IndicativeTaxIsSet;
}

void Position::unsetIndicativeTax()
{
    m_IndicativeTaxIsSet = false;
}

double Position::getUnrealisedTax() const
{
    return m_UnrealisedTax;
}


void Position::setUnrealisedTax(double value)
{
    m_UnrealisedTax = value;
    m_UnrealisedTaxIsSet = true;
}
bool Position::unrealisedTaxIsSet() const
{
    return m_UnrealisedTaxIsSet;
}

void Position::unsetUnrealisedTax()
{
    m_UnrealisedTaxIsSet = false;
}

double Position::getUnrealisedPnl() const
{
    return m_UnrealisedPnl;
}


void Position::setUnrealisedPnl(double value)
{
    m_UnrealisedPnl = value;
    m_UnrealisedPnlIsSet = true;
}
bool Position::unrealisedPnlIsSet() const
{
    return m_UnrealisedPnlIsSet;
}

void Position::unsetUnrealisedPnl()
{
    m_UnrealisedPnlIsSet = false;
}

double Position::getUnrealisedPnlPcnt() const
{
    return m_UnrealisedPnlPcnt;
}


void Position::setUnrealisedPnlPcnt(double value)
{
    m_UnrealisedPnlPcnt = value;
    m_UnrealisedPnlPcntIsSet = true;
}
bool Position::unrealisedPnlPcntIsSet() const
{
    return m_UnrealisedPnlPcntIsSet;
}

void Position::unsetUnrealisedPnlPcnt()
{
    m_UnrealisedPnlPcntIsSet = false;
}

double Position::getUnrealisedRoePcnt() const
{
    return m_UnrealisedRoePcnt;
}


void Position::setUnrealisedRoePcnt(double value)
{
    m_UnrealisedRoePcnt = value;
    m_UnrealisedRoePcntIsSet = true;
}
bool Position::unrealisedRoePcntIsSet() const
{
    return m_UnrealisedRoePcntIsSet;
}

void Position::unsetUnrealisedRoePcnt()
{
    m_UnrealisedRoePcntIsSet = false;
}

double Position::getSimpleQty() const
{
    return m_SimpleQty;
}


void Position::setSimpleQty(double value)
{
    m_SimpleQty = value;
    m_SimpleQtyIsSet = true;
}
bool Position::simpleQtyIsSet() const
{
    return m_SimpleQtyIsSet;
}

void Position::unsetSimpleQty()
{
    m_SimpleQtyIsSet = false;
}

double Position::getSimpleCost() const
{
    return m_SimpleCost;
}


void Position::setSimpleCost(double value)
{
    m_SimpleCost = value;
    m_SimpleCostIsSet = true;
}
bool Position::simpleCostIsSet() const
{
    return m_SimpleCostIsSet;
}

void Position::unsetSimpleCost()
{
    m_SimpleCostIsSet = false;
}

double Position::getSimpleValue() const
{
    return m_SimpleValue;
}


void Position::setSimpleValue(double value)
{
    m_SimpleValue = value;
    m_SimpleValueIsSet = true;
}
bool Position::simpleValueIsSet() const
{
    return m_SimpleValueIsSet;
}

void Position::unsetSimpleValue()
{
    m_SimpleValueIsSet = false;
}

double Position::getSimplePnl() const
{
    return m_SimplePnl;
}


void Position::setSimplePnl(double value)
{
    m_SimplePnl = value;
    m_SimplePnlIsSet = true;
}
bool Position::simplePnlIsSet() const
{
    return m_SimplePnlIsSet;
}

void Position::unsetSimplePnl()
{
    m_SimplePnlIsSet = false;
}

double Position::getSimplePnlPcnt() const
{
    return m_SimplePnlPcnt;
}


void Position::setSimplePnlPcnt(double value)
{
    m_SimplePnlPcnt = value;
    m_SimplePnlPcntIsSet = true;
}
bool Position::simplePnlPcntIsSet() const
{
    return m_SimplePnlPcntIsSet;
}

void Position::unsetSimplePnlPcnt()
{
    m_SimplePnlPcntIsSet = false;
}

double Position::getAvgCostPrice() const
{
    return m_AvgCostPrice;
}


void Position::setAvgCostPrice(double value)
{
    m_AvgCostPrice = value;
    m_AvgCostPriceIsSet = true;
}
bool Position::avgCostPriceIsSet() const
{
    return m_AvgCostPriceIsSet;
}

void Position::unsetAvgCostPrice()
{
    m_AvgCostPriceIsSet = false;
}

double Position::getAvgEntryPrice() const
{
    return m_AvgEntryPrice;
}


void Position::setAvgEntryPrice(double value)
{
    m_AvgEntryPrice = value;
    m_AvgEntryPriceIsSet = true;
}
bool Position::avgEntryPriceIsSet() const
{
    return m_AvgEntryPriceIsSet;
}

void Position::unsetAvgEntryPrice()
{
    m_AvgEntryPriceIsSet = false;
}

double Position::getBreakEvenPrice() const
{
    return m_BreakEvenPrice;
}


void Position::setBreakEvenPrice(double value)
{
    m_BreakEvenPrice = value;
    m_BreakEvenPriceIsSet = true;
}
bool Position::breakEvenPriceIsSet() const
{
    return m_BreakEvenPriceIsSet;
}

void Position::unsetBreakEvenPrice()
{
    m_BreakEvenPriceIsSet = false;
}

double Position::getMarginCallPrice() const
{
    return m_MarginCallPrice;
}


void Position::setMarginCallPrice(double value)
{
    m_MarginCallPrice = value;
    m_MarginCallPriceIsSet = true;
}
bool Position::marginCallPriceIsSet() const
{
    return m_MarginCallPriceIsSet;
}

void Position::unsetMarginCallPrice()
{
    m_MarginCallPriceIsSet = false;
}

double Position::getLiquidationPrice() const
{
    return m_LiquidationPrice;
}


void Position::setLiquidationPrice(double value)
{
    m_LiquidationPrice = value;
    m_LiquidationPriceIsSet = true;
}
bool Position::liquidationPriceIsSet() const
{
    return m_LiquidationPriceIsSet;
}

void Position::unsetLiquidationPrice()
{
    m_LiquidationPriceIsSet = false;
}

double Position::getBankruptPrice() const
{
    return m_BankruptPrice;
}


void Position::setBankruptPrice(double value)
{
    m_BankruptPrice = value;
    m_BankruptPriceIsSet = true;
}
bool Position::bankruptPriceIsSet() const
{
    return m_BankruptPriceIsSet;
}

void Position::unsetBankruptPrice()
{
    m_BankruptPriceIsSet = false;
}

utility::datetime Position::getTimestamp() const
{
    return m_Timestamp;
}


void Position::setTimestamp(utility::datetime value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Position::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Position::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

double Position::getLastPrice() const
{
    return m_LastPrice;
}


void Position::setLastPrice(double value)
{
    m_LastPrice = value;
    m_LastPriceIsSet = true;
}
bool Position::lastPriceIsSet() const
{
    return m_LastPriceIsSet;
}

void Position::unsetLastPrice()
{
    m_LastPriceIsSet = false;
}

double Position::getLastValue() const
{
    return m_LastValue;
}


void Position::setLastValue(double value)
{
    m_LastValue = value;
    m_LastValueIsSet = true;
}
bool Position::lastValueIsSet() const
{
    return m_LastValueIsSet;
}

void Position::unsetLastValue()
{
    m_LastValueIsSet = false;
}

}
}
}
}

