/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.24-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "QuoteValueRatio.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

QuoteValueRatio::QuoteValueRatio()
{
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Account = 0.0;
    m_AccountIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_QuoteCount = 0.0;
    m_QuoteCountIsSet = false;
    m_VolumeXBT = 0.0;
    m_VolumeXBTIsSet = false;
    m_QVR = 0.0;
    m_QVRIsSet = false;
    m_Id = 0.0;
    m_IdIsSet = false;
}

QuoteValueRatio::~QuoteValueRatio()
{
}

void QuoteValueRatio::validate()
{
    // TODO: implement validation
}

web::json::value QuoteValueRatio::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_QuoteCountIsSet)
    {
        val[utility::conversions::to_string_t("quoteCount")] = ModelBase::toJson(m_QuoteCount);
    }
    if(m_VolumeXBTIsSet)
    {
        val[utility::conversions::to_string_t("volumeXBT")] = ModelBase::toJson(m_VolumeXBT);
    }
    if(m_QVRIsSet)
    {
        val[utility::conversions::to_string_t("QVR")] = ModelBase::toJson(m_QVR);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

void QuoteValueRatio::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timestamp")];
        if(!fieldValue.is_null())
        {
            setTimestamp(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("account")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("account")];
        if(!fieldValue.is_null())
        {
            setAccount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("quoteCount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("quoteCount")];
        if(!fieldValue.is_null())
        {
            setQuoteCount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("volumeXBT")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("volumeXBT")];
        if(!fieldValue.is_null())
        {
            setVolumeXBT(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("QVR")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("QVR")];
        if(!fieldValue.is_null())
        {
            setQVR(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void QuoteValueRatio::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
        
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_QuoteCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quoteCount"), m_QuoteCount));
    }
    if(m_VolumeXBTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("volumeXBT"), m_VolumeXBT));
    }
    if(m_QVRIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("QVR"), m_QVR));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
}

void QuoteValueRatio::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("account")))
    {
        setAccount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quoteCount")))
    {
        setQuoteCount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quoteCount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("volumeXBT")))
    {
        setVolumeXBT(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("volumeXBT"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("QVR")))
    {
        setQVR(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("QVR"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
}

utility::datetime QuoteValueRatio::getTimestamp() const
{
    return m_Timestamp;
}


void QuoteValueRatio::setTimestamp(utility::datetime value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool QuoteValueRatio::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void QuoteValueRatio::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

double QuoteValueRatio::getAccount() const
{
    return m_Account;
}


void QuoteValueRatio::setAccount(double value)
{
    m_Account = value;
    m_AccountIsSet = true;
}
bool QuoteValueRatio::accountIsSet() const
{
    return m_AccountIsSet;
}

void QuoteValueRatio::unsetAccount()
{
    m_AccountIsSet = false;
}

utility::string_t QuoteValueRatio::getSymbol() const
{
    return m_Symbol;
}


void QuoteValueRatio::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool QuoteValueRatio::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void QuoteValueRatio::unsetSymbol()
{
    m_SymbolIsSet = false;
}

double QuoteValueRatio::getQuoteCount() const
{
    return m_QuoteCount;
}


void QuoteValueRatio::setQuoteCount(double value)
{
    m_QuoteCount = value;
    m_QuoteCountIsSet = true;
}
bool QuoteValueRatio::quoteCountIsSet() const
{
    return m_QuoteCountIsSet;
}

void QuoteValueRatio::unsetQuoteCount()
{
    m_QuoteCountIsSet = false;
}

double QuoteValueRatio::getVolumeXBT() const
{
    return m_VolumeXBT;
}


void QuoteValueRatio::setVolumeXBT(double value)
{
    m_VolumeXBT = value;
    m_VolumeXBTIsSet = true;
}
bool QuoteValueRatio::volumeXBTIsSet() const
{
    return m_VolumeXBTIsSet;
}

void QuoteValueRatio::unsetVolumeXBT()
{
    m_VolumeXBTIsSet = false;
}

double QuoteValueRatio::getQVR() const
{
    return m_QVR;
}


void QuoteValueRatio::setQVR(double value)
{
    m_QVR = value;
    m_QVRIsSet = true;
}
bool QuoteValueRatio::qVRIsSet() const
{
    return m_QVRIsSet;
}

void QuoteValueRatio::unsetQVR()
{
    m_QVRIsSet = false;
}

double QuoteValueRatio::getId() const
{
    return m_Id;
}


void QuoteValueRatio::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool QuoteValueRatio::idIsSet() const
{
    return m_IdIsSet;
}

void QuoteValueRatio::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}

