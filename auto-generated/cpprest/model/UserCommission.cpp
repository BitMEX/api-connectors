/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserCommission.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserCommission::UserCommission()
{
    m_MakerFee = 0.0;
    m_MakerFeeIsSet = false;
    m_TakerFee = 0.0;
    m_TakerFeeIsSet = false;
    m_SettlementFee = 0.0;
    m_SettlementFeeIsSet = false;
    m_MaxFee = 0.0;
    m_MaxFeeIsSet = false;
}

UserCommission::~UserCommission()
{
}

void UserCommission::validate()
{
    // TODO: implement validation
}

web::json::value UserCommission::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MakerFeeIsSet)
    {
        val[utility::conversions::to_string_t("makerFee")] = ModelBase::toJson(m_MakerFee);
    }
    if(m_TakerFeeIsSet)
    {
        val[utility::conversions::to_string_t("takerFee")] = ModelBase::toJson(m_TakerFee);
    }
    if(m_SettlementFeeIsSet)
    {
        val[utility::conversions::to_string_t("settlementFee")] = ModelBase::toJson(m_SettlementFee);
    }
    if(m_MaxFeeIsSet)
    {
        val[utility::conversions::to_string_t("maxFee")] = ModelBase::toJson(m_MaxFee);
    }

    return val;
}

void UserCommission::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("makerFee")))
    {
        setMakerFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("makerFee")]));
    }
    if(val.has_field(utility::conversions::to_string_t("takerFee")))
    {
        setTakerFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("takerFee")]));
    }
    if(val.has_field(utility::conversions::to_string_t("settlementFee")))
    {
        setSettlementFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("settlementFee")]));
    }
    if(val.has_field(utility::conversions::to_string_t("maxFee")))
    {
        setMaxFee(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("maxFee")]));
    }
}

void UserCommission::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MakerFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("makerFee"), m_MakerFee));
    }
    if(m_TakerFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("takerFee"), m_TakerFee));
    }
    if(m_SettlementFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("settlementFee"), m_SettlementFee));
    }
    if(m_MaxFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxFee"), m_MaxFee));
    }
}

void UserCommission::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("makerFee")))
    {
        setMakerFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("makerFee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("takerFee")))
    {
        setTakerFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("takerFee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("settlementFee")))
    {
        setSettlementFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("settlementFee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxFee")))
    {
        setMaxFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxFee"))));
    }
}

double UserCommission::getMakerFee() const
{
    return m_MakerFee;
}


void UserCommission::setMakerFee(double value)
{
    m_MakerFee = value;
    m_MakerFeeIsSet = true;
}
bool UserCommission::makerFeeIsSet() const
{
    return m_MakerFeeIsSet;
}

void UserCommission::unsetMakerFee()
{
    m_MakerFeeIsSet = false;
}

double UserCommission::getTakerFee() const
{
    return m_TakerFee;
}


void UserCommission::setTakerFee(double value)
{
    m_TakerFee = value;
    m_TakerFeeIsSet = true;
}
bool UserCommission::takerFeeIsSet() const
{
    return m_TakerFeeIsSet;
}

void UserCommission::unsetTakerFee()
{
    m_TakerFeeIsSet = false;
}

double UserCommission::getSettlementFee() const
{
    return m_SettlementFee;
}


void UserCommission::setSettlementFee(double value)
{
    m_SettlementFee = value;
    m_SettlementFeeIsSet = true;
}
bool UserCommission::settlementFeeIsSet() const
{
    return m_SettlementFeeIsSet;
}

void UserCommission::unsetSettlementFee()
{
    m_SettlementFeeIsSet = false;
}

double UserCommission::getMaxFee() const
{
    return m_MaxFee;
}


void UserCommission::setMaxFee(double value)
{
    m_MaxFee = value;
    m_MaxFeeIsSet = true;
}
bool UserCommission::maxFeeIsSet() const
{
    return m_MaxFeeIsSet;
}

void UserCommission::unsetMaxFee()
{
    m_MaxFeeIsSet = false;
}

}
}
}
}

