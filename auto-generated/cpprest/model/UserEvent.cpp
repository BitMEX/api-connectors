/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.24-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserEvent.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserEvent::UserEvent()
{
    m_Id = 0.0;
    m_IdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_Status = utility::conversions::to_string_t("");
    m_UserId = 0.0;
    m_CreatedById = 0.0;
    m_Ip = utility::conversions::to_string_t("");
    m_IpIsSet = false;
    m_GeoipCountry = utility::conversions::to_string_t("");
    m_GeoipCountryIsSet = false;
    m_GeoipRegion = utility::conversions::to_string_t("");
    m_GeoipRegionIsSet = false;
    m_GeoipSubRegion = utility::conversions::to_string_t("");
    m_GeoipSubRegionIsSet = false;
    m_EventMetaIsSet = false;
    m_Created = utility::datetime();
}

UserEvent::~UserEvent()
{
}

void UserEvent::validate()
{
    // TODO: implement validation
}

web::json::value UserEvent::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    val[utility::conversions::to_string_t("createdById")] = ModelBase::toJson(m_CreatedById);
    if(m_IpIsSet)
    {
        val[utility::conversions::to_string_t("ip")] = ModelBase::toJson(m_Ip);
    }
    if(m_GeoipCountryIsSet)
    {
        val[utility::conversions::to_string_t("geoipCountry")] = ModelBase::toJson(m_GeoipCountry);
    }
    if(m_GeoipRegionIsSet)
    {
        val[utility::conversions::to_string_t("geoipRegion")] = ModelBase::toJson(m_GeoipRegion);
    }
    if(m_GeoipSubRegionIsSet)
    {
        val[utility::conversions::to_string_t("geoipSubRegion")] = ModelBase::toJson(m_GeoipSubRegion);
    }
    if(m_EventMetaIsSet)
    {
        val[utility::conversions::to_string_t("eventMeta")] = ModelBase::toJson(m_EventMeta);
    }
    val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);

    return val;
}

void UserEvent::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("type")]));
    setStatus(ModelBase::stringFromJson(val[utility::conversions::to_string_t("status")]));
    setUserId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("userId")]));
    setCreatedById(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("createdById")]));
    if(val.has_field(utility::conversions::to_string_t("ip")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ip")];
        if(!fieldValue.is_null())
        {
            setIp(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geoipCountry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("geoipCountry")];
        if(!fieldValue.is_null())
        {
            setGeoipCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geoipRegion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("geoipRegion")];
        if(!fieldValue.is_null())
        {
            setGeoipRegion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geoipSubRegion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("geoipSubRegion")];
        if(!fieldValue.is_null())
        {
            setGeoipSubRegion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventMeta")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("eventMeta")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setEventMeta( newItem );
        }
    }
    setCreated
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("created")]));
}

void UserEvent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdById"), m_CreatedById));
    if(m_IpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ip"), m_Ip));
        
    }
    if(m_GeoipCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geoipCountry"), m_GeoipCountry));
        
    }
    if(m_GeoipRegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geoipRegion"), m_GeoipRegion));
        
    }
    if(m_GeoipSubRegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geoipSubRegion"), m_GeoipSubRegion));
        
    }
    if(m_EventMetaIsSet)
    {
        if (m_EventMeta.get())
        {
            m_EventMeta->toMultipart(multipart, utility::conversions::to_string_t("eventMeta."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
}

void UserEvent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId"))));
    setCreatedById(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdById"))));
    if(multipart->hasContent(utility::conversions::to_string_t("ip")))
    {
        setIp(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ip"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geoipCountry")))
    {
        setGeoipCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("geoipCountry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geoipRegion")))
    {
        setGeoipRegion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("geoipRegion"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geoipSubRegion")))
    {
        setGeoipSubRegion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("geoipSubRegion"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventMeta")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("eventMeta")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("eventMeta."));
            setEventMeta( newItem );
        }
    }
    setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
}

double UserEvent::getId() const
{
    return m_Id;
}


void UserEvent::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserEvent::idIsSet() const
{
    return m_IdIsSet;
}

void UserEvent::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t UserEvent::getType() const
{
    return m_Type;
}


void UserEvent::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t UserEvent::getStatus() const
{
    return m_Status;
}


void UserEvent::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
double UserEvent::getUserId() const
{
    return m_UserId;
}


void UserEvent::setUserId(double value)
{
    m_UserId = value;
    
}
double UserEvent::getCreatedById() const
{
    return m_CreatedById;
}


void UserEvent::setCreatedById(double value)
{
    m_CreatedById = value;
    
}
utility::string_t UserEvent::getIp() const
{
    return m_Ip;
}


void UserEvent::setIp(utility::string_t value)
{
    m_Ip = value;
    m_IpIsSet = true;
}
bool UserEvent::ipIsSet() const
{
    return m_IpIsSet;
}

void UserEvent::unsetIp()
{
    m_IpIsSet = false;
}

utility::string_t UserEvent::getGeoipCountry() const
{
    return m_GeoipCountry;
}


void UserEvent::setGeoipCountry(utility::string_t value)
{
    m_GeoipCountry = value;
    m_GeoipCountryIsSet = true;
}
bool UserEvent::geoipCountryIsSet() const
{
    return m_GeoipCountryIsSet;
}

void UserEvent::unsetGeoipCountry()
{
    m_GeoipCountryIsSet = false;
}

utility::string_t UserEvent::getGeoipRegion() const
{
    return m_GeoipRegion;
}


void UserEvent::setGeoipRegion(utility::string_t value)
{
    m_GeoipRegion = value;
    m_GeoipRegionIsSet = true;
}
bool UserEvent::geoipRegionIsSet() const
{
    return m_GeoipRegionIsSet;
}

void UserEvent::unsetGeoipRegion()
{
    m_GeoipRegionIsSet = false;
}

utility::string_t UserEvent::getGeoipSubRegion() const
{
    return m_GeoipSubRegion;
}


void UserEvent::setGeoipSubRegion(utility::string_t value)
{
    m_GeoipSubRegion = value;
    m_GeoipSubRegionIsSet = true;
}
bool UserEvent::geoipSubRegionIsSet() const
{
    return m_GeoipSubRegionIsSet;
}

void UserEvent::unsetGeoipSubRegion()
{
    m_GeoipSubRegionIsSet = false;
}

std::shared_ptr<Object> UserEvent::getEventMeta() const
{
    return m_EventMeta;
}


void UserEvent::setEventMeta(std::shared_ptr<Object> value)
{
    m_EventMeta = value;
    m_EventMetaIsSet = true;
}
bool UserEvent::eventMetaIsSet() const
{
    return m_EventMetaIsSet;
}

void UserEvent::unsetEventMeta()
{
    m_EventMetaIsSet = false;
}

utility::datetime UserEvent::getCreated() const
{
    return m_Created;
}


void UserEvent::setCreated(utility::datetime value)
{
    m_Created = value;
    
}
}
}
}
}

