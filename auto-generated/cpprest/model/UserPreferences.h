/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserPreferences.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_UserPreferences_H_
#define IO_SWAGGER_CLIENT_MODEL_UserPreferences_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserPreferences
    : public ModelBase
{
public:
    UserPreferences();
    virtual ~UserPreferences();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserPreferences members

    /// <summary>
    /// 
    /// </summary>
    bool isAlertOnLiquidations() const;
    bool alertOnLiquidationsIsSet() const;
    void unsetAlertOnLiquidations();
    void setAlertOnLiquidations(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isAnimationsEnabled() const;
    bool animationsEnabledIsSet() const;
    void unsetAnimationsEnabled();
    void setAnimationsEnabled(bool value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getAnnouncementsLastSeen() const;
    bool announcementsLastSeenIsSet() const;
    void unsetAnnouncementsLastSeen();
    void setAnnouncementsLastSeen(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    double getChatChannelID() const;
    bool chatChannelIDIsSet() const;
    void unsetChatChannelID();
    void setChatChannelID(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getColorTheme() const;
    bool colorThemeIsSet() const;
    void unsetColorTheme();
    void setColorTheme(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();
    void setCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isDebug() const;
    bool debugIsSet() const;
    void unsetDebug();
    void setDebug(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getDisableEmails();
    bool disableEmailsIsSet() const;
    void unsetDisableEmails();
    void setDisableEmails(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getHideConfirmDialogs();
    bool hideConfirmDialogsIsSet() const;
    void unsetHideConfirmDialogs();
    void setHideConfirmDialogs(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    bool isHideConnectionModal() const;
    bool hideConnectionModalIsSet() const;
    void unsetHideConnectionModal();
    void setHideConnectionModal(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isHideFromLeaderboard() const;
    bool hideFromLeaderboardIsSet() const;
    void unsetHideFromLeaderboard();
    void setHideFromLeaderboard(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isHideNameFromLeaderboard() const;
    bool hideNameFromLeaderboardIsSet() const;
    void unsetHideNameFromLeaderboard();
    void setHideNameFromLeaderboard(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getHideNotifications();
    bool hideNotificationsIsSet() const;
    void unsetHideNotifications();
    void setHideNotifications(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocale() const;
    bool localeIsSet() const;
    void unsetLocale();
    void setLocale(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getMsgsSeen();
    bool msgsSeenIsSet() const;
    void unsetMsgsSeen();
    void setMsgsSeen(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getOrderBookBinning() const;
    bool orderBookBinningIsSet() const;
    void unsetOrderBookBinning();
    void setOrderBookBinning(std::shared_ptr<Object> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderBookType() const;
    bool orderBookTypeIsSet() const;
    void unsetOrderBookType();
    void setOrderBookType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isOrderClearImmediate() const;
    bool orderClearImmediateIsSet() const;
    void unsetOrderClearImmediate();
    void setOrderClearImmediate(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isOrderControlsPlusMinus() const;
    bool orderControlsPlusMinusIsSet() const;
    void unsetOrderControlsPlusMinus();
    void setOrderControlsPlusMinus(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isShowLocaleNumbers() const;
    bool showLocaleNumbersIsSet() const;
    void unsetShowLocaleNumbers();
    void setShowLocaleNumbers(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSounds();
    bool soundsIsSet() const;
    void unsetSounds();
    void setSounds(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    bool isStrictIPCheck() const;
    bool strictIPCheckIsSet() const;
    void unsetStrictIPCheck();
    void setStrictIPCheck(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isStrictTimeout() const;
    bool strictTimeoutIsSet() const;
    void unsetStrictTimeout();
    void setStrictTimeout(bool value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTickerGroup() const;
    bool tickerGroupIsSet() const;
    void unsetTickerGroup();
    void setTickerGroup(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isTickerPinned() const;
    bool tickerPinnedIsSet() const;
    void unsetTickerPinned();
    void setTickerPinned(bool value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTradeLayout() const;
    bool tradeLayoutIsSet() const;
    void unsetTradeLayout();
    void setTradeLayout(utility::string_t value);

protected:
    bool m_AlertOnLiquidations;
    bool m_AlertOnLiquidationsIsSet;
    bool m_AnimationsEnabled;
    bool m_AnimationsEnabledIsSet;
    utility::datetime m_AnnouncementsLastSeen;
    bool m_AnnouncementsLastSeenIsSet;
    double m_ChatChannelID;
    bool m_ChatChannelIDIsSet;
    utility::string_t m_ColorTheme;
    bool m_ColorThemeIsSet;
    utility::string_t m_Currency;
    bool m_CurrencyIsSet;
    bool m_Debug;
    bool m_DebugIsSet;
    std::vector<utility::string_t> m_DisableEmails;
    bool m_DisableEmailsIsSet;
    std::vector<utility::string_t> m_HideConfirmDialogs;
    bool m_HideConfirmDialogsIsSet;
    bool m_HideConnectionModal;
    bool m_HideConnectionModalIsSet;
    bool m_HideFromLeaderboard;
    bool m_HideFromLeaderboardIsSet;
    bool m_HideNameFromLeaderboard;
    bool m_HideNameFromLeaderboardIsSet;
    std::vector<utility::string_t> m_HideNotifications;
    bool m_HideNotificationsIsSet;
    utility::string_t m_Locale;
    bool m_LocaleIsSet;
    std::vector<utility::string_t> m_MsgsSeen;
    bool m_MsgsSeenIsSet;
    std::shared_ptr<Object> m_OrderBookBinning;
    bool m_OrderBookBinningIsSet;
    utility::string_t m_OrderBookType;
    bool m_OrderBookTypeIsSet;
    bool m_OrderClearImmediate;
    bool m_OrderClearImmediateIsSet;
    bool m_OrderControlsPlusMinus;
    bool m_OrderControlsPlusMinusIsSet;
    bool m_ShowLocaleNumbers;
    bool m_ShowLocaleNumbersIsSet;
    std::vector<utility::string_t> m_Sounds;
    bool m_SoundsIsSet;
    bool m_StrictIPCheck;
    bool m_StrictIPCheckIsSet;
    bool m_StrictTimeout;
    bool m_StrictTimeoutIsSet;
    utility::string_t m_TickerGroup;
    bool m_TickerGroupIsSet;
    bool m_TickerPinned;
    bool m_TickerPinnedIsSet;
    utility::string_t m_TradeLayout;
    bool m_TradeLayoutIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_UserPreferences_H_ */
