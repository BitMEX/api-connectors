/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing Settlement
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class SettlementTests
    {
        // TODO uncomment below to declare an instance variable for Settlement
        //private Settlement instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Settlement
            //instance = new Settlement();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Settlement
        /// </summary>
        [Test]
        public void SettlementInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Settlement
            //Assert.IsInstanceOfType<Settlement> (instance, "variable 'instance' is a Settlement");
        }


        /// <summary>
        /// Test the property 'Timestamp'
        /// </summary>
        [Test]
        public void TimestampTest()
        {
            // TODO unit test for the property 'Timestamp'
        }
        /// <summary>
        /// Test the property 'Symbol'
        /// </summary>
        [Test]
        public void SymbolTest()
        {
            // TODO unit test for the property 'Symbol'
        }
        /// <summary>
        /// Test the property 'SettlementType'
        /// </summary>
        [Test]
        public void SettlementTypeTest()
        {
            // TODO unit test for the property 'SettlementType'
        }
        /// <summary>
        /// Test the property 'SettledPrice'
        /// </summary>
        [Test]
        public void SettledPriceTest()
        {
            // TODO unit test for the property 'SettledPrice'
        }
        /// <summary>
        /// Test the property 'OptionStrikePrice'
        /// </summary>
        [Test]
        public void OptionStrikePriceTest()
        {
            // TODO unit test for the property 'OptionStrikePrice'
        }
        /// <summary>
        /// Test the property 'OptionUnderlyingPrice'
        /// </summary>
        [Test]
        public void OptionUnderlyingPriceTest()
        {
            // TODO unit test for the property 'OptionUnderlyingPrice'
        }
        /// <summary>
        /// Test the property 'Bankrupt'
        /// </summary>
        [Test]
        public void BankruptTest()
        {
            // TODO unit test for the property 'Bankrupt'
        }
        /// <summary>
        /// Test the property 'TaxBase'
        /// </summary>
        [Test]
        public void TaxBaseTest()
        {
            // TODO unit test for the property 'TaxBase'
        }
        /// <summary>
        /// Test the property 'TaxRate'
        /// </summary>
        [Test]
        public void TaxRateTest()
        {
            // TODO unit test for the property 'TaxRate'
        }

    }

}
