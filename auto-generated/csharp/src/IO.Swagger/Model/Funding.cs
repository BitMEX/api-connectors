/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Swap Funding History
    /// </summary>
    [DataContract]
    public partial class Funding :  IEquatable<Funding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Funding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Funding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Funding" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="fundingInterval">fundingInterval.</param>
        /// <param name="fundingRate">fundingRate.</param>
        /// <param name="fundingRateDaily">fundingRateDaily.</param>
        public Funding(DateTime? timestamp = default(DateTime?), string symbol = default(string), DateTime? fundingInterval = default(DateTime?), double? fundingRate = default(double?), double? fundingRateDaily = default(double?))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Funding and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for Funding and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            this.FundingInterval = fundingInterval;
            this.FundingRate = fundingRate;
            this.FundingRateDaily = fundingRateDaily;
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets FundingInterval
        /// </summary>
        [DataMember(Name="fundingInterval", EmitDefaultValue=false)]
        public DateTime? FundingInterval { get; set; }

        /// <summary>
        /// Gets or Sets FundingRate
        /// </summary>
        [DataMember(Name="fundingRate", EmitDefaultValue=false)]
        public double? FundingRate { get; set; }

        /// <summary>
        /// Gets or Sets FundingRateDaily
        /// </summary>
        [DataMember(Name="fundingRateDaily", EmitDefaultValue=false)]
        public double? FundingRateDaily { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Funding {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  FundingInterval: ").Append(FundingInterval).Append("\n");
            sb.Append("  FundingRate: ").Append(FundingRate).Append("\n");
            sb.Append("  FundingRateDaily: ").Append(FundingRateDaily).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Funding);
        }

        /// <summary>
        /// Returns true if Funding instances are equal
        /// </summary>
        /// <param name="input">Instance of Funding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Funding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.FundingInterval == input.FundingInterval ||
                    (this.FundingInterval != null &&
                    this.FundingInterval.Equals(input.FundingInterval))
                ) && 
                (
                    this.FundingRate == input.FundingRate ||
                    (this.FundingRate != null &&
                    this.FundingRate.Equals(input.FundingRate))
                ) && 
                (
                    this.FundingRateDaily == input.FundingRateDaily ||
                    (this.FundingRateDaily != null &&
                    this.FundingRateDaily.Equals(input.FundingRateDaily))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.FundingInterval != null)
                    hashCode = hashCode * 59 + this.FundingInterval.GetHashCode();
                if (this.FundingRate != null)
                    hashCode = hashCode * 59 + this.FundingRate.GetHashCode();
                if (this.FundingRateDaily != null)
                    hashCode = hashCode * 59 + this.FundingRateDaily.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
