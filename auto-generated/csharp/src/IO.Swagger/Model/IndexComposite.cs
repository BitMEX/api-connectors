/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  - --  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  - --  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IndexComposite
    /// </summary>
    [DataContract]
    public partial class IndexComposite :  IEquatable<IndexComposite>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexComposite" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IndexComposite() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexComposite" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="indexSymbol">indexSymbol.</param>
        /// <param name="indexMultiplier">indexMultiplier.</param>
        /// <param name="reference">reference.</param>
        /// <param name="lastPrice">lastPrice.</param>
        /// <param name="sourcePrice">sourcePrice.</param>
        /// <param name="conversionIndex">conversionIndex.</param>
        /// <param name="conversionIndexPrice">conversionIndexPrice.</param>
        /// <param name="weight">weight.</param>
        /// <param name="logged">logged.</param>
        public IndexComposite(DateTime? timestamp = default(DateTime?), string symbol = default(string), string indexSymbol = default(string), double? indexMultiplier = default(double?), string reference = default(string), double? lastPrice = default(double?), double? sourcePrice = default(double?), string conversionIndex = default(string), double? conversionIndexPrice = default(double?), double? weight = default(double?), DateTime? logged = default(DateTime?))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for IndexComposite and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            this.Symbol = symbol;
            this.IndexSymbol = indexSymbol;
            this.IndexMultiplier = indexMultiplier;
            this.Reference = reference;
            this.LastPrice = lastPrice;
            this.SourcePrice = sourcePrice;
            this.ConversionIndex = conversionIndex;
            this.ConversionIndexPrice = conversionIndexPrice;
            this.Weight = weight;
            this.Logged = logged;
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets IndexSymbol
        /// </summary>
        [DataMember(Name="indexSymbol", EmitDefaultValue=false)]
        public string IndexSymbol { get; set; }

        /// <summary>
        /// Gets or Sets IndexMultiplier
        /// </summary>
        [DataMember(Name="indexMultiplier", EmitDefaultValue=false)]
        public double? IndexMultiplier { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets LastPrice
        /// </summary>
        [DataMember(Name="lastPrice", EmitDefaultValue=false)]
        public double? LastPrice { get; set; }

        /// <summary>
        /// Gets or Sets SourcePrice
        /// </summary>
        [DataMember(Name="sourcePrice", EmitDefaultValue=false)]
        public double? SourcePrice { get; set; }

        /// <summary>
        /// Gets or Sets ConversionIndex
        /// </summary>
        [DataMember(Name="conversionIndex", EmitDefaultValue=false)]
        public string ConversionIndex { get; set; }

        /// <summary>
        /// Gets or Sets ConversionIndexPrice
        /// </summary>
        [DataMember(Name="conversionIndexPrice", EmitDefaultValue=false)]
        public double? ConversionIndexPrice { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Logged
        /// </summary>
        [DataMember(Name="logged", EmitDefaultValue=false)]
        public DateTime? Logged { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IndexComposite {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  IndexSymbol: ").Append(IndexSymbol).Append("\n");
            sb.Append("  IndexMultiplier: ").Append(IndexMultiplier).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  SourcePrice: ").Append(SourcePrice).Append("\n");
            sb.Append("  ConversionIndex: ").Append(ConversionIndex).Append("\n");
            sb.Append("  ConversionIndexPrice: ").Append(ConversionIndexPrice).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Logged: ").Append(Logged).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndexComposite);
        }

        /// <summary>
        /// Returns true if IndexComposite instances are equal
        /// </summary>
        /// <param name="input">Instance of IndexComposite to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexComposite input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.IndexSymbol == input.IndexSymbol ||
                    (this.IndexSymbol != null &&
                    this.IndexSymbol.Equals(input.IndexSymbol))
                ) && 
                (
                    this.IndexMultiplier == input.IndexMultiplier ||
                    (this.IndexMultiplier != null &&
                    this.IndexMultiplier.Equals(input.IndexMultiplier))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                ) && 
                (
                    this.SourcePrice == input.SourcePrice ||
                    (this.SourcePrice != null &&
                    this.SourcePrice.Equals(input.SourcePrice))
                ) && 
                (
                    this.ConversionIndex == input.ConversionIndex ||
                    (this.ConversionIndex != null &&
                    this.ConversionIndex.Equals(input.ConversionIndex))
                ) && 
                (
                    this.ConversionIndexPrice == input.ConversionIndexPrice ||
                    (this.ConversionIndexPrice != null &&
                    this.ConversionIndexPrice.Equals(input.ConversionIndexPrice))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Logged == input.Logged ||
                    (this.Logged != null &&
                    this.Logged.Equals(input.Logged))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.IndexSymbol != null)
                    hashCode = hashCode * 59 + this.IndexSymbol.GetHashCode();
                if (this.IndexMultiplier != null)
                    hashCode = hashCode * 59 + this.IndexMultiplier.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.SourcePrice != null)
                    hashCode = hashCode * 59 + this.SourcePrice.GetHashCode();
                if (this.ConversionIndex != null)
                    hashCode = hashCode * 59 + this.ConversionIndex.GetHashCode();
                if (this.ConversionIndexPrice != null)
                    hashCode = hashCode * 59 + this.ConversionIndexPrice.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Logged != null)
                    hashCode = hashCode * 59 + this.Logged.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
