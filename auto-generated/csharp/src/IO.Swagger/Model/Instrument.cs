/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Tradeable Contracts, Indices, and History
    /// </summary>
    [DataContract]
    public partial class Instrument :  IEquatable<Instrument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Instrument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Instrument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Instrument" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="rootSymbol">rootSymbol.</param>
        /// <param name="state">state.</param>
        /// <param name="typ">typ.</param>
        /// <param name="listing">listing.</param>
        /// <param name="front">front.</param>
        /// <param name="expiry">expiry.</param>
        /// <param name="settle">settle.</param>
        /// <param name="relistInterval">relistInterval.</param>
        /// <param name="inverseLeg">inverseLeg.</param>
        /// <param name="sellLeg">sellLeg.</param>
        /// <param name="buyLeg">buyLeg.</param>
        /// <param name="optionStrikePcnt">optionStrikePcnt.</param>
        /// <param name="optionStrikeRound">optionStrikeRound.</param>
        /// <param name="optionStrikePrice">optionStrikePrice.</param>
        /// <param name="optionMultiplier">optionMultiplier.</param>
        /// <param name="positionCurrency">positionCurrency.</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="quoteCurrency">quoteCurrency.</param>
        /// <param name="underlyingSymbol">underlyingSymbol.</param>
        /// <param name="reference">reference.</param>
        /// <param name="referenceSymbol">referenceSymbol.</param>
        /// <param name="calcInterval">calcInterval.</param>
        /// <param name="publishInterval">publishInterval.</param>
        /// <param name="publishTime">publishTime.</param>
        /// <param name="maxOrderQty">maxOrderQty.</param>
        /// <param name="maxPrice">maxPrice.</param>
        /// <param name="lotSize">lotSize.</param>
        /// <param name="tickSize">tickSize.</param>
        /// <param name="multiplier">multiplier.</param>
        /// <param name="settlCurrency">settlCurrency.</param>
        /// <param name="underlyingToPositionMultiplier">underlyingToPositionMultiplier.</param>
        /// <param name="underlyingToSettleMultiplier">underlyingToSettleMultiplier.</param>
        /// <param name="quoteToSettleMultiplier">quoteToSettleMultiplier.</param>
        /// <param name="isQuanto">isQuanto.</param>
        /// <param name="isInverse">isInverse.</param>
        /// <param name="initMargin">initMargin.</param>
        /// <param name="maintMargin">maintMargin.</param>
        /// <param name="riskLimit">riskLimit.</param>
        /// <param name="riskStep">riskStep.</param>
        /// <param name="limit">limit.</param>
        /// <param name="capped">capped.</param>
        /// <param name="taxed">taxed.</param>
        /// <param name="deleverage">deleverage.</param>
        /// <param name="makerFee">makerFee.</param>
        /// <param name="takerFee">takerFee.</param>
        /// <param name="settlementFee">settlementFee.</param>
        /// <param name="insuranceFee">insuranceFee.</param>
        /// <param name="fundingBaseSymbol">fundingBaseSymbol.</param>
        /// <param name="fundingQuoteSymbol">fundingQuoteSymbol.</param>
        /// <param name="fundingPremiumSymbol">fundingPremiumSymbol.</param>
        /// <param name="fundingTimestamp">fundingTimestamp.</param>
        /// <param name="fundingInterval">fundingInterval.</param>
        /// <param name="fundingRate">fundingRate.</param>
        /// <param name="indicativeFundingRate">indicativeFundingRate.</param>
        /// <param name="rebalanceTimestamp">rebalanceTimestamp.</param>
        /// <param name="rebalanceInterval">rebalanceInterval.</param>
        /// <param name="openingTimestamp">openingTimestamp.</param>
        /// <param name="closingTimestamp">closingTimestamp.</param>
        /// <param name="sessionInterval">sessionInterval.</param>
        /// <param name="prevClosePrice">prevClosePrice.</param>
        /// <param name="limitDownPrice">limitDownPrice.</param>
        /// <param name="limitUpPrice">limitUpPrice.</param>
        /// <param name="bankruptLimitDownPrice">bankruptLimitDownPrice.</param>
        /// <param name="bankruptLimitUpPrice">bankruptLimitUpPrice.</param>
        /// <param name="prevTotalVolume">prevTotalVolume.</param>
        /// <param name="totalVolume">totalVolume.</param>
        /// <param name="volume">volume.</param>
        /// <param name="volume24h">volume24h.</param>
        /// <param name="prevTotalTurnover">prevTotalTurnover.</param>
        /// <param name="totalTurnover">totalTurnover.</param>
        /// <param name="turnover">turnover.</param>
        /// <param name="turnover24h">turnover24h.</param>
        /// <param name="prevPrice24h">prevPrice24h.</param>
        /// <param name="vwap">vwap.</param>
        /// <param name="highPrice">highPrice.</param>
        /// <param name="lowPrice">lowPrice.</param>
        /// <param name="lastPrice">lastPrice.</param>
        /// <param name="lastPriceProtected">lastPriceProtected.</param>
        /// <param name="lastTickDirection">lastTickDirection.</param>
        /// <param name="lastChangePcnt">lastChangePcnt.</param>
        /// <param name="bidPrice">bidPrice.</param>
        /// <param name="midPrice">midPrice.</param>
        /// <param name="askPrice">askPrice.</param>
        /// <param name="impactBidPrice">impactBidPrice.</param>
        /// <param name="impactMidPrice">impactMidPrice.</param>
        /// <param name="impactAskPrice">impactAskPrice.</param>
        /// <param name="hasLiquidity">hasLiquidity.</param>
        /// <param name="openInterest">openInterest.</param>
        /// <param name="openValue">openValue.</param>
        /// <param name="fairMethod">fairMethod.</param>
        /// <param name="fairBasisRate">fairBasisRate.</param>
        /// <param name="fairBasis">fairBasis.</param>
        /// <param name="fairPrice">fairPrice.</param>
        /// <param name="markMethod">markMethod.</param>
        /// <param name="markPrice">markPrice.</param>
        /// <param name="indicativeTaxRate">indicativeTaxRate.</param>
        /// <param name="indicativeSettlePrice">indicativeSettlePrice.</param>
        /// <param name="optionUnderlyingPrice">optionUnderlyingPrice.</param>
        /// <param name="settledPrice">settledPrice.</param>
        /// <param name="timestamp">timestamp.</param>
        public Instrument(string symbol = default(string), string rootSymbol = default(string), string state = default(string), string typ = default(string), DateTime? listing = default(DateTime?), DateTime? front = default(DateTime?), DateTime? expiry = default(DateTime?), DateTime? settle = default(DateTime?), DateTime? relistInterval = default(DateTime?), string inverseLeg = default(string), string sellLeg = default(string), string buyLeg = default(string), double? optionStrikePcnt = default(double?), double? optionStrikeRound = default(double?), double? optionStrikePrice = default(double?), double? optionMultiplier = default(double?), string positionCurrency = default(string), string underlying = default(string), string quoteCurrency = default(string), string underlyingSymbol = default(string), string reference = default(string), string referenceSymbol = default(string), DateTime? calcInterval = default(DateTime?), DateTime? publishInterval = default(DateTime?), DateTime? publishTime = default(DateTime?), decimal? maxOrderQty = default(decimal?), double? maxPrice = default(double?), decimal? lotSize = default(decimal?), double? tickSize = default(double?), decimal? multiplier = default(decimal?), string settlCurrency = default(string), decimal? underlyingToPositionMultiplier = default(decimal?), decimal? underlyingToSettleMultiplier = default(decimal?), decimal? quoteToSettleMultiplier = default(decimal?), bool? isQuanto = default(bool?), bool? isInverse = default(bool?), double? initMargin = default(double?), double? maintMargin = default(double?), decimal? riskLimit = default(decimal?), decimal? riskStep = default(decimal?), double? limit = default(double?), bool? capped = default(bool?), bool? taxed = default(bool?), bool? deleverage = default(bool?), double? makerFee = default(double?), double? takerFee = default(double?), double? settlementFee = default(double?), double? insuranceFee = default(double?), string fundingBaseSymbol = default(string), string fundingQuoteSymbol = default(string), string fundingPremiumSymbol = default(string), DateTime? fundingTimestamp = default(DateTime?), DateTime? fundingInterval = default(DateTime?), double? fundingRate = default(double?), double? indicativeFundingRate = default(double?), DateTime? rebalanceTimestamp = default(DateTime?), DateTime? rebalanceInterval = default(DateTime?), DateTime? openingTimestamp = default(DateTime?), DateTime? closingTimestamp = default(DateTime?), DateTime? sessionInterval = default(DateTime?), double? prevClosePrice = default(double?), double? limitDownPrice = default(double?), double? limitUpPrice = default(double?), double? bankruptLimitDownPrice = default(double?), double? bankruptLimitUpPrice = default(double?), decimal? prevTotalVolume = default(decimal?), decimal? totalVolume = default(decimal?), decimal? volume = default(decimal?), decimal? volume24h = default(decimal?), decimal? prevTotalTurnover = default(decimal?), decimal? totalTurnover = default(decimal?), decimal? turnover = default(decimal?), decimal? turnover24h = default(decimal?), double? prevPrice24h = default(double?), double? vwap = default(double?), double? highPrice = default(double?), double? lowPrice = default(double?), double? lastPrice = default(double?), double? lastPriceProtected = default(double?), string lastTickDirection = default(string), double? lastChangePcnt = default(double?), double? bidPrice = default(double?), double? midPrice = default(double?), double? askPrice = default(double?), double? impactBidPrice = default(double?), double? impactMidPrice = default(double?), double? impactAskPrice = default(double?), bool? hasLiquidity = default(bool?), decimal? openInterest = default(decimal?), decimal? openValue = default(decimal?), string fairMethod = default(string), double? fairBasisRate = default(double?), double? fairBasis = default(double?), double? fairPrice = default(double?), string markMethod = default(string), double? markPrice = default(double?), double? indicativeTaxRate = default(double?), double? indicativeSettlePrice = default(double?), double? optionUnderlyingPrice = default(double?), double? settledPrice = default(double?), DateTime? timestamp = default(DateTime?))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for Instrument and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            this.RootSymbol = rootSymbol;
            this.State = state;
            this.Typ = typ;
            this.Listing = listing;
            this.Front = front;
            this.Expiry = expiry;
            this.Settle = settle;
            this.RelistInterval = relistInterval;
            this.InverseLeg = inverseLeg;
            this.SellLeg = sellLeg;
            this.BuyLeg = buyLeg;
            this.OptionStrikePcnt = optionStrikePcnt;
            this.OptionStrikeRound = optionStrikeRound;
            this.OptionStrikePrice = optionStrikePrice;
            this.OptionMultiplier = optionMultiplier;
            this.PositionCurrency = positionCurrency;
            this.Underlying = underlying;
            this.QuoteCurrency = quoteCurrency;
            this.UnderlyingSymbol = underlyingSymbol;
            this.Reference = reference;
            this.ReferenceSymbol = referenceSymbol;
            this.CalcInterval = calcInterval;
            this.PublishInterval = publishInterval;
            this.PublishTime = publishTime;
            this.MaxOrderQty = maxOrderQty;
            this.MaxPrice = maxPrice;
            this.LotSize = lotSize;
            this.TickSize = tickSize;
            this.Multiplier = multiplier;
            this.SettlCurrency = settlCurrency;
            this.UnderlyingToPositionMultiplier = underlyingToPositionMultiplier;
            this.UnderlyingToSettleMultiplier = underlyingToSettleMultiplier;
            this.QuoteToSettleMultiplier = quoteToSettleMultiplier;
            this.IsQuanto = isQuanto;
            this.IsInverse = isInverse;
            this.InitMargin = initMargin;
            this.MaintMargin = maintMargin;
            this.RiskLimit = riskLimit;
            this.RiskStep = riskStep;
            this.Limit = limit;
            this.Capped = capped;
            this.Taxed = taxed;
            this.Deleverage = deleverage;
            this.MakerFee = makerFee;
            this.TakerFee = takerFee;
            this.SettlementFee = settlementFee;
            this.InsuranceFee = insuranceFee;
            this.FundingBaseSymbol = fundingBaseSymbol;
            this.FundingQuoteSymbol = fundingQuoteSymbol;
            this.FundingPremiumSymbol = fundingPremiumSymbol;
            this.FundingTimestamp = fundingTimestamp;
            this.FundingInterval = fundingInterval;
            this.FundingRate = fundingRate;
            this.IndicativeFundingRate = indicativeFundingRate;
            this.RebalanceTimestamp = rebalanceTimestamp;
            this.RebalanceInterval = rebalanceInterval;
            this.OpeningTimestamp = openingTimestamp;
            this.ClosingTimestamp = closingTimestamp;
            this.SessionInterval = sessionInterval;
            this.PrevClosePrice = prevClosePrice;
            this.LimitDownPrice = limitDownPrice;
            this.LimitUpPrice = limitUpPrice;
            this.BankruptLimitDownPrice = bankruptLimitDownPrice;
            this.BankruptLimitUpPrice = bankruptLimitUpPrice;
            this.PrevTotalVolume = prevTotalVolume;
            this.TotalVolume = totalVolume;
            this.Volume = volume;
            this.Volume24h = volume24h;
            this.PrevTotalTurnover = prevTotalTurnover;
            this.TotalTurnover = totalTurnover;
            this.Turnover = turnover;
            this.Turnover24h = turnover24h;
            this.PrevPrice24h = prevPrice24h;
            this.Vwap = vwap;
            this.HighPrice = highPrice;
            this.LowPrice = lowPrice;
            this.LastPrice = lastPrice;
            this.LastPriceProtected = lastPriceProtected;
            this.LastTickDirection = lastTickDirection;
            this.LastChangePcnt = lastChangePcnt;
            this.BidPrice = bidPrice;
            this.MidPrice = midPrice;
            this.AskPrice = askPrice;
            this.ImpactBidPrice = impactBidPrice;
            this.ImpactMidPrice = impactMidPrice;
            this.ImpactAskPrice = impactAskPrice;
            this.HasLiquidity = hasLiquidity;
            this.OpenInterest = openInterest;
            this.OpenValue = openValue;
            this.FairMethod = fairMethod;
            this.FairBasisRate = fairBasisRate;
            this.FairBasis = fairBasis;
            this.FairPrice = fairPrice;
            this.MarkMethod = markMethod;
            this.MarkPrice = markPrice;
            this.IndicativeTaxRate = indicativeTaxRate;
            this.IndicativeSettlePrice = indicativeSettlePrice;
            this.OptionUnderlyingPrice = optionUnderlyingPrice;
            this.SettledPrice = settledPrice;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets RootSymbol
        /// </summary>
        [DataMember(Name="rootSymbol", EmitDefaultValue=false)]
        public string RootSymbol { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [DataMember(Name="typ", EmitDefaultValue=false)]
        public string Typ { get; set; }

        /// <summary>
        /// Gets or Sets Listing
        /// </summary>
        [DataMember(Name="listing", EmitDefaultValue=false)]
        public DateTime? Listing { get; set; }

        /// <summary>
        /// Gets or Sets Front
        /// </summary>
        [DataMember(Name="front", EmitDefaultValue=false)]
        public DateTime? Front { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Gets or Sets Settle
        /// </summary>
        [DataMember(Name="settle", EmitDefaultValue=false)]
        public DateTime? Settle { get; set; }

        /// <summary>
        /// Gets or Sets RelistInterval
        /// </summary>
        [DataMember(Name="relistInterval", EmitDefaultValue=false)]
        public DateTime? RelistInterval { get; set; }

        /// <summary>
        /// Gets or Sets InverseLeg
        /// </summary>
        [DataMember(Name="inverseLeg", EmitDefaultValue=false)]
        public string InverseLeg { get; set; }

        /// <summary>
        /// Gets or Sets SellLeg
        /// </summary>
        [DataMember(Name="sellLeg", EmitDefaultValue=false)]
        public string SellLeg { get; set; }

        /// <summary>
        /// Gets or Sets BuyLeg
        /// </summary>
        [DataMember(Name="buyLeg", EmitDefaultValue=false)]
        public string BuyLeg { get; set; }

        /// <summary>
        /// Gets or Sets OptionStrikePcnt
        /// </summary>
        [DataMember(Name="optionStrikePcnt", EmitDefaultValue=false)]
        public double? OptionStrikePcnt { get; set; }

        /// <summary>
        /// Gets or Sets OptionStrikeRound
        /// </summary>
        [DataMember(Name="optionStrikeRound", EmitDefaultValue=false)]
        public double? OptionStrikeRound { get; set; }

        /// <summary>
        /// Gets or Sets OptionStrikePrice
        /// </summary>
        [DataMember(Name="optionStrikePrice", EmitDefaultValue=false)]
        public double? OptionStrikePrice { get; set; }

        /// <summary>
        /// Gets or Sets OptionMultiplier
        /// </summary>
        [DataMember(Name="optionMultiplier", EmitDefaultValue=false)]
        public double? OptionMultiplier { get; set; }

        /// <summary>
        /// Gets or Sets PositionCurrency
        /// </summary>
        [DataMember(Name="positionCurrency", EmitDefaultValue=false)]
        public string PositionCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name="underlying", EmitDefaultValue=false)]
        public string Underlying { get; set; }

        /// <summary>
        /// Gets or Sets QuoteCurrency
        /// </summary>
        [DataMember(Name="quoteCurrency", EmitDefaultValue=false)]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingSymbol
        /// </summary>
        [DataMember(Name="underlyingSymbol", EmitDefaultValue=false)]
        public string UnderlyingSymbol { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceSymbol
        /// </summary>
        [DataMember(Name="referenceSymbol", EmitDefaultValue=false)]
        public string ReferenceSymbol { get; set; }

        /// <summary>
        /// Gets or Sets CalcInterval
        /// </summary>
        [DataMember(Name="calcInterval", EmitDefaultValue=false)]
        public DateTime? CalcInterval { get; set; }

        /// <summary>
        /// Gets or Sets PublishInterval
        /// </summary>
        [DataMember(Name="publishInterval", EmitDefaultValue=false)]
        public DateTime? PublishInterval { get; set; }

        /// <summary>
        /// Gets or Sets PublishTime
        /// </summary>
        [DataMember(Name="publishTime", EmitDefaultValue=false)]
        public DateTime? PublishTime { get; set; }

        /// <summary>
        /// Gets or Sets MaxOrderQty
        /// </summary>
        [DataMember(Name="maxOrderQty", EmitDefaultValue=false)]
        public decimal? MaxOrderQty { get; set; }

        /// <summary>
        /// Gets or Sets MaxPrice
        /// </summary>
        [DataMember(Name="maxPrice", EmitDefaultValue=false)]
        public double? MaxPrice { get; set; }

        /// <summary>
        /// Gets or Sets LotSize
        /// </summary>
        [DataMember(Name="lotSize", EmitDefaultValue=false)]
        public decimal? LotSize { get; set; }

        /// <summary>
        /// Gets or Sets TickSize
        /// </summary>
        [DataMember(Name="tickSize", EmitDefaultValue=false)]
        public double? TickSize { get; set; }

        /// <summary>
        /// Gets or Sets Multiplier
        /// </summary>
        [DataMember(Name="multiplier", EmitDefaultValue=false)]
        public decimal? Multiplier { get; set; }

        /// <summary>
        /// Gets or Sets SettlCurrency
        /// </summary>
        [DataMember(Name="settlCurrency", EmitDefaultValue=false)]
        public string SettlCurrency { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingToPositionMultiplier
        /// </summary>
        [DataMember(Name="underlyingToPositionMultiplier", EmitDefaultValue=false)]
        public decimal? UnderlyingToPositionMultiplier { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingToSettleMultiplier
        /// </summary>
        [DataMember(Name="underlyingToSettleMultiplier", EmitDefaultValue=false)]
        public decimal? UnderlyingToSettleMultiplier { get; set; }

        /// <summary>
        /// Gets or Sets QuoteToSettleMultiplier
        /// </summary>
        [DataMember(Name="quoteToSettleMultiplier", EmitDefaultValue=false)]
        public decimal? QuoteToSettleMultiplier { get; set; }

        /// <summary>
        /// Gets or Sets IsQuanto
        /// </summary>
        [DataMember(Name="isQuanto", EmitDefaultValue=false)]
        public bool? IsQuanto { get; set; }

        /// <summary>
        /// Gets or Sets IsInverse
        /// </summary>
        [DataMember(Name="isInverse", EmitDefaultValue=false)]
        public bool? IsInverse { get; set; }

        /// <summary>
        /// Gets or Sets InitMargin
        /// </summary>
        [DataMember(Name="initMargin", EmitDefaultValue=false)]
        public double? InitMargin { get; set; }

        /// <summary>
        /// Gets or Sets MaintMargin
        /// </summary>
        [DataMember(Name="maintMargin", EmitDefaultValue=false)]
        public double? MaintMargin { get; set; }

        /// <summary>
        /// Gets or Sets RiskLimit
        /// </summary>
        [DataMember(Name="riskLimit", EmitDefaultValue=false)]
        public decimal? RiskLimit { get; set; }

        /// <summary>
        /// Gets or Sets RiskStep
        /// </summary>
        [DataMember(Name="riskStep", EmitDefaultValue=false)]
        public decimal? RiskStep { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public double? Limit { get; set; }

        /// <summary>
        /// Gets or Sets Capped
        /// </summary>
        [DataMember(Name="capped", EmitDefaultValue=false)]
        public bool? Capped { get; set; }

        /// <summary>
        /// Gets or Sets Taxed
        /// </summary>
        [DataMember(Name="taxed", EmitDefaultValue=false)]
        public bool? Taxed { get; set; }

        /// <summary>
        /// Gets or Sets Deleverage
        /// </summary>
        [DataMember(Name="deleverage", EmitDefaultValue=false)]
        public bool? Deleverage { get; set; }

        /// <summary>
        /// Gets or Sets MakerFee
        /// </summary>
        [DataMember(Name="makerFee", EmitDefaultValue=false)]
        public double? MakerFee { get; set; }

        /// <summary>
        /// Gets or Sets TakerFee
        /// </summary>
        [DataMember(Name="takerFee", EmitDefaultValue=false)]
        public double? TakerFee { get; set; }

        /// <summary>
        /// Gets or Sets SettlementFee
        /// </summary>
        [DataMember(Name="settlementFee", EmitDefaultValue=false)]
        public double? SettlementFee { get; set; }

        /// <summary>
        /// Gets or Sets InsuranceFee
        /// </summary>
        [DataMember(Name="insuranceFee", EmitDefaultValue=false)]
        public double? InsuranceFee { get; set; }

        /// <summary>
        /// Gets or Sets FundingBaseSymbol
        /// </summary>
        [DataMember(Name="fundingBaseSymbol", EmitDefaultValue=false)]
        public string FundingBaseSymbol { get; set; }

        /// <summary>
        /// Gets or Sets FundingQuoteSymbol
        /// </summary>
        [DataMember(Name="fundingQuoteSymbol", EmitDefaultValue=false)]
        public string FundingQuoteSymbol { get; set; }

        /// <summary>
        /// Gets or Sets FundingPremiumSymbol
        /// </summary>
        [DataMember(Name="fundingPremiumSymbol", EmitDefaultValue=false)]
        public string FundingPremiumSymbol { get; set; }

        /// <summary>
        /// Gets or Sets FundingTimestamp
        /// </summary>
        [DataMember(Name="fundingTimestamp", EmitDefaultValue=false)]
        public DateTime? FundingTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets FundingInterval
        /// </summary>
        [DataMember(Name="fundingInterval", EmitDefaultValue=false)]
        public DateTime? FundingInterval { get; set; }

        /// <summary>
        /// Gets or Sets FundingRate
        /// </summary>
        [DataMember(Name="fundingRate", EmitDefaultValue=false)]
        public double? FundingRate { get; set; }

        /// <summary>
        /// Gets or Sets IndicativeFundingRate
        /// </summary>
        [DataMember(Name="indicativeFundingRate", EmitDefaultValue=false)]
        public double? IndicativeFundingRate { get; set; }

        /// <summary>
        /// Gets or Sets RebalanceTimestamp
        /// </summary>
        [DataMember(Name="rebalanceTimestamp", EmitDefaultValue=false)]
        public DateTime? RebalanceTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets RebalanceInterval
        /// </summary>
        [DataMember(Name="rebalanceInterval", EmitDefaultValue=false)]
        public DateTime? RebalanceInterval { get; set; }

        /// <summary>
        /// Gets or Sets OpeningTimestamp
        /// </summary>
        [DataMember(Name="openingTimestamp", EmitDefaultValue=false)]
        public DateTime? OpeningTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets ClosingTimestamp
        /// </summary>
        [DataMember(Name="closingTimestamp", EmitDefaultValue=false)]
        public DateTime? ClosingTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets SessionInterval
        /// </summary>
        [DataMember(Name="sessionInterval", EmitDefaultValue=false)]
        public DateTime? SessionInterval { get; set; }

        /// <summary>
        /// Gets or Sets PrevClosePrice
        /// </summary>
        [DataMember(Name="prevClosePrice", EmitDefaultValue=false)]
        public double? PrevClosePrice { get; set; }

        /// <summary>
        /// Gets or Sets LimitDownPrice
        /// </summary>
        [DataMember(Name="limitDownPrice", EmitDefaultValue=false)]
        public double? LimitDownPrice { get; set; }

        /// <summary>
        /// Gets or Sets LimitUpPrice
        /// </summary>
        [DataMember(Name="limitUpPrice", EmitDefaultValue=false)]
        public double? LimitUpPrice { get; set; }

        /// <summary>
        /// Gets or Sets BankruptLimitDownPrice
        /// </summary>
        [DataMember(Name="bankruptLimitDownPrice", EmitDefaultValue=false)]
        public double? BankruptLimitDownPrice { get; set; }

        /// <summary>
        /// Gets or Sets BankruptLimitUpPrice
        /// </summary>
        [DataMember(Name="bankruptLimitUpPrice", EmitDefaultValue=false)]
        public double? BankruptLimitUpPrice { get; set; }

        /// <summary>
        /// Gets or Sets PrevTotalVolume
        /// </summary>
        [DataMember(Name="prevTotalVolume", EmitDefaultValue=false)]
        public decimal? PrevTotalVolume { get; set; }

        /// <summary>
        /// Gets or Sets TotalVolume
        /// </summary>
        [DataMember(Name="totalVolume", EmitDefaultValue=false)]
        public decimal? TotalVolume { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public decimal? Volume { get; set; }

        /// <summary>
        /// Gets or Sets Volume24h
        /// </summary>
        [DataMember(Name="volume24h", EmitDefaultValue=false)]
        public decimal? Volume24h { get; set; }

        /// <summary>
        /// Gets or Sets PrevTotalTurnover
        /// </summary>
        [DataMember(Name="prevTotalTurnover", EmitDefaultValue=false)]
        public decimal? PrevTotalTurnover { get; set; }

        /// <summary>
        /// Gets or Sets TotalTurnover
        /// </summary>
        [DataMember(Name="totalTurnover", EmitDefaultValue=false)]
        public decimal? TotalTurnover { get; set; }

        /// <summary>
        /// Gets or Sets Turnover
        /// </summary>
        [DataMember(Name="turnover", EmitDefaultValue=false)]
        public decimal? Turnover { get; set; }

        /// <summary>
        /// Gets or Sets Turnover24h
        /// </summary>
        [DataMember(Name="turnover24h", EmitDefaultValue=false)]
        public decimal? Turnover24h { get; set; }

        /// <summary>
        /// Gets or Sets PrevPrice24h
        /// </summary>
        [DataMember(Name="prevPrice24h", EmitDefaultValue=false)]
        public double? PrevPrice24h { get; set; }

        /// <summary>
        /// Gets or Sets Vwap
        /// </summary>
        [DataMember(Name="vwap", EmitDefaultValue=false)]
        public double? Vwap { get; set; }

        /// <summary>
        /// Gets or Sets HighPrice
        /// </summary>
        [DataMember(Name="highPrice", EmitDefaultValue=false)]
        public double? HighPrice { get; set; }

        /// <summary>
        /// Gets or Sets LowPrice
        /// </summary>
        [DataMember(Name="lowPrice", EmitDefaultValue=false)]
        public double? LowPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastPrice
        /// </summary>
        [DataMember(Name="lastPrice", EmitDefaultValue=false)]
        public double? LastPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastPriceProtected
        /// </summary>
        [DataMember(Name="lastPriceProtected", EmitDefaultValue=false)]
        public double? LastPriceProtected { get; set; }

        /// <summary>
        /// Gets or Sets LastTickDirection
        /// </summary>
        [DataMember(Name="lastTickDirection", EmitDefaultValue=false)]
        public string LastTickDirection { get; set; }

        /// <summary>
        /// Gets or Sets LastChangePcnt
        /// </summary>
        [DataMember(Name="lastChangePcnt", EmitDefaultValue=false)]
        public double? LastChangePcnt { get; set; }

        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name="bidPrice", EmitDefaultValue=false)]
        public double? BidPrice { get; set; }

        /// <summary>
        /// Gets or Sets MidPrice
        /// </summary>
        [DataMember(Name="midPrice", EmitDefaultValue=false)]
        public double? MidPrice { get; set; }

        /// <summary>
        /// Gets or Sets AskPrice
        /// </summary>
        [DataMember(Name="askPrice", EmitDefaultValue=false)]
        public double? AskPrice { get; set; }

        /// <summary>
        /// Gets or Sets ImpactBidPrice
        /// </summary>
        [DataMember(Name="impactBidPrice", EmitDefaultValue=false)]
        public double? ImpactBidPrice { get; set; }

        /// <summary>
        /// Gets or Sets ImpactMidPrice
        /// </summary>
        [DataMember(Name="impactMidPrice", EmitDefaultValue=false)]
        public double? ImpactMidPrice { get; set; }

        /// <summary>
        /// Gets or Sets ImpactAskPrice
        /// </summary>
        [DataMember(Name="impactAskPrice", EmitDefaultValue=false)]
        public double? ImpactAskPrice { get; set; }

        /// <summary>
        /// Gets or Sets HasLiquidity
        /// </summary>
        [DataMember(Name="hasLiquidity", EmitDefaultValue=false)]
        public bool? HasLiquidity { get; set; }

        /// <summary>
        /// Gets or Sets OpenInterest
        /// </summary>
        [DataMember(Name="openInterest", EmitDefaultValue=false)]
        public decimal? OpenInterest { get; set; }

        /// <summary>
        /// Gets or Sets OpenValue
        /// </summary>
        [DataMember(Name="openValue", EmitDefaultValue=false)]
        public decimal? OpenValue { get; set; }

        /// <summary>
        /// Gets or Sets FairMethod
        /// </summary>
        [DataMember(Name="fairMethod", EmitDefaultValue=false)]
        public string FairMethod { get; set; }

        /// <summary>
        /// Gets or Sets FairBasisRate
        /// </summary>
        [DataMember(Name="fairBasisRate", EmitDefaultValue=false)]
        public double? FairBasisRate { get; set; }

        /// <summary>
        /// Gets or Sets FairBasis
        /// </summary>
        [DataMember(Name="fairBasis", EmitDefaultValue=false)]
        public double? FairBasis { get; set; }

        /// <summary>
        /// Gets or Sets FairPrice
        /// </summary>
        [DataMember(Name="fairPrice", EmitDefaultValue=false)]
        public double? FairPrice { get; set; }

        /// <summary>
        /// Gets or Sets MarkMethod
        /// </summary>
        [DataMember(Name="markMethod", EmitDefaultValue=false)]
        public string MarkMethod { get; set; }

        /// <summary>
        /// Gets or Sets MarkPrice
        /// </summary>
        [DataMember(Name="markPrice", EmitDefaultValue=false)]
        public double? MarkPrice { get; set; }

        /// <summary>
        /// Gets or Sets IndicativeTaxRate
        /// </summary>
        [DataMember(Name="indicativeTaxRate", EmitDefaultValue=false)]
        public double? IndicativeTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets IndicativeSettlePrice
        /// </summary>
        [DataMember(Name="indicativeSettlePrice", EmitDefaultValue=false)]
        public double? IndicativeSettlePrice { get; set; }

        /// <summary>
        /// Gets or Sets OptionUnderlyingPrice
        /// </summary>
        [DataMember(Name="optionUnderlyingPrice", EmitDefaultValue=false)]
        public double? OptionUnderlyingPrice { get; set; }

        /// <summary>
        /// Gets or Sets SettledPrice
        /// </summary>
        [DataMember(Name="settledPrice", EmitDefaultValue=false)]
        public double? SettledPrice { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Instrument {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  RootSymbol: ").Append(RootSymbol).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Typ: ").Append(Typ).Append("\n");
            sb.Append("  Listing: ").Append(Listing).Append("\n");
            sb.Append("  Front: ").Append(Front).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Settle: ").Append(Settle).Append("\n");
            sb.Append("  RelistInterval: ").Append(RelistInterval).Append("\n");
            sb.Append("  InverseLeg: ").Append(InverseLeg).Append("\n");
            sb.Append("  SellLeg: ").Append(SellLeg).Append("\n");
            sb.Append("  BuyLeg: ").Append(BuyLeg).Append("\n");
            sb.Append("  OptionStrikePcnt: ").Append(OptionStrikePcnt).Append("\n");
            sb.Append("  OptionStrikeRound: ").Append(OptionStrikeRound).Append("\n");
            sb.Append("  OptionStrikePrice: ").Append(OptionStrikePrice).Append("\n");
            sb.Append("  OptionMultiplier: ").Append(OptionMultiplier).Append("\n");
            sb.Append("  PositionCurrency: ").Append(PositionCurrency).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  QuoteCurrency: ").Append(QuoteCurrency).Append("\n");
            sb.Append("  UnderlyingSymbol: ").Append(UnderlyingSymbol).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceSymbol: ").Append(ReferenceSymbol).Append("\n");
            sb.Append("  CalcInterval: ").Append(CalcInterval).Append("\n");
            sb.Append("  PublishInterval: ").Append(PublishInterval).Append("\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  MaxOrderQty: ").Append(MaxOrderQty).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  LotSize: ").Append(LotSize).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  SettlCurrency: ").Append(SettlCurrency).Append("\n");
            sb.Append("  UnderlyingToPositionMultiplier: ").Append(UnderlyingToPositionMultiplier).Append("\n");
            sb.Append("  UnderlyingToSettleMultiplier: ").Append(UnderlyingToSettleMultiplier).Append("\n");
            sb.Append("  QuoteToSettleMultiplier: ").Append(QuoteToSettleMultiplier).Append("\n");
            sb.Append("  IsQuanto: ").Append(IsQuanto).Append("\n");
            sb.Append("  IsInverse: ").Append(IsInverse).Append("\n");
            sb.Append("  InitMargin: ").Append(InitMargin).Append("\n");
            sb.Append("  MaintMargin: ").Append(MaintMargin).Append("\n");
            sb.Append("  RiskLimit: ").Append(RiskLimit).Append("\n");
            sb.Append("  RiskStep: ").Append(RiskStep).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Capped: ").Append(Capped).Append("\n");
            sb.Append("  Taxed: ").Append(Taxed).Append("\n");
            sb.Append("  Deleverage: ").Append(Deleverage).Append("\n");
            sb.Append("  MakerFee: ").Append(MakerFee).Append("\n");
            sb.Append("  TakerFee: ").Append(TakerFee).Append("\n");
            sb.Append("  SettlementFee: ").Append(SettlementFee).Append("\n");
            sb.Append("  InsuranceFee: ").Append(InsuranceFee).Append("\n");
            sb.Append("  FundingBaseSymbol: ").Append(FundingBaseSymbol).Append("\n");
            sb.Append("  FundingQuoteSymbol: ").Append(FundingQuoteSymbol).Append("\n");
            sb.Append("  FundingPremiumSymbol: ").Append(FundingPremiumSymbol).Append("\n");
            sb.Append("  FundingTimestamp: ").Append(FundingTimestamp).Append("\n");
            sb.Append("  FundingInterval: ").Append(FundingInterval).Append("\n");
            sb.Append("  FundingRate: ").Append(FundingRate).Append("\n");
            sb.Append("  IndicativeFundingRate: ").Append(IndicativeFundingRate).Append("\n");
            sb.Append("  RebalanceTimestamp: ").Append(RebalanceTimestamp).Append("\n");
            sb.Append("  RebalanceInterval: ").Append(RebalanceInterval).Append("\n");
            sb.Append("  OpeningTimestamp: ").Append(OpeningTimestamp).Append("\n");
            sb.Append("  ClosingTimestamp: ").Append(ClosingTimestamp).Append("\n");
            sb.Append("  SessionInterval: ").Append(SessionInterval).Append("\n");
            sb.Append("  PrevClosePrice: ").Append(PrevClosePrice).Append("\n");
            sb.Append("  LimitDownPrice: ").Append(LimitDownPrice).Append("\n");
            sb.Append("  LimitUpPrice: ").Append(LimitUpPrice).Append("\n");
            sb.Append("  BankruptLimitDownPrice: ").Append(BankruptLimitDownPrice).Append("\n");
            sb.Append("  BankruptLimitUpPrice: ").Append(BankruptLimitUpPrice).Append("\n");
            sb.Append("  PrevTotalVolume: ").Append(PrevTotalVolume).Append("\n");
            sb.Append("  TotalVolume: ").Append(TotalVolume).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Volume24h: ").Append(Volume24h).Append("\n");
            sb.Append("  PrevTotalTurnover: ").Append(PrevTotalTurnover).Append("\n");
            sb.Append("  TotalTurnover: ").Append(TotalTurnover).Append("\n");
            sb.Append("  Turnover: ").Append(Turnover).Append("\n");
            sb.Append("  Turnover24h: ").Append(Turnover24h).Append("\n");
            sb.Append("  PrevPrice24h: ").Append(PrevPrice24h).Append("\n");
            sb.Append("  Vwap: ").Append(Vwap).Append("\n");
            sb.Append("  HighPrice: ").Append(HighPrice).Append("\n");
            sb.Append("  LowPrice: ").Append(LowPrice).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  LastPriceProtected: ").Append(LastPriceProtected).Append("\n");
            sb.Append("  LastTickDirection: ").Append(LastTickDirection).Append("\n");
            sb.Append("  LastChangePcnt: ").Append(LastChangePcnt).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  MidPrice: ").Append(MidPrice).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  ImpactBidPrice: ").Append(ImpactBidPrice).Append("\n");
            sb.Append("  ImpactMidPrice: ").Append(ImpactMidPrice).Append("\n");
            sb.Append("  ImpactAskPrice: ").Append(ImpactAskPrice).Append("\n");
            sb.Append("  HasLiquidity: ").Append(HasLiquidity).Append("\n");
            sb.Append("  OpenInterest: ").Append(OpenInterest).Append("\n");
            sb.Append("  OpenValue: ").Append(OpenValue).Append("\n");
            sb.Append("  FairMethod: ").Append(FairMethod).Append("\n");
            sb.Append("  FairBasisRate: ").Append(FairBasisRate).Append("\n");
            sb.Append("  FairBasis: ").Append(FairBasis).Append("\n");
            sb.Append("  FairPrice: ").Append(FairPrice).Append("\n");
            sb.Append("  MarkMethod: ").Append(MarkMethod).Append("\n");
            sb.Append("  MarkPrice: ").Append(MarkPrice).Append("\n");
            sb.Append("  IndicativeTaxRate: ").Append(IndicativeTaxRate).Append("\n");
            sb.Append("  IndicativeSettlePrice: ").Append(IndicativeSettlePrice).Append("\n");
            sb.Append("  OptionUnderlyingPrice: ").Append(OptionUnderlyingPrice).Append("\n");
            sb.Append("  SettledPrice: ").Append(SettledPrice).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Instrument);
        }

        /// <summary>
        /// Returns true if Instrument instances are equal
        /// </summary>
        /// <param name="input">Instance of Instrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instrument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.RootSymbol == input.RootSymbol ||
                    (this.RootSymbol != null &&
                    this.RootSymbol.Equals(input.RootSymbol))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Typ == input.Typ ||
                    (this.Typ != null &&
                    this.Typ.Equals(input.Typ))
                ) && 
                (
                    this.Listing == input.Listing ||
                    (this.Listing != null &&
                    this.Listing.Equals(input.Listing))
                ) && 
                (
                    this.Front == input.Front ||
                    (this.Front != null &&
                    this.Front.Equals(input.Front))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.Settle == input.Settle ||
                    (this.Settle != null &&
                    this.Settle.Equals(input.Settle))
                ) && 
                (
                    this.RelistInterval == input.RelistInterval ||
                    (this.RelistInterval != null &&
                    this.RelistInterval.Equals(input.RelistInterval))
                ) && 
                (
                    this.InverseLeg == input.InverseLeg ||
                    (this.InverseLeg != null &&
                    this.InverseLeg.Equals(input.InverseLeg))
                ) && 
                (
                    this.SellLeg == input.SellLeg ||
                    (this.SellLeg != null &&
                    this.SellLeg.Equals(input.SellLeg))
                ) && 
                (
                    this.BuyLeg == input.BuyLeg ||
                    (this.BuyLeg != null &&
                    this.BuyLeg.Equals(input.BuyLeg))
                ) && 
                (
                    this.OptionStrikePcnt == input.OptionStrikePcnt ||
                    (this.OptionStrikePcnt != null &&
                    this.OptionStrikePcnt.Equals(input.OptionStrikePcnt))
                ) && 
                (
                    this.OptionStrikeRound == input.OptionStrikeRound ||
                    (this.OptionStrikeRound != null &&
                    this.OptionStrikeRound.Equals(input.OptionStrikeRound))
                ) && 
                (
                    this.OptionStrikePrice == input.OptionStrikePrice ||
                    (this.OptionStrikePrice != null &&
                    this.OptionStrikePrice.Equals(input.OptionStrikePrice))
                ) && 
                (
                    this.OptionMultiplier == input.OptionMultiplier ||
                    (this.OptionMultiplier != null &&
                    this.OptionMultiplier.Equals(input.OptionMultiplier))
                ) && 
                (
                    this.PositionCurrency == input.PositionCurrency ||
                    (this.PositionCurrency != null &&
                    this.PositionCurrency.Equals(input.PositionCurrency))
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.QuoteCurrency == input.QuoteCurrency ||
                    (this.QuoteCurrency != null &&
                    this.QuoteCurrency.Equals(input.QuoteCurrency))
                ) && 
                (
                    this.UnderlyingSymbol == input.UnderlyingSymbol ||
                    (this.UnderlyingSymbol != null &&
                    this.UnderlyingSymbol.Equals(input.UnderlyingSymbol))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ReferenceSymbol == input.ReferenceSymbol ||
                    (this.ReferenceSymbol != null &&
                    this.ReferenceSymbol.Equals(input.ReferenceSymbol))
                ) && 
                (
                    this.CalcInterval == input.CalcInterval ||
                    (this.CalcInterval != null &&
                    this.CalcInterval.Equals(input.CalcInterval))
                ) && 
                (
                    this.PublishInterval == input.PublishInterval ||
                    (this.PublishInterval != null &&
                    this.PublishInterval.Equals(input.PublishInterval))
                ) && 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.MaxOrderQty == input.MaxOrderQty ||
                    (this.MaxOrderQty != null &&
                    this.MaxOrderQty.Equals(input.MaxOrderQty))
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    (this.MaxPrice != null &&
                    this.MaxPrice.Equals(input.MaxPrice))
                ) && 
                (
                    this.LotSize == input.LotSize ||
                    (this.LotSize != null &&
                    this.LotSize.Equals(input.LotSize))
                ) && 
                (
                    this.TickSize == input.TickSize ||
                    (this.TickSize != null &&
                    this.TickSize.Equals(input.TickSize))
                ) && 
                (
                    this.Multiplier == input.Multiplier ||
                    (this.Multiplier != null &&
                    this.Multiplier.Equals(input.Multiplier))
                ) && 
                (
                    this.SettlCurrency == input.SettlCurrency ||
                    (this.SettlCurrency != null &&
                    this.SettlCurrency.Equals(input.SettlCurrency))
                ) && 
                (
                    this.UnderlyingToPositionMultiplier == input.UnderlyingToPositionMultiplier ||
                    (this.UnderlyingToPositionMultiplier != null &&
                    this.UnderlyingToPositionMultiplier.Equals(input.UnderlyingToPositionMultiplier))
                ) && 
                (
                    this.UnderlyingToSettleMultiplier == input.UnderlyingToSettleMultiplier ||
                    (this.UnderlyingToSettleMultiplier != null &&
                    this.UnderlyingToSettleMultiplier.Equals(input.UnderlyingToSettleMultiplier))
                ) && 
                (
                    this.QuoteToSettleMultiplier == input.QuoteToSettleMultiplier ||
                    (this.QuoteToSettleMultiplier != null &&
                    this.QuoteToSettleMultiplier.Equals(input.QuoteToSettleMultiplier))
                ) && 
                (
                    this.IsQuanto == input.IsQuanto ||
                    (this.IsQuanto != null &&
                    this.IsQuanto.Equals(input.IsQuanto))
                ) && 
                (
                    this.IsInverse == input.IsInverse ||
                    (this.IsInverse != null &&
                    this.IsInverse.Equals(input.IsInverse))
                ) && 
                (
                    this.InitMargin == input.InitMargin ||
                    (this.InitMargin != null &&
                    this.InitMargin.Equals(input.InitMargin))
                ) && 
                (
                    this.MaintMargin == input.MaintMargin ||
                    (this.MaintMargin != null &&
                    this.MaintMargin.Equals(input.MaintMargin))
                ) && 
                (
                    this.RiskLimit == input.RiskLimit ||
                    (this.RiskLimit != null &&
                    this.RiskLimit.Equals(input.RiskLimit))
                ) && 
                (
                    this.RiskStep == input.RiskStep ||
                    (this.RiskStep != null &&
                    this.RiskStep.Equals(input.RiskStep))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Capped == input.Capped ||
                    (this.Capped != null &&
                    this.Capped.Equals(input.Capped))
                ) && 
                (
                    this.Taxed == input.Taxed ||
                    (this.Taxed != null &&
                    this.Taxed.Equals(input.Taxed))
                ) && 
                (
                    this.Deleverage == input.Deleverage ||
                    (this.Deleverage != null &&
                    this.Deleverage.Equals(input.Deleverage))
                ) && 
                (
                    this.MakerFee == input.MakerFee ||
                    (this.MakerFee != null &&
                    this.MakerFee.Equals(input.MakerFee))
                ) && 
                (
                    this.TakerFee == input.TakerFee ||
                    (this.TakerFee != null &&
                    this.TakerFee.Equals(input.TakerFee))
                ) && 
                (
                    this.SettlementFee == input.SettlementFee ||
                    (this.SettlementFee != null &&
                    this.SettlementFee.Equals(input.SettlementFee))
                ) && 
                (
                    this.InsuranceFee == input.InsuranceFee ||
                    (this.InsuranceFee != null &&
                    this.InsuranceFee.Equals(input.InsuranceFee))
                ) && 
                (
                    this.FundingBaseSymbol == input.FundingBaseSymbol ||
                    (this.FundingBaseSymbol != null &&
                    this.FundingBaseSymbol.Equals(input.FundingBaseSymbol))
                ) && 
                (
                    this.FundingQuoteSymbol == input.FundingQuoteSymbol ||
                    (this.FundingQuoteSymbol != null &&
                    this.FundingQuoteSymbol.Equals(input.FundingQuoteSymbol))
                ) && 
                (
                    this.FundingPremiumSymbol == input.FundingPremiumSymbol ||
                    (this.FundingPremiumSymbol != null &&
                    this.FundingPremiumSymbol.Equals(input.FundingPremiumSymbol))
                ) && 
                (
                    this.FundingTimestamp == input.FundingTimestamp ||
                    (this.FundingTimestamp != null &&
                    this.FundingTimestamp.Equals(input.FundingTimestamp))
                ) && 
                (
                    this.FundingInterval == input.FundingInterval ||
                    (this.FundingInterval != null &&
                    this.FundingInterval.Equals(input.FundingInterval))
                ) && 
                (
                    this.FundingRate == input.FundingRate ||
                    (this.FundingRate != null &&
                    this.FundingRate.Equals(input.FundingRate))
                ) && 
                (
                    this.IndicativeFundingRate == input.IndicativeFundingRate ||
                    (this.IndicativeFundingRate != null &&
                    this.IndicativeFundingRate.Equals(input.IndicativeFundingRate))
                ) && 
                (
                    this.RebalanceTimestamp == input.RebalanceTimestamp ||
                    (this.RebalanceTimestamp != null &&
                    this.RebalanceTimestamp.Equals(input.RebalanceTimestamp))
                ) && 
                (
                    this.RebalanceInterval == input.RebalanceInterval ||
                    (this.RebalanceInterval != null &&
                    this.RebalanceInterval.Equals(input.RebalanceInterval))
                ) && 
                (
                    this.OpeningTimestamp == input.OpeningTimestamp ||
                    (this.OpeningTimestamp != null &&
                    this.OpeningTimestamp.Equals(input.OpeningTimestamp))
                ) && 
                (
                    this.ClosingTimestamp == input.ClosingTimestamp ||
                    (this.ClosingTimestamp != null &&
                    this.ClosingTimestamp.Equals(input.ClosingTimestamp))
                ) && 
                (
                    this.SessionInterval == input.SessionInterval ||
                    (this.SessionInterval != null &&
                    this.SessionInterval.Equals(input.SessionInterval))
                ) && 
                (
                    this.PrevClosePrice == input.PrevClosePrice ||
                    (this.PrevClosePrice != null &&
                    this.PrevClosePrice.Equals(input.PrevClosePrice))
                ) && 
                (
                    this.LimitDownPrice == input.LimitDownPrice ||
                    (this.LimitDownPrice != null &&
                    this.LimitDownPrice.Equals(input.LimitDownPrice))
                ) && 
                (
                    this.LimitUpPrice == input.LimitUpPrice ||
                    (this.LimitUpPrice != null &&
                    this.LimitUpPrice.Equals(input.LimitUpPrice))
                ) && 
                (
                    this.BankruptLimitDownPrice == input.BankruptLimitDownPrice ||
                    (this.BankruptLimitDownPrice != null &&
                    this.BankruptLimitDownPrice.Equals(input.BankruptLimitDownPrice))
                ) && 
                (
                    this.BankruptLimitUpPrice == input.BankruptLimitUpPrice ||
                    (this.BankruptLimitUpPrice != null &&
                    this.BankruptLimitUpPrice.Equals(input.BankruptLimitUpPrice))
                ) && 
                (
                    this.PrevTotalVolume == input.PrevTotalVolume ||
                    (this.PrevTotalVolume != null &&
                    this.PrevTotalVolume.Equals(input.PrevTotalVolume))
                ) && 
                (
                    this.TotalVolume == input.TotalVolume ||
                    (this.TotalVolume != null &&
                    this.TotalVolume.Equals(input.TotalVolume))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Volume24h == input.Volume24h ||
                    (this.Volume24h != null &&
                    this.Volume24h.Equals(input.Volume24h))
                ) && 
                (
                    this.PrevTotalTurnover == input.PrevTotalTurnover ||
                    (this.PrevTotalTurnover != null &&
                    this.PrevTotalTurnover.Equals(input.PrevTotalTurnover))
                ) && 
                (
                    this.TotalTurnover == input.TotalTurnover ||
                    (this.TotalTurnover != null &&
                    this.TotalTurnover.Equals(input.TotalTurnover))
                ) && 
                (
                    this.Turnover == input.Turnover ||
                    (this.Turnover != null &&
                    this.Turnover.Equals(input.Turnover))
                ) && 
                (
                    this.Turnover24h == input.Turnover24h ||
                    (this.Turnover24h != null &&
                    this.Turnover24h.Equals(input.Turnover24h))
                ) && 
                (
                    this.PrevPrice24h == input.PrevPrice24h ||
                    (this.PrevPrice24h != null &&
                    this.PrevPrice24h.Equals(input.PrevPrice24h))
                ) && 
                (
                    this.Vwap == input.Vwap ||
                    (this.Vwap != null &&
                    this.Vwap.Equals(input.Vwap))
                ) && 
                (
                    this.HighPrice == input.HighPrice ||
                    (this.HighPrice != null &&
                    this.HighPrice.Equals(input.HighPrice))
                ) && 
                (
                    this.LowPrice == input.LowPrice ||
                    (this.LowPrice != null &&
                    this.LowPrice.Equals(input.LowPrice))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                ) && 
                (
                    this.LastPriceProtected == input.LastPriceProtected ||
                    (this.LastPriceProtected != null &&
                    this.LastPriceProtected.Equals(input.LastPriceProtected))
                ) && 
                (
                    this.LastTickDirection == input.LastTickDirection ||
                    (this.LastTickDirection != null &&
                    this.LastTickDirection.Equals(input.LastTickDirection))
                ) && 
                (
                    this.LastChangePcnt == input.LastChangePcnt ||
                    (this.LastChangePcnt != null &&
                    this.LastChangePcnt.Equals(input.LastChangePcnt))
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    (this.BidPrice != null &&
                    this.BidPrice.Equals(input.BidPrice))
                ) && 
                (
                    this.MidPrice == input.MidPrice ||
                    (this.MidPrice != null &&
                    this.MidPrice.Equals(input.MidPrice))
                ) && 
                (
                    this.AskPrice == input.AskPrice ||
                    (this.AskPrice != null &&
                    this.AskPrice.Equals(input.AskPrice))
                ) && 
                (
                    this.ImpactBidPrice == input.ImpactBidPrice ||
                    (this.ImpactBidPrice != null &&
                    this.ImpactBidPrice.Equals(input.ImpactBidPrice))
                ) && 
                (
                    this.ImpactMidPrice == input.ImpactMidPrice ||
                    (this.ImpactMidPrice != null &&
                    this.ImpactMidPrice.Equals(input.ImpactMidPrice))
                ) && 
                (
                    this.ImpactAskPrice == input.ImpactAskPrice ||
                    (this.ImpactAskPrice != null &&
                    this.ImpactAskPrice.Equals(input.ImpactAskPrice))
                ) && 
                (
                    this.HasLiquidity == input.HasLiquidity ||
                    (this.HasLiquidity != null &&
                    this.HasLiquidity.Equals(input.HasLiquidity))
                ) && 
                (
                    this.OpenInterest == input.OpenInterest ||
                    (this.OpenInterest != null &&
                    this.OpenInterest.Equals(input.OpenInterest))
                ) && 
                (
                    this.OpenValue == input.OpenValue ||
                    (this.OpenValue != null &&
                    this.OpenValue.Equals(input.OpenValue))
                ) && 
                (
                    this.FairMethod == input.FairMethod ||
                    (this.FairMethod != null &&
                    this.FairMethod.Equals(input.FairMethod))
                ) && 
                (
                    this.FairBasisRate == input.FairBasisRate ||
                    (this.FairBasisRate != null &&
                    this.FairBasisRate.Equals(input.FairBasisRate))
                ) && 
                (
                    this.FairBasis == input.FairBasis ||
                    (this.FairBasis != null &&
                    this.FairBasis.Equals(input.FairBasis))
                ) && 
                (
                    this.FairPrice == input.FairPrice ||
                    (this.FairPrice != null &&
                    this.FairPrice.Equals(input.FairPrice))
                ) && 
                (
                    this.MarkMethod == input.MarkMethod ||
                    (this.MarkMethod != null &&
                    this.MarkMethod.Equals(input.MarkMethod))
                ) && 
                (
                    this.MarkPrice == input.MarkPrice ||
                    (this.MarkPrice != null &&
                    this.MarkPrice.Equals(input.MarkPrice))
                ) && 
                (
                    this.IndicativeTaxRate == input.IndicativeTaxRate ||
                    (this.IndicativeTaxRate != null &&
                    this.IndicativeTaxRate.Equals(input.IndicativeTaxRate))
                ) && 
                (
                    this.IndicativeSettlePrice == input.IndicativeSettlePrice ||
                    (this.IndicativeSettlePrice != null &&
                    this.IndicativeSettlePrice.Equals(input.IndicativeSettlePrice))
                ) && 
                (
                    this.OptionUnderlyingPrice == input.OptionUnderlyingPrice ||
                    (this.OptionUnderlyingPrice != null &&
                    this.OptionUnderlyingPrice.Equals(input.OptionUnderlyingPrice))
                ) && 
                (
                    this.SettledPrice == input.SettledPrice ||
                    (this.SettledPrice != null &&
                    this.SettledPrice.Equals(input.SettledPrice))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.RootSymbol != null)
                    hashCode = hashCode * 59 + this.RootSymbol.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Typ != null)
                    hashCode = hashCode * 59 + this.Typ.GetHashCode();
                if (this.Listing != null)
                    hashCode = hashCode * 59 + this.Listing.GetHashCode();
                if (this.Front != null)
                    hashCode = hashCode * 59 + this.Front.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.Settle != null)
                    hashCode = hashCode * 59 + this.Settle.GetHashCode();
                if (this.RelistInterval != null)
                    hashCode = hashCode * 59 + this.RelistInterval.GetHashCode();
                if (this.InverseLeg != null)
                    hashCode = hashCode * 59 + this.InverseLeg.GetHashCode();
                if (this.SellLeg != null)
                    hashCode = hashCode * 59 + this.SellLeg.GetHashCode();
                if (this.BuyLeg != null)
                    hashCode = hashCode * 59 + this.BuyLeg.GetHashCode();
                if (this.OptionStrikePcnt != null)
                    hashCode = hashCode * 59 + this.OptionStrikePcnt.GetHashCode();
                if (this.OptionStrikeRound != null)
                    hashCode = hashCode * 59 + this.OptionStrikeRound.GetHashCode();
                if (this.OptionStrikePrice != null)
                    hashCode = hashCode * 59 + this.OptionStrikePrice.GetHashCode();
                if (this.OptionMultiplier != null)
                    hashCode = hashCode * 59 + this.OptionMultiplier.GetHashCode();
                if (this.PositionCurrency != null)
                    hashCode = hashCode * 59 + this.PositionCurrency.GetHashCode();
                if (this.Underlying != null)
                    hashCode = hashCode * 59 + this.Underlying.GetHashCode();
                if (this.QuoteCurrency != null)
                    hashCode = hashCode * 59 + this.QuoteCurrency.GetHashCode();
                if (this.UnderlyingSymbol != null)
                    hashCode = hashCode * 59 + this.UnderlyingSymbol.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.ReferenceSymbol != null)
                    hashCode = hashCode * 59 + this.ReferenceSymbol.GetHashCode();
                if (this.CalcInterval != null)
                    hashCode = hashCode * 59 + this.CalcInterval.GetHashCode();
                if (this.PublishInterval != null)
                    hashCode = hashCode * 59 + this.PublishInterval.GetHashCode();
                if (this.PublishTime != null)
                    hashCode = hashCode * 59 + this.PublishTime.GetHashCode();
                if (this.MaxOrderQty != null)
                    hashCode = hashCode * 59 + this.MaxOrderQty.GetHashCode();
                if (this.MaxPrice != null)
                    hashCode = hashCode * 59 + this.MaxPrice.GetHashCode();
                if (this.LotSize != null)
                    hashCode = hashCode * 59 + this.LotSize.GetHashCode();
                if (this.TickSize != null)
                    hashCode = hashCode * 59 + this.TickSize.GetHashCode();
                if (this.Multiplier != null)
                    hashCode = hashCode * 59 + this.Multiplier.GetHashCode();
                if (this.SettlCurrency != null)
                    hashCode = hashCode * 59 + this.SettlCurrency.GetHashCode();
                if (this.UnderlyingToPositionMultiplier != null)
                    hashCode = hashCode * 59 + this.UnderlyingToPositionMultiplier.GetHashCode();
                if (this.UnderlyingToSettleMultiplier != null)
                    hashCode = hashCode * 59 + this.UnderlyingToSettleMultiplier.GetHashCode();
                if (this.QuoteToSettleMultiplier != null)
                    hashCode = hashCode * 59 + this.QuoteToSettleMultiplier.GetHashCode();
                if (this.IsQuanto != null)
                    hashCode = hashCode * 59 + this.IsQuanto.GetHashCode();
                if (this.IsInverse != null)
                    hashCode = hashCode * 59 + this.IsInverse.GetHashCode();
                if (this.InitMargin != null)
                    hashCode = hashCode * 59 + this.InitMargin.GetHashCode();
                if (this.MaintMargin != null)
                    hashCode = hashCode * 59 + this.MaintMargin.GetHashCode();
                if (this.RiskLimit != null)
                    hashCode = hashCode * 59 + this.RiskLimit.GetHashCode();
                if (this.RiskStep != null)
                    hashCode = hashCode * 59 + this.RiskStep.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Capped != null)
                    hashCode = hashCode * 59 + this.Capped.GetHashCode();
                if (this.Taxed != null)
                    hashCode = hashCode * 59 + this.Taxed.GetHashCode();
                if (this.Deleverage != null)
                    hashCode = hashCode * 59 + this.Deleverage.GetHashCode();
                if (this.MakerFee != null)
                    hashCode = hashCode * 59 + this.MakerFee.GetHashCode();
                if (this.TakerFee != null)
                    hashCode = hashCode * 59 + this.TakerFee.GetHashCode();
                if (this.SettlementFee != null)
                    hashCode = hashCode * 59 + this.SettlementFee.GetHashCode();
                if (this.InsuranceFee != null)
                    hashCode = hashCode * 59 + this.InsuranceFee.GetHashCode();
                if (this.FundingBaseSymbol != null)
                    hashCode = hashCode * 59 + this.FundingBaseSymbol.GetHashCode();
                if (this.FundingQuoteSymbol != null)
                    hashCode = hashCode * 59 + this.FundingQuoteSymbol.GetHashCode();
                if (this.FundingPremiumSymbol != null)
                    hashCode = hashCode * 59 + this.FundingPremiumSymbol.GetHashCode();
                if (this.FundingTimestamp != null)
                    hashCode = hashCode * 59 + this.FundingTimestamp.GetHashCode();
                if (this.FundingInterval != null)
                    hashCode = hashCode * 59 + this.FundingInterval.GetHashCode();
                if (this.FundingRate != null)
                    hashCode = hashCode * 59 + this.FundingRate.GetHashCode();
                if (this.IndicativeFundingRate != null)
                    hashCode = hashCode * 59 + this.IndicativeFundingRate.GetHashCode();
                if (this.RebalanceTimestamp != null)
                    hashCode = hashCode * 59 + this.RebalanceTimestamp.GetHashCode();
                if (this.RebalanceInterval != null)
                    hashCode = hashCode * 59 + this.RebalanceInterval.GetHashCode();
                if (this.OpeningTimestamp != null)
                    hashCode = hashCode * 59 + this.OpeningTimestamp.GetHashCode();
                if (this.ClosingTimestamp != null)
                    hashCode = hashCode * 59 + this.ClosingTimestamp.GetHashCode();
                if (this.SessionInterval != null)
                    hashCode = hashCode * 59 + this.SessionInterval.GetHashCode();
                if (this.PrevClosePrice != null)
                    hashCode = hashCode * 59 + this.PrevClosePrice.GetHashCode();
                if (this.LimitDownPrice != null)
                    hashCode = hashCode * 59 + this.LimitDownPrice.GetHashCode();
                if (this.LimitUpPrice != null)
                    hashCode = hashCode * 59 + this.LimitUpPrice.GetHashCode();
                if (this.BankruptLimitDownPrice != null)
                    hashCode = hashCode * 59 + this.BankruptLimitDownPrice.GetHashCode();
                if (this.BankruptLimitUpPrice != null)
                    hashCode = hashCode * 59 + this.BankruptLimitUpPrice.GetHashCode();
                if (this.PrevTotalVolume != null)
                    hashCode = hashCode * 59 + this.PrevTotalVolume.GetHashCode();
                if (this.TotalVolume != null)
                    hashCode = hashCode * 59 + this.TotalVolume.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Volume24h != null)
                    hashCode = hashCode * 59 + this.Volume24h.GetHashCode();
                if (this.PrevTotalTurnover != null)
                    hashCode = hashCode * 59 + this.PrevTotalTurnover.GetHashCode();
                if (this.TotalTurnover != null)
                    hashCode = hashCode * 59 + this.TotalTurnover.GetHashCode();
                if (this.Turnover != null)
                    hashCode = hashCode * 59 + this.Turnover.GetHashCode();
                if (this.Turnover24h != null)
                    hashCode = hashCode * 59 + this.Turnover24h.GetHashCode();
                if (this.PrevPrice24h != null)
                    hashCode = hashCode * 59 + this.PrevPrice24h.GetHashCode();
                if (this.Vwap != null)
                    hashCode = hashCode * 59 + this.Vwap.GetHashCode();
                if (this.HighPrice != null)
                    hashCode = hashCode * 59 + this.HighPrice.GetHashCode();
                if (this.LowPrice != null)
                    hashCode = hashCode * 59 + this.LowPrice.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.LastPriceProtected != null)
                    hashCode = hashCode * 59 + this.LastPriceProtected.GetHashCode();
                if (this.LastTickDirection != null)
                    hashCode = hashCode * 59 + this.LastTickDirection.GetHashCode();
                if (this.LastChangePcnt != null)
                    hashCode = hashCode * 59 + this.LastChangePcnt.GetHashCode();
                if (this.BidPrice != null)
                    hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                if (this.MidPrice != null)
                    hashCode = hashCode * 59 + this.MidPrice.GetHashCode();
                if (this.AskPrice != null)
                    hashCode = hashCode * 59 + this.AskPrice.GetHashCode();
                if (this.ImpactBidPrice != null)
                    hashCode = hashCode * 59 + this.ImpactBidPrice.GetHashCode();
                if (this.ImpactMidPrice != null)
                    hashCode = hashCode * 59 + this.ImpactMidPrice.GetHashCode();
                if (this.ImpactAskPrice != null)
                    hashCode = hashCode * 59 + this.ImpactAskPrice.GetHashCode();
                if (this.HasLiquidity != null)
                    hashCode = hashCode * 59 + this.HasLiquidity.GetHashCode();
                if (this.OpenInterest != null)
                    hashCode = hashCode * 59 + this.OpenInterest.GetHashCode();
                if (this.OpenValue != null)
                    hashCode = hashCode * 59 + this.OpenValue.GetHashCode();
                if (this.FairMethod != null)
                    hashCode = hashCode * 59 + this.FairMethod.GetHashCode();
                if (this.FairBasisRate != null)
                    hashCode = hashCode * 59 + this.FairBasisRate.GetHashCode();
                if (this.FairBasis != null)
                    hashCode = hashCode * 59 + this.FairBasis.GetHashCode();
                if (this.FairPrice != null)
                    hashCode = hashCode * 59 + this.FairPrice.GetHashCode();
                if (this.MarkMethod != null)
                    hashCode = hashCode * 59 + this.MarkMethod.GetHashCode();
                if (this.MarkPrice != null)
                    hashCode = hashCode * 59 + this.MarkPrice.GetHashCode();
                if (this.IndicativeTaxRate != null)
                    hashCode = hashCode * 59 + this.IndicativeTaxRate.GetHashCode();
                if (this.IndicativeSettlePrice != null)
                    hashCode = hashCode * 59 + this.IndicativeSettlePrice.GetHashCode();
                if (this.OptionUnderlyingPrice != null)
                    hashCode = hashCode * 59 + this.OptionUnderlyingPrice.GetHashCode();
                if (this.SettledPrice != null)
                    hashCode = hashCode * 59 + this.SettledPrice.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
