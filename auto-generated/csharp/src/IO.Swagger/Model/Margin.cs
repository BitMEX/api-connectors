/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Margin
    /// </summary>
    [DataContract]
    public partial class Margin :  IEquatable<Margin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Margin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Margin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Margin" /> class.
        /// </summary>
        /// <param name="account">account (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="riskLimit">riskLimit.</param>
        /// <param name="prevState">prevState.</param>
        /// <param name="state">state.</param>
        /// <param name="action">action.</param>
        /// <param name="amount">amount.</param>
        /// <param name="pendingCredit">pendingCredit.</param>
        /// <param name="pendingDebit">pendingDebit.</param>
        /// <param name="confirmedDebit">confirmedDebit.</param>
        /// <param name="prevRealisedPnl">prevRealisedPnl.</param>
        /// <param name="prevUnrealisedPnl">prevUnrealisedPnl.</param>
        /// <param name="grossComm">grossComm.</param>
        /// <param name="grossOpenCost">grossOpenCost.</param>
        /// <param name="grossOpenPremium">grossOpenPremium.</param>
        /// <param name="grossExecCost">grossExecCost.</param>
        /// <param name="grossMarkValue">grossMarkValue.</param>
        /// <param name="riskValue">riskValue.</param>
        /// <param name="taxableMargin">taxableMargin.</param>
        /// <param name="initMargin">initMargin.</param>
        /// <param name="maintMargin">maintMargin.</param>
        /// <param name="sessionMargin">sessionMargin.</param>
        /// <param name="targetExcessMargin">targetExcessMargin.</param>
        /// <param name="varMargin">varMargin.</param>
        /// <param name="realisedPnl">realisedPnl.</param>
        /// <param name="unrealisedPnl">unrealisedPnl.</param>
        /// <param name="indicativeTax">indicativeTax.</param>
        /// <param name="unrealisedProfit">unrealisedProfit.</param>
        /// <param name="syntheticMargin">syntheticMargin.</param>
        /// <param name="walletBalance">walletBalance.</param>
        /// <param name="marginBalance">marginBalance.</param>
        /// <param name="marginBalancePcnt">marginBalancePcnt (default to 0.0).</param>
        /// <param name="marginLeverage">marginLeverage (default to 0.0).</param>
        /// <param name="marginUsedPcnt">marginUsedPcnt (default to 0.0).</param>
        /// <param name="excessMargin">excessMargin.</param>
        /// <param name="excessMarginPcnt">excessMarginPcnt (default to 0.0).</param>
        /// <param name="availableMargin">availableMargin.</param>
        /// <param name="withdrawableMargin">withdrawableMargin.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="grossLastValue">grossLastValue.</param>
        /// <param name="commission">commission (default to 0.0).</param>
        public Margin(decimal? account = default(decimal?), string currency = default(string), decimal? riskLimit = default(decimal?), string prevState = default(string), string state = default(string), string action = default(string), decimal? amount = default(decimal?), decimal? pendingCredit = default(decimal?), decimal? pendingDebit = default(decimal?), decimal? confirmedDebit = default(decimal?), decimal? prevRealisedPnl = default(decimal?), decimal? prevUnrealisedPnl = default(decimal?), decimal? grossComm = default(decimal?), decimal? grossOpenCost = default(decimal?), decimal? grossOpenPremium = default(decimal?), decimal? grossExecCost = default(decimal?), decimal? grossMarkValue = default(decimal?), decimal? riskValue = default(decimal?), decimal? taxableMargin = default(decimal?), decimal? initMargin = default(decimal?), decimal? maintMargin = default(decimal?), decimal? sessionMargin = default(decimal?), decimal? targetExcessMargin = default(decimal?), decimal? varMargin = default(decimal?), decimal? realisedPnl = default(decimal?), decimal? unrealisedPnl = default(decimal?), decimal? indicativeTax = default(decimal?), decimal? unrealisedProfit = default(decimal?), decimal? syntheticMargin = default(decimal?), decimal? walletBalance = default(decimal?), decimal? marginBalance = default(decimal?), double? marginBalancePcnt = 0.0, double? marginLeverage = 0.0, double? marginUsedPcnt = 0.0, decimal? excessMargin = default(decimal?), double? excessMarginPcnt = 0.0, decimal? availableMargin = default(decimal?), decimal? withdrawableMargin = default(decimal?), DateTime? timestamp = default(DateTime?), decimal? grossLastValue = default(decimal?), double? commission = 0.0)
        {
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new InvalidDataException("account is a required property for Margin and cannot be null");
            }
            else
            {
                this.Account = account;
            }
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for Margin and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            this.RiskLimit = riskLimit;
            this.PrevState = prevState;
            this.State = state;
            this.Action = action;
            this.Amount = amount;
            this.PendingCredit = pendingCredit;
            this.PendingDebit = pendingDebit;
            this.ConfirmedDebit = confirmedDebit;
            this.PrevRealisedPnl = prevRealisedPnl;
            this.PrevUnrealisedPnl = prevUnrealisedPnl;
            this.GrossComm = grossComm;
            this.GrossOpenCost = grossOpenCost;
            this.GrossOpenPremium = grossOpenPremium;
            this.GrossExecCost = grossExecCost;
            this.GrossMarkValue = grossMarkValue;
            this.RiskValue = riskValue;
            this.TaxableMargin = taxableMargin;
            this.InitMargin = initMargin;
            this.MaintMargin = maintMargin;
            this.SessionMargin = sessionMargin;
            this.TargetExcessMargin = targetExcessMargin;
            this.VarMargin = varMargin;
            this.RealisedPnl = realisedPnl;
            this.UnrealisedPnl = unrealisedPnl;
            this.IndicativeTax = indicativeTax;
            this.UnrealisedProfit = unrealisedProfit;
            this.SyntheticMargin = syntheticMargin;
            this.WalletBalance = walletBalance;
            this.MarginBalance = marginBalance;
            // use default value if no "marginBalancePcnt" provided
            if (marginBalancePcnt == null)
            {
                this.MarginBalancePcnt = 0.0;
            }
            else
            {
                this.MarginBalancePcnt = marginBalancePcnt;
            }
            // use default value if no "marginLeverage" provided
            if (marginLeverage == null)
            {
                this.MarginLeverage = 0.0;
            }
            else
            {
                this.MarginLeverage = marginLeverage;
            }
            // use default value if no "marginUsedPcnt" provided
            if (marginUsedPcnt == null)
            {
                this.MarginUsedPcnt = 0.0;
            }
            else
            {
                this.MarginUsedPcnt = marginUsedPcnt;
            }
            this.ExcessMargin = excessMargin;
            // use default value if no "excessMarginPcnt" provided
            if (excessMarginPcnt == null)
            {
                this.ExcessMarginPcnt = 0.0;
            }
            else
            {
                this.ExcessMarginPcnt = excessMarginPcnt;
            }
            this.AvailableMargin = availableMargin;
            this.WithdrawableMargin = withdrawableMargin;
            this.Timestamp = timestamp;
            this.GrossLastValue = grossLastValue;
            // use default value if no "commission" provided
            if (commission == null)
            {
                this.Commission = 0.0;
            }
            else
            {
                this.Commission = commission;
            }
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public decimal? Account { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets RiskLimit
        /// </summary>
        [DataMember(Name="riskLimit", EmitDefaultValue=false)]
        public decimal? RiskLimit { get; set; }

        /// <summary>
        /// Gets or Sets PrevState
        /// </summary>
        [DataMember(Name="prevState", EmitDefaultValue=false)]
        public string PrevState { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets PendingCredit
        /// </summary>
        [DataMember(Name="pendingCredit", EmitDefaultValue=false)]
        public decimal? PendingCredit { get; set; }

        /// <summary>
        /// Gets or Sets PendingDebit
        /// </summary>
        [DataMember(Name="pendingDebit", EmitDefaultValue=false)]
        public decimal? PendingDebit { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmedDebit
        /// </summary>
        [DataMember(Name="confirmedDebit", EmitDefaultValue=false)]
        public decimal? ConfirmedDebit { get; set; }

        /// <summary>
        /// Gets or Sets PrevRealisedPnl
        /// </summary>
        [DataMember(Name="prevRealisedPnl", EmitDefaultValue=false)]
        public decimal? PrevRealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets PrevUnrealisedPnl
        /// </summary>
        [DataMember(Name="prevUnrealisedPnl", EmitDefaultValue=false)]
        public decimal? PrevUnrealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets GrossComm
        /// </summary>
        [DataMember(Name="grossComm", EmitDefaultValue=false)]
        public decimal? GrossComm { get; set; }

        /// <summary>
        /// Gets or Sets GrossOpenCost
        /// </summary>
        [DataMember(Name="grossOpenCost", EmitDefaultValue=false)]
        public decimal? GrossOpenCost { get; set; }

        /// <summary>
        /// Gets or Sets GrossOpenPremium
        /// </summary>
        [DataMember(Name="grossOpenPremium", EmitDefaultValue=false)]
        public decimal? GrossOpenPremium { get; set; }

        /// <summary>
        /// Gets or Sets GrossExecCost
        /// </summary>
        [DataMember(Name="grossExecCost", EmitDefaultValue=false)]
        public decimal? GrossExecCost { get; set; }

        /// <summary>
        /// Gets or Sets GrossMarkValue
        /// </summary>
        [DataMember(Name="grossMarkValue", EmitDefaultValue=false)]
        public decimal? GrossMarkValue { get; set; }

        /// <summary>
        /// Gets or Sets RiskValue
        /// </summary>
        [DataMember(Name="riskValue", EmitDefaultValue=false)]
        public decimal? RiskValue { get; set; }

        /// <summary>
        /// Gets or Sets TaxableMargin
        /// </summary>
        [DataMember(Name="taxableMargin", EmitDefaultValue=false)]
        public decimal? TaxableMargin { get; set; }

        /// <summary>
        /// Gets or Sets InitMargin
        /// </summary>
        [DataMember(Name="initMargin", EmitDefaultValue=false)]
        public decimal? InitMargin { get; set; }

        /// <summary>
        /// Gets or Sets MaintMargin
        /// </summary>
        [DataMember(Name="maintMargin", EmitDefaultValue=false)]
        public decimal? MaintMargin { get; set; }

        /// <summary>
        /// Gets or Sets SessionMargin
        /// </summary>
        [DataMember(Name="sessionMargin", EmitDefaultValue=false)]
        public decimal? SessionMargin { get; set; }

        /// <summary>
        /// Gets or Sets TargetExcessMargin
        /// </summary>
        [DataMember(Name="targetExcessMargin", EmitDefaultValue=false)]
        public decimal? TargetExcessMargin { get; set; }

        /// <summary>
        /// Gets or Sets VarMargin
        /// </summary>
        [DataMember(Name="varMargin", EmitDefaultValue=false)]
        public decimal? VarMargin { get; set; }

        /// <summary>
        /// Gets or Sets RealisedPnl
        /// </summary>
        [DataMember(Name="realisedPnl", EmitDefaultValue=false)]
        public decimal? RealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedPnl
        /// </summary>
        [DataMember(Name="unrealisedPnl", EmitDefaultValue=false)]
        public decimal? UnrealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets IndicativeTax
        /// </summary>
        [DataMember(Name="indicativeTax", EmitDefaultValue=false)]
        public decimal? IndicativeTax { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedProfit
        /// </summary>
        [DataMember(Name="unrealisedProfit", EmitDefaultValue=false)]
        public decimal? UnrealisedProfit { get; set; }

        /// <summary>
        /// Gets or Sets SyntheticMargin
        /// </summary>
        [DataMember(Name="syntheticMargin", EmitDefaultValue=false)]
        public decimal? SyntheticMargin { get; set; }

        /// <summary>
        /// Gets or Sets WalletBalance
        /// </summary>
        [DataMember(Name="walletBalance", EmitDefaultValue=false)]
        public decimal? WalletBalance { get; set; }

        /// <summary>
        /// Gets or Sets MarginBalance
        /// </summary>
        [DataMember(Name="marginBalance", EmitDefaultValue=false)]
        public decimal? MarginBalance { get; set; }

        /// <summary>
        /// Gets or Sets MarginBalancePcnt
        /// </summary>
        [DataMember(Name="marginBalancePcnt", EmitDefaultValue=false)]
        public double? MarginBalancePcnt { get; set; }

        /// <summary>
        /// Gets or Sets MarginLeverage
        /// </summary>
        [DataMember(Name="marginLeverage", EmitDefaultValue=false)]
        public double? MarginLeverage { get; set; }

        /// <summary>
        /// Gets or Sets MarginUsedPcnt
        /// </summary>
        [DataMember(Name="marginUsedPcnt", EmitDefaultValue=false)]
        public double? MarginUsedPcnt { get; set; }

        /// <summary>
        /// Gets or Sets ExcessMargin
        /// </summary>
        [DataMember(Name="excessMargin", EmitDefaultValue=false)]
        public decimal? ExcessMargin { get; set; }

        /// <summary>
        /// Gets or Sets ExcessMarginPcnt
        /// </summary>
        [DataMember(Name="excessMarginPcnt", EmitDefaultValue=false)]
        public double? ExcessMarginPcnt { get; set; }

        /// <summary>
        /// Gets or Sets AvailableMargin
        /// </summary>
        [DataMember(Name="availableMargin", EmitDefaultValue=false)]
        public decimal? AvailableMargin { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawableMargin
        /// </summary>
        [DataMember(Name="withdrawableMargin", EmitDefaultValue=false)]
        public decimal? WithdrawableMargin { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets GrossLastValue
        /// </summary>
        [DataMember(Name="grossLastValue", EmitDefaultValue=false)]
        public decimal? GrossLastValue { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double? Commission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Margin {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RiskLimit: ").Append(RiskLimit).Append("\n");
            sb.Append("  PrevState: ").Append(PrevState).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PendingCredit: ").Append(PendingCredit).Append("\n");
            sb.Append("  PendingDebit: ").Append(PendingDebit).Append("\n");
            sb.Append("  ConfirmedDebit: ").Append(ConfirmedDebit).Append("\n");
            sb.Append("  PrevRealisedPnl: ").Append(PrevRealisedPnl).Append("\n");
            sb.Append("  PrevUnrealisedPnl: ").Append(PrevUnrealisedPnl).Append("\n");
            sb.Append("  GrossComm: ").Append(GrossComm).Append("\n");
            sb.Append("  GrossOpenCost: ").Append(GrossOpenCost).Append("\n");
            sb.Append("  GrossOpenPremium: ").Append(GrossOpenPremium).Append("\n");
            sb.Append("  GrossExecCost: ").Append(GrossExecCost).Append("\n");
            sb.Append("  GrossMarkValue: ").Append(GrossMarkValue).Append("\n");
            sb.Append("  RiskValue: ").Append(RiskValue).Append("\n");
            sb.Append("  TaxableMargin: ").Append(TaxableMargin).Append("\n");
            sb.Append("  InitMargin: ").Append(InitMargin).Append("\n");
            sb.Append("  MaintMargin: ").Append(MaintMargin).Append("\n");
            sb.Append("  SessionMargin: ").Append(SessionMargin).Append("\n");
            sb.Append("  TargetExcessMargin: ").Append(TargetExcessMargin).Append("\n");
            sb.Append("  VarMargin: ").Append(VarMargin).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  UnrealisedPnl: ").Append(UnrealisedPnl).Append("\n");
            sb.Append("  IndicativeTax: ").Append(IndicativeTax).Append("\n");
            sb.Append("  UnrealisedProfit: ").Append(UnrealisedProfit).Append("\n");
            sb.Append("  SyntheticMargin: ").Append(SyntheticMargin).Append("\n");
            sb.Append("  WalletBalance: ").Append(WalletBalance).Append("\n");
            sb.Append("  MarginBalance: ").Append(MarginBalance).Append("\n");
            sb.Append("  MarginBalancePcnt: ").Append(MarginBalancePcnt).Append("\n");
            sb.Append("  MarginLeverage: ").Append(MarginLeverage).Append("\n");
            sb.Append("  MarginUsedPcnt: ").Append(MarginUsedPcnt).Append("\n");
            sb.Append("  ExcessMargin: ").Append(ExcessMargin).Append("\n");
            sb.Append("  ExcessMarginPcnt: ").Append(ExcessMarginPcnt).Append("\n");
            sb.Append("  AvailableMargin: ").Append(AvailableMargin).Append("\n");
            sb.Append("  WithdrawableMargin: ").Append(WithdrawableMargin).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  GrossLastValue: ").Append(GrossLastValue).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Margin);
        }

        /// <summary>
        /// Returns true if Margin instances are equal
        /// </summary>
        /// <param name="input">Instance of Margin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Margin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.RiskLimit == input.RiskLimit ||
                    (this.RiskLimit != null &&
                    this.RiskLimit.Equals(input.RiskLimit))
                ) && 
                (
                    this.PrevState == input.PrevState ||
                    (this.PrevState != null &&
                    this.PrevState.Equals(input.PrevState))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PendingCredit == input.PendingCredit ||
                    (this.PendingCredit != null &&
                    this.PendingCredit.Equals(input.PendingCredit))
                ) && 
                (
                    this.PendingDebit == input.PendingDebit ||
                    (this.PendingDebit != null &&
                    this.PendingDebit.Equals(input.PendingDebit))
                ) && 
                (
                    this.ConfirmedDebit == input.ConfirmedDebit ||
                    (this.ConfirmedDebit != null &&
                    this.ConfirmedDebit.Equals(input.ConfirmedDebit))
                ) && 
                (
                    this.PrevRealisedPnl == input.PrevRealisedPnl ||
                    (this.PrevRealisedPnl != null &&
                    this.PrevRealisedPnl.Equals(input.PrevRealisedPnl))
                ) && 
                (
                    this.PrevUnrealisedPnl == input.PrevUnrealisedPnl ||
                    (this.PrevUnrealisedPnl != null &&
                    this.PrevUnrealisedPnl.Equals(input.PrevUnrealisedPnl))
                ) && 
                (
                    this.GrossComm == input.GrossComm ||
                    (this.GrossComm != null &&
                    this.GrossComm.Equals(input.GrossComm))
                ) && 
                (
                    this.GrossOpenCost == input.GrossOpenCost ||
                    (this.GrossOpenCost != null &&
                    this.GrossOpenCost.Equals(input.GrossOpenCost))
                ) && 
                (
                    this.GrossOpenPremium == input.GrossOpenPremium ||
                    (this.GrossOpenPremium != null &&
                    this.GrossOpenPremium.Equals(input.GrossOpenPremium))
                ) && 
                (
                    this.GrossExecCost == input.GrossExecCost ||
                    (this.GrossExecCost != null &&
                    this.GrossExecCost.Equals(input.GrossExecCost))
                ) && 
                (
                    this.GrossMarkValue == input.GrossMarkValue ||
                    (this.GrossMarkValue != null &&
                    this.GrossMarkValue.Equals(input.GrossMarkValue))
                ) && 
                (
                    this.RiskValue == input.RiskValue ||
                    (this.RiskValue != null &&
                    this.RiskValue.Equals(input.RiskValue))
                ) && 
                (
                    this.TaxableMargin == input.TaxableMargin ||
                    (this.TaxableMargin != null &&
                    this.TaxableMargin.Equals(input.TaxableMargin))
                ) && 
                (
                    this.InitMargin == input.InitMargin ||
                    (this.InitMargin != null &&
                    this.InitMargin.Equals(input.InitMargin))
                ) && 
                (
                    this.MaintMargin == input.MaintMargin ||
                    (this.MaintMargin != null &&
                    this.MaintMargin.Equals(input.MaintMargin))
                ) && 
                (
                    this.SessionMargin == input.SessionMargin ||
                    (this.SessionMargin != null &&
                    this.SessionMargin.Equals(input.SessionMargin))
                ) && 
                (
                    this.TargetExcessMargin == input.TargetExcessMargin ||
                    (this.TargetExcessMargin != null &&
                    this.TargetExcessMargin.Equals(input.TargetExcessMargin))
                ) && 
                (
                    this.VarMargin == input.VarMargin ||
                    (this.VarMargin != null &&
                    this.VarMargin.Equals(input.VarMargin))
                ) && 
                (
                    this.RealisedPnl == input.RealisedPnl ||
                    (this.RealisedPnl != null &&
                    this.RealisedPnl.Equals(input.RealisedPnl))
                ) && 
                (
                    this.UnrealisedPnl == input.UnrealisedPnl ||
                    (this.UnrealisedPnl != null &&
                    this.UnrealisedPnl.Equals(input.UnrealisedPnl))
                ) && 
                (
                    this.IndicativeTax == input.IndicativeTax ||
                    (this.IndicativeTax != null &&
                    this.IndicativeTax.Equals(input.IndicativeTax))
                ) && 
                (
                    this.UnrealisedProfit == input.UnrealisedProfit ||
                    (this.UnrealisedProfit != null &&
                    this.UnrealisedProfit.Equals(input.UnrealisedProfit))
                ) && 
                (
                    this.SyntheticMargin == input.SyntheticMargin ||
                    (this.SyntheticMargin != null &&
                    this.SyntheticMargin.Equals(input.SyntheticMargin))
                ) && 
                (
                    this.WalletBalance == input.WalletBalance ||
                    (this.WalletBalance != null &&
                    this.WalletBalance.Equals(input.WalletBalance))
                ) && 
                (
                    this.MarginBalance == input.MarginBalance ||
                    (this.MarginBalance != null &&
                    this.MarginBalance.Equals(input.MarginBalance))
                ) && 
                (
                    this.MarginBalancePcnt == input.MarginBalancePcnt ||
                    (this.MarginBalancePcnt != null &&
                    this.MarginBalancePcnt.Equals(input.MarginBalancePcnt))
                ) && 
                (
                    this.MarginLeverage == input.MarginLeverage ||
                    (this.MarginLeverage != null &&
                    this.MarginLeverage.Equals(input.MarginLeverage))
                ) && 
                (
                    this.MarginUsedPcnt == input.MarginUsedPcnt ||
                    (this.MarginUsedPcnt != null &&
                    this.MarginUsedPcnt.Equals(input.MarginUsedPcnt))
                ) && 
                (
                    this.ExcessMargin == input.ExcessMargin ||
                    (this.ExcessMargin != null &&
                    this.ExcessMargin.Equals(input.ExcessMargin))
                ) && 
                (
                    this.ExcessMarginPcnt == input.ExcessMarginPcnt ||
                    (this.ExcessMarginPcnt != null &&
                    this.ExcessMarginPcnt.Equals(input.ExcessMarginPcnt))
                ) && 
                (
                    this.AvailableMargin == input.AvailableMargin ||
                    (this.AvailableMargin != null &&
                    this.AvailableMargin.Equals(input.AvailableMargin))
                ) && 
                (
                    this.WithdrawableMargin == input.WithdrawableMargin ||
                    (this.WithdrawableMargin != null &&
                    this.WithdrawableMargin.Equals(input.WithdrawableMargin))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.GrossLastValue == input.GrossLastValue ||
                    (this.GrossLastValue != null &&
                    this.GrossLastValue.Equals(input.GrossLastValue))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.RiskLimit != null)
                    hashCode = hashCode * 59 + this.RiskLimit.GetHashCode();
                if (this.PrevState != null)
                    hashCode = hashCode * 59 + this.PrevState.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PendingCredit != null)
                    hashCode = hashCode * 59 + this.PendingCredit.GetHashCode();
                if (this.PendingDebit != null)
                    hashCode = hashCode * 59 + this.PendingDebit.GetHashCode();
                if (this.ConfirmedDebit != null)
                    hashCode = hashCode * 59 + this.ConfirmedDebit.GetHashCode();
                if (this.PrevRealisedPnl != null)
                    hashCode = hashCode * 59 + this.PrevRealisedPnl.GetHashCode();
                if (this.PrevUnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.PrevUnrealisedPnl.GetHashCode();
                if (this.GrossComm != null)
                    hashCode = hashCode * 59 + this.GrossComm.GetHashCode();
                if (this.GrossOpenCost != null)
                    hashCode = hashCode * 59 + this.GrossOpenCost.GetHashCode();
                if (this.GrossOpenPremium != null)
                    hashCode = hashCode * 59 + this.GrossOpenPremium.GetHashCode();
                if (this.GrossExecCost != null)
                    hashCode = hashCode * 59 + this.GrossExecCost.GetHashCode();
                if (this.GrossMarkValue != null)
                    hashCode = hashCode * 59 + this.GrossMarkValue.GetHashCode();
                if (this.RiskValue != null)
                    hashCode = hashCode * 59 + this.RiskValue.GetHashCode();
                if (this.TaxableMargin != null)
                    hashCode = hashCode * 59 + this.TaxableMargin.GetHashCode();
                if (this.InitMargin != null)
                    hashCode = hashCode * 59 + this.InitMargin.GetHashCode();
                if (this.MaintMargin != null)
                    hashCode = hashCode * 59 + this.MaintMargin.GetHashCode();
                if (this.SessionMargin != null)
                    hashCode = hashCode * 59 + this.SessionMargin.GetHashCode();
                if (this.TargetExcessMargin != null)
                    hashCode = hashCode * 59 + this.TargetExcessMargin.GetHashCode();
                if (this.VarMargin != null)
                    hashCode = hashCode * 59 + this.VarMargin.GetHashCode();
                if (this.RealisedPnl != null)
                    hashCode = hashCode * 59 + this.RealisedPnl.GetHashCode();
                if (this.UnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnl.GetHashCode();
                if (this.IndicativeTax != null)
                    hashCode = hashCode * 59 + this.IndicativeTax.GetHashCode();
                if (this.UnrealisedProfit != null)
                    hashCode = hashCode * 59 + this.UnrealisedProfit.GetHashCode();
                if (this.SyntheticMargin != null)
                    hashCode = hashCode * 59 + this.SyntheticMargin.GetHashCode();
                if (this.WalletBalance != null)
                    hashCode = hashCode * 59 + this.WalletBalance.GetHashCode();
                if (this.MarginBalance != null)
                    hashCode = hashCode * 59 + this.MarginBalance.GetHashCode();
                if (this.MarginBalancePcnt != null)
                    hashCode = hashCode * 59 + this.MarginBalancePcnt.GetHashCode();
                if (this.MarginLeverage != null)
                    hashCode = hashCode * 59 + this.MarginLeverage.GetHashCode();
                if (this.MarginUsedPcnt != null)
                    hashCode = hashCode * 59 + this.MarginUsedPcnt.GetHashCode();
                if (this.ExcessMargin != null)
                    hashCode = hashCode * 59 + this.ExcessMargin.GetHashCode();
                if (this.ExcessMarginPcnt != null)
                    hashCode = hashCode * 59 + this.ExcessMarginPcnt.GetHashCode();
                if (this.AvailableMargin != null)
                    hashCode = hashCode * 59 + this.AvailableMargin.GetHashCode();
                if (this.WithdrawableMargin != null)
                    hashCode = hashCode * 59 + this.WithdrawableMargin.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.GrossLastValue != null)
                    hashCode = hashCode * 59 + this.GrossLastValue.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
