/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Placement, Cancellation, Amending, and History
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="orderID">orderID (required).</param>
        /// <param name="clOrdID">clOrdID.</param>
        /// <param name="clOrdLinkID">clOrdLinkID.</param>
        /// <param name="account">account.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="side">side.</param>
        /// <param name="simpleOrderQty">simpleOrderQty.</param>
        /// <param name="orderQty">orderQty.</param>
        /// <param name="price">price.</param>
        /// <param name="displayQty">displayQty.</param>
        /// <param name="stopPx">stopPx.</param>
        /// <param name="pegOffsetValue">pegOffsetValue.</param>
        /// <param name="pegPriceType">pegPriceType.</param>
        /// <param name="currency">currency.</param>
        /// <param name="settlCurrency">settlCurrency.</param>
        /// <param name="ordType">ordType.</param>
        /// <param name="timeInForce">timeInForce.</param>
        /// <param name="execInst">execInst.</param>
        /// <param name="contingencyType">contingencyType.</param>
        /// <param name="exDestination">exDestination.</param>
        /// <param name="ordStatus">ordStatus.</param>
        /// <param name="triggered">triggered.</param>
        /// <param name="workingIndicator">workingIndicator.</param>
        /// <param name="ordRejReason">ordRejReason.</param>
        /// <param name="simpleLeavesQty">simpleLeavesQty.</param>
        /// <param name="leavesQty">leavesQty.</param>
        /// <param name="simpleCumQty">simpleCumQty.</param>
        /// <param name="cumQty">cumQty.</param>
        /// <param name="avgPx">avgPx.</param>
        /// <param name="multiLegReportingType">multiLegReportingType.</param>
        /// <param name="text">text.</param>
        /// <param name="transactTime">transactTime.</param>
        /// <param name="timestamp">timestamp.</param>
        public Order(string orderID = default(string), string clOrdID = default(string), string clOrdLinkID = default(string), decimal? account = default(decimal?), string symbol = default(string), string side = default(string), double? simpleOrderQty = default(double?), decimal? orderQty = default(decimal?), double? price = default(double?), decimal? displayQty = default(decimal?), double? stopPx = default(double?), double? pegOffsetValue = default(double?), string pegPriceType = default(string), string currency = default(string), string settlCurrency = default(string), string ordType = default(string), string timeInForce = default(string), string execInst = default(string), string contingencyType = default(string), string exDestination = default(string), string ordStatus = default(string), string triggered = default(string), bool? workingIndicator = default(bool?), string ordRejReason = default(string), double? simpleLeavesQty = default(double?), decimal? leavesQty = default(decimal?), double? simpleCumQty = default(double?), decimal? cumQty = default(decimal?), double? avgPx = default(double?), string multiLegReportingType = default(string), string text = default(string), DateTime? transactTime = default(DateTime?), DateTime? timestamp = default(DateTime?))
        {
            // to ensure "orderID" is required (not null)
            if (orderID == null)
            {
                throw new InvalidDataException("orderID is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderID = orderID;
            }
            this.ClOrdID = clOrdID;
            this.ClOrdLinkID = clOrdLinkID;
            this.Account = account;
            this.Symbol = symbol;
            this.Side = side;
            this.SimpleOrderQty = simpleOrderQty;
            this.OrderQty = orderQty;
            this.Price = price;
            this.DisplayQty = displayQty;
            this.StopPx = stopPx;
            this.PegOffsetValue = pegOffsetValue;
            this.PegPriceType = pegPriceType;
            this.Currency = currency;
            this.SettlCurrency = settlCurrency;
            this.OrdType = ordType;
            this.TimeInForce = timeInForce;
            this.ExecInst = execInst;
            this.ContingencyType = contingencyType;
            this.ExDestination = exDestination;
            this.OrdStatus = ordStatus;
            this.Triggered = triggered;
            this.WorkingIndicator = workingIndicator;
            this.OrdRejReason = ordRejReason;
            this.SimpleLeavesQty = simpleLeavesQty;
            this.LeavesQty = leavesQty;
            this.SimpleCumQty = simpleCumQty;
            this.CumQty = cumQty;
            this.AvgPx = avgPx;
            this.MultiLegReportingType = multiLegReportingType;
            this.Text = text;
            this.TransactTime = transactTime;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>
        [DataMember(Name="orderID", EmitDefaultValue=false)]
        public string OrderID { get; set; }

        /// <summary>
        /// Gets or Sets ClOrdID
        /// </summary>
        [DataMember(Name="clOrdID", EmitDefaultValue=false)]
        public string ClOrdID { get; set; }

        /// <summary>
        /// Gets or Sets ClOrdLinkID
        /// </summary>
        [DataMember(Name="clOrdLinkID", EmitDefaultValue=false)]
        public string ClOrdLinkID { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public decimal? Account { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets SimpleOrderQty
        /// </summary>
        [DataMember(Name="simpleOrderQty", EmitDefaultValue=false)]
        public double? SimpleOrderQty { get; set; }

        /// <summary>
        /// Gets or Sets OrderQty
        /// </summary>
        [DataMember(Name="orderQty", EmitDefaultValue=false)]
        public decimal? OrderQty { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets DisplayQty
        /// </summary>
        [DataMember(Name="displayQty", EmitDefaultValue=false)]
        public decimal? DisplayQty { get; set; }

        /// <summary>
        /// Gets or Sets StopPx
        /// </summary>
        [DataMember(Name="stopPx", EmitDefaultValue=false)]
        public double? StopPx { get; set; }

        /// <summary>
        /// Gets or Sets PegOffsetValue
        /// </summary>
        [DataMember(Name="pegOffsetValue", EmitDefaultValue=false)]
        public double? PegOffsetValue { get; set; }

        /// <summary>
        /// Gets or Sets PegPriceType
        /// </summary>
        [DataMember(Name="pegPriceType", EmitDefaultValue=false)]
        public string PegPriceType { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets SettlCurrency
        /// </summary>
        [DataMember(Name="settlCurrency", EmitDefaultValue=false)]
        public string SettlCurrency { get; set; }

        /// <summary>
        /// Gets or Sets OrdType
        /// </summary>
        [DataMember(Name="ordType", EmitDefaultValue=false)]
        public string OrdType { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name="timeInForce", EmitDefaultValue=false)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// Gets or Sets ExecInst
        /// </summary>
        [DataMember(Name="execInst", EmitDefaultValue=false)]
        public string ExecInst { get; set; }

        /// <summary>
        /// Gets or Sets ContingencyType
        /// </summary>
        [DataMember(Name="contingencyType", EmitDefaultValue=false)]
        public string ContingencyType { get; set; }

        /// <summary>
        /// Gets or Sets ExDestination
        /// </summary>
        [DataMember(Name="exDestination", EmitDefaultValue=false)]
        public string ExDestination { get; set; }

        /// <summary>
        /// Gets or Sets OrdStatus
        /// </summary>
        [DataMember(Name="ordStatus", EmitDefaultValue=false)]
        public string OrdStatus { get; set; }

        /// <summary>
        /// Gets or Sets Triggered
        /// </summary>
        [DataMember(Name="triggered", EmitDefaultValue=false)]
        public string Triggered { get; set; }

        /// <summary>
        /// Gets or Sets WorkingIndicator
        /// </summary>
        [DataMember(Name="workingIndicator", EmitDefaultValue=false)]
        public bool? WorkingIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OrdRejReason
        /// </summary>
        [DataMember(Name="ordRejReason", EmitDefaultValue=false)]
        public string OrdRejReason { get; set; }

        /// <summary>
        /// Gets or Sets SimpleLeavesQty
        /// </summary>
        [DataMember(Name="simpleLeavesQty", EmitDefaultValue=false)]
        public double? SimpleLeavesQty { get; set; }

        /// <summary>
        /// Gets or Sets LeavesQty
        /// </summary>
        [DataMember(Name="leavesQty", EmitDefaultValue=false)]
        public decimal? LeavesQty { get; set; }

        /// <summary>
        /// Gets or Sets SimpleCumQty
        /// </summary>
        [DataMember(Name="simpleCumQty", EmitDefaultValue=false)]
        public double? SimpleCumQty { get; set; }

        /// <summary>
        /// Gets or Sets CumQty
        /// </summary>
        [DataMember(Name="cumQty", EmitDefaultValue=false)]
        public decimal? CumQty { get; set; }

        /// <summary>
        /// Gets or Sets AvgPx
        /// </summary>
        [DataMember(Name="avgPx", EmitDefaultValue=false)]
        public double? AvgPx { get; set; }

        /// <summary>
        /// Gets or Sets MultiLegReportingType
        /// </summary>
        [DataMember(Name="multiLegReportingType", EmitDefaultValue=false)]
        public string MultiLegReportingType { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets TransactTime
        /// </summary>
        [DataMember(Name="transactTime", EmitDefaultValue=false)]
        public DateTime? TransactTime { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  ClOrdID: ").Append(ClOrdID).Append("\n");
            sb.Append("  ClOrdLinkID: ").Append(ClOrdLinkID).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  SimpleOrderQty: ").Append(SimpleOrderQty).Append("\n");
            sb.Append("  OrderQty: ").Append(OrderQty).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DisplayQty: ").Append(DisplayQty).Append("\n");
            sb.Append("  StopPx: ").Append(StopPx).Append("\n");
            sb.Append("  PegOffsetValue: ").Append(PegOffsetValue).Append("\n");
            sb.Append("  PegPriceType: ").Append(PegPriceType).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SettlCurrency: ").Append(SettlCurrency).Append("\n");
            sb.Append("  OrdType: ").Append(OrdType).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  ExecInst: ").Append(ExecInst).Append("\n");
            sb.Append("  ContingencyType: ").Append(ContingencyType).Append("\n");
            sb.Append("  ExDestination: ").Append(ExDestination).Append("\n");
            sb.Append("  OrdStatus: ").Append(OrdStatus).Append("\n");
            sb.Append("  Triggered: ").Append(Triggered).Append("\n");
            sb.Append("  WorkingIndicator: ").Append(WorkingIndicator).Append("\n");
            sb.Append("  OrdRejReason: ").Append(OrdRejReason).Append("\n");
            sb.Append("  SimpleLeavesQty: ").Append(SimpleLeavesQty).Append("\n");
            sb.Append("  LeavesQty: ").Append(LeavesQty).Append("\n");
            sb.Append("  SimpleCumQty: ").Append(SimpleCumQty).Append("\n");
            sb.Append("  CumQty: ").Append(CumQty).Append("\n");
            sb.Append("  AvgPx: ").Append(AvgPx).Append("\n");
            sb.Append("  MultiLegReportingType: ").Append(MultiLegReportingType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TransactTime: ").Append(TransactTime).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderID == input.OrderID ||
                    (this.OrderID != null &&
                    this.OrderID.Equals(input.OrderID))
                ) && 
                (
                    this.ClOrdID == input.ClOrdID ||
                    (this.ClOrdID != null &&
                    this.ClOrdID.Equals(input.ClOrdID))
                ) && 
                (
                    this.ClOrdLinkID == input.ClOrdLinkID ||
                    (this.ClOrdLinkID != null &&
                    this.ClOrdLinkID.Equals(input.ClOrdLinkID))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.SimpleOrderQty == input.SimpleOrderQty ||
                    (this.SimpleOrderQty != null &&
                    this.SimpleOrderQty.Equals(input.SimpleOrderQty))
                ) && 
                (
                    this.OrderQty == input.OrderQty ||
                    (this.OrderQty != null &&
                    this.OrderQty.Equals(input.OrderQty))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.DisplayQty == input.DisplayQty ||
                    (this.DisplayQty != null &&
                    this.DisplayQty.Equals(input.DisplayQty))
                ) && 
                (
                    this.StopPx == input.StopPx ||
                    (this.StopPx != null &&
                    this.StopPx.Equals(input.StopPx))
                ) && 
                (
                    this.PegOffsetValue == input.PegOffsetValue ||
                    (this.PegOffsetValue != null &&
                    this.PegOffsetValue.Equals(input.PegOffsetValue))
                ) && 
                (
                    this.PegPriceType == input.PegPriceType ||
                    (this.PegPriceType != null &&
                    this.PegPriceType.Equals(input.PegPriceType))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.SettlCurrency == input.SettlCurrency ||
                    (this.SettlCurrency != null &&
                    this.SettlCurrency.Equals(input.SettlCurrency))
                ) && 
                (
                    this.OrdType == input.OrdType ||
                    (this.OrdType != null &&
                    this.OrdType.Equals(input.OrdType))
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && 
                (
                    this.ExecInst == input.ExecInst ||
                    (this.ExecInst != null &&
                    this.ExecInst.Equals(input.ExecInst))
                ) && 
                (
                    this.ContingencyType == input.ContingencyType ||
                    (this.ContingencyType != null &&
                    this.ContingencyType.Equals(input.ContingencyType))
                ) && 
                (
                    this.ExDestination == input.ExDestination ||
                    (this.ExDestination != null &&
                    this.ExDestination.Equals(input.ExDestination))
                ) && 
                (
                    this.OrdStatus == input.OrdStatus ||
                    (this.OrdStatus != null &&
                    this.OrdStatus.Equals(input.OrdStatus))
                ) && 
                (
                    this.Triggered == input.Triggered ||
                    (this.Triggered != null &&
                    this.Triggered.Equals(input.Triggered))
                ) && 
                (
                    this.WorkingIndicator == input.WorkingIndicator ||
                    (this.WorkingIndicator != null &&
                    this.WorkingIndicator.Equals(input.WorkingIndicator))
                ) && 
                (
                    this.OrdRejReason == input.OrdRejReason ||
                    (this.OrdRejReason != null &&
                    this.OrdRejReason.Equals(input.OrdRejReason))
                ) && 
                (
                    this.SimpleLeavesQty == input.SimpleLeavesQty ||
                    (this.SimpleLeavesQty != null &&
                    this.SimpleLeavesQty.Equals(input.SimpleLeavesQty))
                ) && 
                (
                    this.LeavesQty == input.LeavesQty ||
                    (this.LeavesQty != null &&
                    this.LeavesQty.Equals(input.LeavesQty))
                ) && 
                (
                    this.SimpleCumQty == input.SimpleCumQty ||
                    (this.SimpleCumQty != null &&
                    this.SimpleCumQty.Equals(input.SimpleCumQty))
                ) && 
                (
                    this.CumQty == input.CumQty ||
                    (this.CumQty != null &&
                    this.CumQty.Equals(input.CumQty))
                ) && 
                (
                    this.AvgPx == input.AvgPx ||
                    (this.AvgPx != null &&
                    this.AvgPx.Equals(input.AvgPx))
                ) && 
                (
                    this.MultiLegReportingType == input.MultiLegReportingType ||
                    (this.MultiLegReportingType != null &&
                    this.MultiLegReportingType.Equals(input.MultiLegReportingType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TransactTime == input.TransactTime ||
                    (this.TransactTime != null &&
                    this.TransactTime.Equals(input.TransactTime))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderID != null)
                    hashCode = hashCode * 59 + this.OrderID.GetHashCode();
                if (this.ClOrdID != null)
                    hashCode = hashCode * 59 + this.ClOrdID.GetHashCode();
                if (this.ClOrdLinkID != null)
                    hashCode = hashCode * 59 + this.ClOrdLinkID.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.SimpleOrderQty != null)
                    hashCode = hashCode * 59 + this.SimpleOrderQty.GetHashCode();
                if (this.OrderQty != null)
                    hashCode = hashCode * 59 + this.OrderQty.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.DisplayQty != null)
                    hashCode = hashCode * 59 + this.DisplayQty.GetHashCode();
                if (this.StopPx != null)
                    hashCode = hashCode * 59 + this.StopPx.GetHashCode();
                if (this.PegOffsetValue != null)
                    hashCode = hashCode * 59 + this.PegOffsetValue.GetHashCode();
                if (this.PegPriceType != null)
                    hashCode = hashCode * 59 + this.PegPriceType.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.SettlCurrency != null)
                    hashCode = hashCode * 59 + this.SettlCurrency.GetHashCode();
                if (this.OrdType != null)
                    hashCode = hashCode * 59 + this.OrdType.GetHashCode();
                if (this.TimeInForce != null)
                    hashCode = hashCode * 59 + this.TimeInForce.GetHashCode();
                if (this.ExecInst != null)
                    hashCode = hashCode * 59 + this.ExecInst.GetHashCode();
                if (this.ContingencyType != null)
                    hashCode = hashCode * 59 + this.ContingencyType.GetHashCode();
                if (this.ExDestination != null)
                    hashCode = hashCode * 59 + this.ExDestination.GetHashCode();
                if (this.OrdStatus != null)
                    hashCode = hashCode * 59 + this.OrdStatus.GetHashCode();
                if (this.Triggered != null)
                    hashCode = hashCode * 59 + this.Triggered.GetHashCode();
                if (this.WorkingIndicator != null)
                    hashCode = hashCode * 59 + this.WorkingIndicator.GetHashCode();
                if (this.OrdRejReason != null)
                    hashCode = hashCode * 59 + this.OrdRejReason.GetHashCode();
                if (this.SimpleLeavesQty != null)
                    hashCode = hashCode * 59 + this.SimpleLeavesQty.GetHashCode();
                if (this.LeavesQty != null)
                    hashCode = hashCode * 59 + this.LeavesQty.GetHashCode();
                if (this.SimpleCumQty != null)
                    hashCode = hashCode * 59 + this.SimpleCumQty.GetHashCode();
                if (this.CumQty != null)
                    hashCode = hashCode * 59 + this.CumQty.GetHashCode();
                if (this.AvgPx != null)
                    hashCode = hashCode * 59 + this.AvgPx.GetHashCode();
                if (this.MultiLegReportingType != null)
                    hashCode = hashCode * 59 + this.MultiLegReportingType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.TransactTime != null)
                    hashCode = hashCode * 59 + this.TransactTime.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
