/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Summary of Open and Closed Positions
    /// </summary>
    [DataContract]
    public partial class Position :  IEquatable<Position>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Position() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="account">account (required).</param>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="quoteCurrency">quoteCurrency.</param>
        /// <param name="commission">commission (default to 0.0).</param>
        /// <param name="initMarginReq">initMarginReq (default to 0.0).</param>
        /// <param name="maintMarginReq">maintMarginReq (default to 0.0).</param>
        /// <param name="riskLimit">riskLimit.</param>
        /// <param name="leverage">leverage (default to 0.0).</param>
        /// <param name="crossMargin">crossMargin.</param>
        /// <param name="deleveragePercentile">deleveragePercentile (default to 0.0).</param>
        /// <param name="rebalancedPnl">rebalancedPnl.</param>
        /// <param name="prevRealisedPnl">prevRealisedPnl.</param>
        /// <param name="prevUnrealisedPnl">prevUnrealisedPnl.</param>
        /// <param name="prevClosePrice">prevClosePrice (default to 0.0).</param>
        /// <param name="openingTimestamp">openingTimestamp.</param>
        /// <param name="openingQty">openingQty.</param>
        /// <param name="openingCost">openingCost.</param>
        /// <param name="openingComm">openingComm.</param>
        /// <param name="openOrderBuyQty">openOrderBuyQty.</param>
        /// <param name="openOrderBuyCost">openOrderBuyCost.</param>
        /// <param name="openOrderBuyPremium">openOrderBuyPremium.</param>
        /// <param name="openOrderSellQty">openOrderSellQty.</param>
        /// <param name="openOrderSellCost">openOrderSellCost.</param>
        /// <param name="openOrderSellPremium">openOrderSellPremium.</param>
        /// <param name="execBuyQty">execBuyQty.</param>
        /// <param name="execBuyCost">execBuyCost.</param>
        /// <param name="execSellQty">execSellQty.</param>
        /// <param name="execSellCost">execSellCost.</param>
        /// <param name="execQty">execQty.</param>
        /// <param name="execCost">execCost.</param>
        /// <param name="execComm">execComm.</param>
        /// <param name="currentTimestamp">currentTimestamp.</param>
        /// <param name="currentQty">currentQty.</param>
        /// <param name="currentCost">currentCost.</param>
        /// <param name="currentComm">currentComm.</param>
        /// <param name="realisedCost">realisedCost.</param>
        /// <param name="unrealisedCost">unrealisedCost.</param>
        /// <param name="grossOpenCost">grossOpenCost.</param>
        /// <param name="grossOpenPremium">grossOpenPremium.</param>
        /// <param name="grossExecCost">grossExecCost.</param>
        /// <param name="isOpen">isOpen.</param>
        /// <param name="markPrice">markPrice (default to 0.0).</param>
        /// <param name="markValue">markValue.</param>
        /// <param name="riskValue">riskValue.</param>
        /// <param name="homeNotional">homeNotional (default to 0.0).</param>
        /// <param name="foreignNotional">foreignNotional (default to 0.0).</param>
        /// <param name="posState">posState.</param>
        /// <param name="posCost">posCost.</param>
        /// <param name="posCost2">posCost2.</param>
        /// <param name="posCross">posCross.</param>
        /// <param name="posInit">posInit.</param>
        /// <param name="posComm">posComm.</param>
        /// <param name="posLoss">posLoss.</param>
        /// <param name="posMargin">posMargin.</param>
        /// <param name="posMaint">posMaint.</param>
        /// <param name="posAllowance">posAllowance.</param>
        /// <param name="taxableMargin">taxableMargin.</param>
        /// <param name="initMargin">initMargin.</param>
        /// <param name="maintMargin">maintMargin.</param>
        /// <param name="sessionMargin">sessionMargin.</param>
        /// <param name="targetExcessMargin">targetExcessMargin.</param>
        /// <param name="varMargin">varMargin.</param>
        /// <param name="realisedGrossPnl">realisedGrossPnl.</param>
        /// <param name="realisedTax">realisedTax.</param>
        /// <param name="realisedPnl">realisedPnl.</param>
        /// <param name="unrealisedGrossPnl">unrealisedGrossPnl.</param>
        /// <param name="longBankrupt">longBankrupt.</param>
        /// <param name="shortBankrupt">shortBankrupt.</param>
        /// <param name="taxBase">taxBase.</param>
        /// <param name="indicativeTaxRate">indicativeTaxRate (default to 0.0).</param>
        /// <param name="indicativeTax">indicativeTax.</param>
        /// <param name="unrealisedTax">unrealisedTax.</param>
        /// <param name="unrealisedPnl">unrealisedPnl.</param>
        /// <param name="unrealisedPnlPcnt">unrealisedPnlPcnt (default to 0.0).</param>
        /// <param name="unrealisedRoePcnt">unrealisedRoePcnt (default to 0.0).</param>
        /// <param name="simpleQty">simpleQty (default to 0.0).</param>
        /// <param name="simpleCost">simpleCost (default to 0.0).</param>
        /// <param name="simpleValue">simpleValue (default to 0.0).</param>
        /// <param name="simplePnl">simplePnl (default to 0.0).</param>
        /// <param name="simplePnlPcnt">simplePnlPcnt (default to 0.0).</param>
        /// <param name="avgCostPrice">avgCostPrice (default to 0.0).</param>
        /// <param name="avgEntryPrice">avgEntryPrice (default to 0.0).</param>
        /// <param name="breakEvenPrice">breakEvenPrice (default to 0.0).</param>
        /// <param name="marginCallPrice">marginCallPrice (default to 0.0).</param>
        /// <param name="liquidationPrice">liquidationPrice (default to 0.0).</param>
        /// <param name="bankruptPrice">bankruptPrice (default to 0.0).</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="lastPrice">lastPrice (default to 0.0).</param>
        /// <param name="lastValue">lastValue.</param>
        public Position(decimal? account = default(decimal?), string symbol = default(string), string currency = default(string), string underlying = default(string), string quoteCurrency = default(string), double? commission = 0.0, double? initMarginReq = 0.0, double? maintMarginReq = 0.0, decimal? riskLimit = default(decimal?), double? leverage = 0.0, bool? crossMargin = default(bool?), double? deleveragePercentile = 0.0, decimal? rebalancedPnl = default(decimal?), decimal? prevRealisedPnl = default(decimal?), decimal? prevUnrealisedPnl = default(decimal?), double? prevClosePrice = 0.0, DateTime? openingTimestamp = default(DateTime?), decimal? openingQty = default(decimal?), decimal? openingCost = default(decimal?), decimal? openingComm = default(decimal?), decimal? openOrderBuyQty = default(decimal?), decimal? openOrderBuyCost = default(decimal?), decimal? openOrderBuyPremium = default(decimal?), decimal? openOrderSellQty = default(decimal?), decimal? openOrderSellCost = default(decimal?), decimal? openOrderSellPremium = default(decimal?), decimal? execBuyQty = default(decimal?), decimal? execBuyCost = default(decimal?), decimal? execSellQty = default(decimal?), decimal? execSellCost = default(decimal?), decimal? execQty = default(decimal?), decimal? execCost = default(decimal?), decimal? execComm = default(decimal?), DateTime? currentTimestamp = default(DateTime?), decimal? currentQty = default(decimal?), decimal? currentCost = default(decimal?), decimal? currentComm = default(decimal?), decimal? realisedCost = default(decimal?), decimal? unrealisedCost = default(decimal?), decimal? grossOpenCost = default(decimal?), decimal? grossOpenPremium = default(decimal?), decimal? grossExecCost = default(decimal?), bool? isOpen = default(bool?), double? markPrice = 0.0, decimal? markValue = default(decimal?), decimal? riskValue = default(decimal?), double? homeNotional = 0.0, double? foreignNotional = 0.0, string posState = default(string), decimal? posCost = default(decimal?), decimal? posCost2 = default(decimal?), decimal? posCross = default(decimal?), decimal? posInit = default(decimal?), decimal? posComm = default(decimal?), decimal? posLoss = default(decimal?), decimal? posMargin = default(decimal?), decimal? posMaint = default(decimal?), decimal? posAllowance = default(decimal?), decimal? taxableMargin = default(decimal?), decimal? initMargin = default(decimal?), decimal? maintMargin = default(decimal?), decimal? sessionMargin = default(decimal?), decimal? targetExcessMargin = default(decimal?), decimal? varMargin = default(decimal?), decimal? realisedGrossPnl = default(decimal?), decimal? realisedTax = default(decimal?), decimal? realisedPnl = default(decimal?), decimal? unrealisedGrossPnl = default(decimal?), decimal? longBankrupt = default(decimal?), decimal? shortBankrupt = default(decimal?), decimal? taxBase = default(decimal?), double? indicativeTaxRate = 0.0, decimal? indicativeTax = default(decimal?), decimal? unrealisedTax = default(decimal?), decimal? unrealisedPnl = default(decimal?), double? unrealisedPnlPcnt = 0.0, double? unrealisedRoePcnt = 0.0, double? simpleQty = 0.0, double? simpleCost = 0.0, double? simpleValue = 0.0, double? simplePnl = 0.0, double? simplePnlPcnt = 0.0, double? avgCostPrice = 0.0, double? avgEntryPrice = 0.0, double? breakEvenPrice = 0.0, double? marginCallPrice = 0.0, double? liquidationPrice = 0.0, double? bankruptPrice = 0.0, DateTime? timestamp = default(DateTime?), double? lastPrice = 0.0, decimal? lastValue = default(decimal?))
        {
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new InvalidDataException("account is a required property for Position and cannot be null");
            }
            else
            {
                this.Account = account;
            }
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for Position and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for Position and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            this.Underlying = underlying;
            this.QuoteCurrency = quoteCurrency;
            // use default value if no "commission" provided
            if (commission == null)
            {
                this.Commission = 0.0;
            }
            else
            {
                this.Commission = commission;
            }
            // use default value if no "initMarginReq" provided
            if (initMarginReq == null)
            {
                this.InitMarginReq = 0.0;
            }
            else
            {
                this.InitMarginReq = initMarginReq;
            }
            // use default value if no "maintMarginReq" provided
            if (maintMarginReq == null)
            {
                this.MaintMarginReq = 0.0;
            }
            else
            {
                this.MaintMarginReq = maintMarginReq;
            }
            this.RiskLimit = riskLimit;
            // use default value if no "leverage" provided
            if (leverage == null)
            {
                this.Leverage = 0.0;
            }
            else
            {
                this.Leverage = leverage;
            }
            this.CrossMargin = crossMargin;
            // use default value if no "deleveragePercentile" provided
            if (deleveragePercentile == null)
            {
                this.DeleveragePercentile = 0.0;
            }
            else
            {
                this.DeleveragePercentile = deleveragePercentile;
            }
            this.RebalancedPnl = rebalancedPnl;
            this.PrevRealisedPnl = prevRealisedPnl;
            this.PrevUnrealisedPnl = prevUnrealisedPnl;
            // use default value if no "prevClosePrice" provided
            if (prevClosePrice == null)
            {
                this.PrevClosePrice = 0.0;
            }
            else
            {
                this.PrevClosePrice = prevClosePrice;
            }
            this.OpeningTimestamp = openingTimestamp;
            this.OpeningQty = openingQty;
            this.OpeningCost = openingCost;
            this.OpeningComm = openingComm;
            this.OpenOrderBuyQty = openOrderBuyQty;
            this.OpenOrderBuyCost = openOrderBuyCost;
            this.OpenOrderBuyPremium = openOrderBuyPremium;
            this.OpenOrderSellQty = openOrderSellQty;
            this.OpenOrderSellCost = openOrderSellCost;
            this.OpenOrderSellPremium = openOrderSellPremium;
            this.ExecBuyQty = execBuyQty;
            this.ExecBuyCost = execBuyCost;
            this.ExecSellQty = execSellQty;
            this.ExecSellCost = execSellCost;
            this.ExecQty = execQty;
            this.ExecCost = execCost;
            this.ExecComm = execComm;
            this.CurrentTimestamp = currentTimestamp;
            this.CurrentQty = currentQty;
            this.CurrentCost = currentCost;
            this.CurrentComm = currentComm;
            this.RealisedCost = realisedCost;
            this.UnrealisedCost = unrealisedCost;
            this.GrossOpenCost = grossOpenCost;
            this.GrossOpenPremium = grossOpenPremium;
            this.GrossExecCost = grossExecCost;
            this.IsOpen = isOpen;
            // use default value if no "markPrice" provided
            if (markPrice == null)
            {
                this.MarkPrice = 0.0;
            }
            else
            {
                this.MarkPrice = markPrice;
            }
            this.MarkValue = markValue;
            this.RiskValue = riskValue;
            // use default value if no "homeNotional" provided
            if (homeNotional == null)
            {
                this.HomeNotional = 0.0;
            }
            else
            {
                this.HomeNotional = homeNotional;
            }
            // use default value if no "foreignNotional" provided
            if (foreignNotional == null)
            {
                this.ForeignNotional = 0.0;
            }
            else
            {
                this.ForeignNotional = foreignNotional;
            }
            this.PosState = posState;
            this.PosCost = posCost;
            this.PosCost2 = posCost2;
            this.PosCross = posCross;
            this.PosInit = posInit;
            this.PosComm = posComm;
            this.PosLoss = posLoss;
            this.PosMargin = posMargin;
            this.PosMaint = posMaint;
            this.PosAllowance = posAllowance;
            this.TaxableMargin = taxableMargin;
            this.InitMargin = initMargin;
            this.MaintMargin = maintMargin;
            this.SessionMargin = sessionMargin;
            this.TargetExcessMargin = targetExcessMargin;
            this.VarMargin = varMargin;
            this.RealisedGrossPnl = realisedGrossPnl;
            this.RealisedTax = realisedTax;
            this.RealisedPnl = realisedPnl;
            this.UnrealisedGrossPnl = unrealisedGrossPnl;
            this.LongBankrupt = longBankrupt;
            this.ShortBankrupt = shortBankrupt;
            this.TaxBase = taxBase;
            // use default value if no "indicativeTaxRate" provided
            if (indicativeTaxRate == null)
            {
                this.IndicativeTaxRate = 0.0;
            }
            else
            {
                this.IndicativeTaxRate = indicativeTaxRate;
            }
            this.IndicativeTax = indicativeTax;
            this.UnrealisedTax = unrealisedTax;
            this.UnrealisedPnl = unrealisedPnl;
            // use default value if no "unrealisedPnlPcnt" provided
            if (unrealisedPnlPcnt == null)
            {
                this.UnrealisedPnlPcnt = 0.0;
            }
            else
            {
                this.UnrealisedPnlPcnt = unrealisedPnlPcnt;
            }
            // use default value if no "unrealisedRoePcnt" provided
            if (unrealisedRoePcnt == null)
            {
                this.UnrealisedRoePcnt = 0.0;
            }
            else
            {
                this.UnrealisedRoePcnt = unrealisedRoePcnt;
            }
            // use default value if no "simpleQty" provided
            if (simpleQty == null)
            {
                this.SimpleQty = 0.0;
            }
            else
            {
                this.SimpleQty = simpleQty;
            }
            // use default value if no "simpleCost" provided
            if (simpleCost == null)
            {
                this.SimpleCost = 0.0;
            }
            else
            {
                this.SimpleCost = simpleCost;
            }
            // use default value if no "simpleValue" provided
            if (simpleValue == null)
            {
                this.SimpleValue = 0.0;
            }
            else
            {
                this.SimpleValue = simpleValue;
            }
            // use default value if no "simplePnl" provided
            if (simplePnl == null)
            {
                this.SimplePnl = 0.0;
            }
            else
            {
                this.SimplePnl = simplePnl;
            }
            // use default value if no "simplePnlPcnt" provided
            if (simplePnlPcnt == null)
            {
                this.SimplePnlPcnt = 0.0;
            }
            else
            {
                this.SimplePnlPcnt = simplePnlPcnt;
            }
            // use default value if no "avgCostPrice" provided
            if (avgCostPrice == null)
            {
                this.AvgCostPrice = 0.0;
            }
            else
            {
                this.AvgCostPrice = avgCostPrice;
            }
            // use default value if no "avgEntryPrice" provided
            if (avgEntryPrice == null)
            {
                this.AvgEntryPrice = 0.0;
            }
            else
            {
                this.AvgEntryPrice = avgEntryPrice;
            }
            // use default value if no "breakEvenPrice" provided
            if (breakEvenPrice == null)
            {
                this.BreakEvenPrice = 0.0;
            }
            else
            {
                this.BreakEvenPrice = breakEvenPrice;
            }
            // use default value if no "marginCallPrice" provided
            if (marginCallPrice == null)
            {
                this.MarginCallPrice = 0.0;
            }
            else
            {
                this.MarginCallPrice = marginCallPrice;
            }
            // use default value if no "liquidationPrice" provided
            if (liquidationPrice == null)
            {
                this.LiquidationPrice = 0.0;
            }
            else
            {
                this.LiquidationPrice = liquidationPrice;
            }
            // use default value if no "bankruptPrice" provided
            if (bankruptPrice == null)
            {
                this.BankruptPrice = 0.0;
            }
            else
            {
                this.BankruptPrice = bankruptPrice;
            }
            this.Timestamp = timestamp;
            // use default value if no "lastPrice" provided
            if (lastPrice == null)
            {
                this.LastPrice = 0.0;
            }
            else
            {
                this.LastPrice = lastPrice;
            }
            this.LastValue = lastValue;
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public decimal? Account { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name="underlying", EmitDefaultValue=false)]
        public string Underlying { get; set; }

        /// <summary>
        /// Gets or Sets QuoteCurrency
        /// </summary>
        [DataMember(Name="quoteCurrency", EmitDefaultValue=false)]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double? Commission { get; set; }

        /// <summary>
        /// Gets or Sets InitMarginReq
        /// </summary>
        [DataMember(Name="initMarginReq", EmitDefaultValue=false)]
        public double? InitMarginReq { get; set; }

        /// <summary>
        /// Gets or Sets MaintMarginReq
        /// </summary>
        [DataMember(Name="maintMarginReq", EmitDefaultValue=false)]
        public double? MaintMarginReq { get; set; }

        /// <summary>
        /// Gets or Sets RiskLimit
        /// </summary>
        [DataMember(Name="riskLimit", EmitDefaultValue=false)]
        public decimal? RiskLimit { get; set; }

        /// <summary>
        /// Gets or Sets Leverage
        /// </summary>
        [DataMember(Name="leverage", EmitDefaultValue=false)]
        public double? Leverage { get; set; }

        /// <summary>
        /// Gets or Sets CrossMargin
        /// </summary>
        [DataMember(Name="crossMargin", EmitDefaultValue=false)]
        public bool? CrossMargin { get; set; }

        /// <summary>
        /// Gets or Sets DeleveragePercentile
        /// </summary>
        [DataMember(Name="deleveragePercentile", EmitDefaultValue=false)]
        public double? DeleveragePercentile { get; set; }

        /// <summary>
        /// Gets or Sets RebalancedPnl
        /// </summary>
        [DataMember(Name="rebalancedPnl", EmitDefaultValue=false)]
        public decimal? RebalancedPnl { get; set; }

        /// <summary>
        /// Gets or Sets PrevRealisedPnl
        /// </summary>
        [DataMember(Name="prevRealisedPnl", EmitDefaultValue=false)]
        public decimal? PrevRealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets PrevUnrealisedPnl
        /// </summary>
        [DataMember(Name="prevUnrealisedPnl", EmitDefaultValue=false)]
        public decimal? PrevUnrealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets PrevClosePrice
        /// </summary>
        [DataMember(Name="prevClosePrice", EmitDefaultValue=false)]
        public double? PrevClosePrice { get; set; }

        /// <summary>
        /// Gets or Sets OpeningTimestamp
        /// </summary>
        [DataMember(Name="openingTimestamp", EmitDefaultValue=false)]
        public DateTime? OpeningTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets OpeningQty
        /// </summary>
        [DataMember(Name="openingQty", EmitDefaultValue=false)]
        public decimal? OpeningQty { get; set; }

        /// <summary>
        /// Gets or Sets OpeningCost
        /// </summary>
        [DataMember(Name="openingCost", EmitDefaultValue=false)]
        public decimal? OpeningCost { get; set; }

        /// <summary>
        /// Gets or Sets OpeningComm
        /// </summary>
        [DataMember(Name="openingComm", EmitDefaultValue=false)]
        public decimal? OpeningComm { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderBuyQty
        /// </summary>
        [DataMember(Name="openOrderBuyQty", EmitDefaultValue=false)]
        public decimal? OpenOrderBuyQty { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderBuyCost
        /// </summary>
        [DataMember(Name="openOrderBuyCost", EmitDefaultValue=false)]
        public decimal? OpenOrderBuyCost { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderBuyPremium
        /// </summary>
        [DataMember(Name="openOrderBuyPremium", EmitDefaultValue=false)]
        public decimal? OpenOrderBuyPremium { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderSellQty
        /// </summary>
        [DataMember(Name="openOrderSellQty", EmitDefaultValue=false)]
        public decimal? OpenOrderSellQty { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderSellCost
        /// </summary>
        [DataMember(Name="openOrderSellCost", EmitDefaultValue=false)]
        public decimal? OpenOrderSellCost { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderSellPremium
        /// </summary>
        [DataMember(Name="openOrderSellPremium", EmitDefaultValue=false)]
        public decimal? OpenOrderSellPremium { get; set; }

        /// <summary>
        /// Gets or Sets ExecBuyQty
        /// </summary>
        [DataMember(Name="execBuyQty", EmitDefaultValue=false)]
        public decimal? ExecBuyQty { get; set; }

        /// <summary>
        /// Gets or Sets ExecBuyCost
        /// </summary>
        [DataMember(Name="execBuyCost", EmitDefaultValue=false)]
        public decimal? ExecBuyCost { get; set; }

        /// <summary>
        /// Gets or Sets ExecSellQty
        /// </summary>
        [DataMember(Name="execSellQty", EmitDefaultValue=false)]
        public decimal? ExecSellQty { get; set; }

        /// <summary>
        /// Gets or Sets ExecSellCost
        /// </summary>
        [DataMember(Name="execSellCost", EmitDefaultValue=false)]
        public decimal? ExecSellCost { get; set; }

        /// <summary>
        /// Gets or Sets ExecQty
        /// </summary>
        [DataMember(Name="execQty", EmitDefaultValue=false)]
        public decimal? ExecQty { get; set; }

        /// <summary>
        /// Gets or Sets ExecCost
        /// </summary>
        [DataMember(Name="execCost", EmitDefaultValue=false)]
        public decimal? ExecCost { get; set; }

        /// <summary>
        /// Gets or Sets ExecComm
        /// </summary>
        [DataMember(Name="execComm", EmitDefaultValue=false)]
        public decimal? ExecComm { get; set; }

        /// <summary>
        /// Gets or Sets CurrentTimestamp
        /// </summary>
        [DataMember(Name="currentTimestamp", EmitDefaultValue=false)]
        public DateTime? CurrentTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets CurrentQty
        /// </summary>
        [DataMember(Name="currentQty", EmitDefaultValue=false)]
        public decimal? CurrentQty { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCost
        /// </summary>
        [DataMember(Name="currentCost", EmitDefaultValue=false)]
        public decimal? CurrentCost { get; set; }

        /// <summary>
        /// Gets or Sets CurrentComm
        /// </summary>
        [DataMember(Name="currentComm", EmitDefaultValue=false)]
        public decimal? CurrentComm { get; set; }

        /// <summary>
        /// Gets or Sets RealisedCost
        /// </summary>
        [DataMember(Name="realisedCost", EmitDefaultValue=false)]
        public decimal? RealisedCost { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedCost
        /// </summary>
        [DataMember(Name="unrealisedCost", EmitDefaultValue=false)]
        public decimal? UnrealisedCost { get; set; }

        /// <summary>
        /// Gets or Sets GrossOpenCost
        /// </summary>
        [DataMember(Name="grossOpenCost", EmitDefaultValue=false)]
        public decimal? GrossOpenCost { get; set; }

        /// <summary>
        /// Gets or Sets GrossOpenPremium
        /// </summary>
        [DataMember(Name="grossOpenPremium", EmitDefaultValue=false)]
        public decimal? GrossOpenPremium { get; set; }

        /// <summary>
        /// Gets or Sets GrossExecCost
        /// </summary>
        [DataMember(Name="grossExecCost", EmitDefaultValue=false)]
        public decimal? GrossExecCost { get; set; }

        /// <summary>
        /// Gets or Sets IsOpen
        /// </summary>
        [DataMember(Name="isOpen", EmitDefaultValue=false)]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// Gets or Sets MarkPrice
        /// </summary>
        [DataMember(Name="markPrice", EmitDefaultValue=false)]
        public double? MarkPrice { get; set; }

        /// <summary>
        /// Gets or Sets MarkValue
        /// </summary>
        [DataMember(Name="markValue", EmitDefaultValue=false)]
        public decimal? MarkValue { get; set; }

        /// <summary>
        /// Gets or Sets RiskValue
        /// </summary>
        [DataMember(Name="riskValue", EmitDefaultValue=false)]
        public decimal? RiskValue { get; set; }

        /// <summary>
        /// Gets or Sets HomeNotional
        /// </summary>
        [DataMember(Name="homeNotional", EmitDefaultValue=false)]
        public double? HomeNotional { get; set; }

        /// <summary>
        /// Gets or Sets ForeignNotional
        /// </summary>
        [DataMember(Name="foreignNotional", EmitDefaultValue=false)]
        public double? ForeignNotional { get; set; }

        /// <summary>
        /// Gets or Sets PosState
        /// </summary>
        [DataMember(Name="posState", EmitDefaultValue=false)]
        public string PosState { get; set; }

        /// <summary>
        /// Gets or Sets PosCost
        /// </summary>
        [DataMember(Name="posCost", EmitDefaultValue=false)]
        public decimal? PosCost { get; set; }

        /// <summary>
        /// Gets or Sets PosCost2
        /// </summary>
        [DataMember(Name="posCost2", EmitDefaultValue=false)]
        public decimal? PosCost2 { get; set; }

        /// <summary>
        /// Gets or Sets PosCross
        /// </summary>
        [DataMember(Name="posCross", EmitDefaultValue=false)]
        public decimal? PosCross { get; set; }

        /// <summary>
        /// Gets or Sets PosInit
        /// </summary>
        [DataMember(Name="posInit", EmitDefaultValue=false)]
        public decimal? PosInit { get; set; }

        /// <summary>
        /// Gets or Sets PosComm
        /// </summary>
        [DataMember(Name="posComm", EmitDefaultValue=false)]
        public decimal? PosComm { get; set; }

        /// <summary>
        /// Gets or Sets PosLoss
        /// </summary>
        [DataMember(Name="posLoss", EmitDefaultValue=false)]
        public decimal? PosLoss { get; set; }

        /// <summary>
        /// Gets or Sets PosMargin
        /// </summary>
        [DataMember(Name="posMargin", EmitDefaultValue=false)]
        public decimal? PosMargin { get; set; }

        /// <summary>
        /// Gets or Sets PosMaint
        /// </summary>
        [DataMember(Name="posMaint", EmitDefaultValue=false)]
        public decimal? PosMaint { get; set; }

        /// <summary>
        /// Gets or Sets PosAllowance
        /// </summary>
        [DataMember(Name="posAllowance", EmitDefaultValue=false)]
        public decimal? PosAllowance { get; set; }

        /// <summary>
        /// Gets or Sets TaxableMargin
        /// </summary>
        [DataMember(Name="taxableMargin", EmitDefaultValue=false)]
        public decimal? TaxableMargin { get; set; }

        /// <summary>
        /// Gets or Sets InitMargin
        /// </summary>
        [DataMember(Name="initMargin", EmitDefaultValue=false)]
        public decimal? InitMargin { get; set; }

        /// <summary>
        /// Gets or Sets MaintMargin
        /// </summary>
        [DataMember(Name="maintMargin", EmitDefaultValue=false)]
        public decimal? MaintMargin { get; set; }

        /// <summary>
        /// Gets or Sets SessionMargin
        /// </summary>
        [DataMember(Name="sessionMargin", EmitDefaultValue=false)]
        public decimal? SessionMargin { get; set; }

        /// <summary>
        /// Gets or Sets TargetExcessMargin
        /// </summary>
        [DataMember(Name="targetExcessMargin", EmitDefaultValue=false)]
        public decimal? TargetExcessMargin { get; set; }

        /// <summary>
        /// Gets or Sets VarMargin
        /// </summary>
        [DataMember(Name="varMargin", EmitDefaultValue=false)]
        public decimal? VarMargin { get; set; }

        /// <summary>
        /// Gets or Sets RealisedGrossPnl
        /// </summary>
        [DataMember(Name="realisedGrossPnl", EmitDefaultValue=false)]
        public decimal? RealisedGrossPnl { get; set; }

        /// <summary>
        /// Gets or Sets RealisedTax
        /// </summary>
        [DataMember(Name="realisedTax", EmitDefaultValue=false)]
        public decimal? RealisedTax { get; set; }

        /// <summary>
        /// Gets or Sets RealisedPnl
        /// </summary>
        [DataMember(Name="realisedPnl", EmitDefaultValue=false)]
        public decimal? RealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedGrossPnl
        /// </summary>
        [DataMember(Name="unrealisedGrossPnl", EmitDefaultValue=false)]
        public decimal? UnrealisedGrossPnl { get; set; }

        /// <summary>
        /// Gets or Sets LongBankrupt
        /// </summary>
        [DataMember(Name="longBankrupt", EmitDefaultValue=false)]
        public decimal? LongBankrupt { get; set; }

        /// <summary>
        /// Gets or Sets ShortBankrupt
        /// </summary>
        [DataMember(Name="shortBankrupt", EmitDefaultValue=false)]
        public decimal? ShortBankrupt { get; set; }

        /// <summary>
        /// Gets or Sets TaxBase
        /// </summary>
        [DataMember(Name="taxBase", EmitDefaultValue=false)]
        public decimal? TaxBase { get; set; }

        /// <summary>
        /// Gets or Sets IndicativeTaxRate
        /// </summary>
        [DataMember(Name="indicativeTaxRate", EmitDefaultValue=false)]
        public double? IndicativeTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets IndicativeTax
        /// </summary>
        [DataMember(Name="indicativeTax", EmitDefaultValue=false)]
        public decimal? IndicativeTax { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedTax
        /// </summary>
        [DataMember(Name="unrealisedTax", EmitDefaultValue=false)]
        public decimal? UnrealisedTax { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedPnl
        /// </summary>
        [DataMember(Name="unrealisedPnl", EmitDefaultValue=false)]
        public decimal? UnrealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedPnlPcnt
        /// </summary>
        [DataMember(Name="unrealisedPnlPcnt", EmitDefaultValue=false)]
        public double? UnrealisedPnlPcnt { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedRoePcnt
        /// </summary>
        [DataMember(Name="unrealisedRoePcnt", EmitDefaultValue=false)]
        public double? UnrealisedRoePcnt { get; set; }

        /// <summary>
        /// Gets or Sets SimpleQty
        /// </summary>
        [DataMember(Name="simpleQty", EmitDefaultValue=false)]
        public double? SimpleQty { get; set; }

        /// <summary>
        /// Gets or Sets SimpleCost
        /// </summary>
        [DataMember(Name="simpleCost", EmitDefaultValue=false)]
        public double? SimpleCost { get; set; }

        /// <summary>
        /// Gets or Sets SimpleValue
        /// </summary>
        [DataMember(Name="simpleValue", EmitDefaultValue=false)]
        public double? SimpleValue { get; set; }

        /// <summary>
        /// Gets or Sets SimplePnl
        /// </summary>
        [DataMember(Name="simplePnl", EmitDefaultValue=false)]
        public double? SimplePnl { get; set; }

        /// <summary>
        /// Gets or Sets SimplePnlPcnt
        /// </summary>
        [DataMember(Name="simplePnlPcnt", EmitDefaultValue=false)]
        public double? SimplePnlPcnt { get; set; }

        /// <summary>
        /// Gets or Sets AvgCostPrice
        /// </summary>
        [DataMember(Name="avgCostPrice", EmitDefaultValue=false)]
        public double? AvgCostPrice { get; set; }

        /// <summary>
        /// Gets or Sets AvgEntryPrice
        /// </summary>
        [DataMember(Name="avgEntryPrice", EmitDefaultValue=false)]
        public double? AvgEntryPrice { get; set; }

        /// <summary>
        /// Gets or Sets BreakEvenPrice
        /// </summary>
        [DataMember(Name="breakEvenPrice", EmitDefaultValue=false)]
        public double? BreakEvenPrice { get; set; }

        /// <summary>
        /// Gets or Sets MarginCallPrice
        /// </summary>
        [DataMember(Name="marginCallPrice", EmitDefaultValue=false)]
        public double? MarginCallPrice { get; set; }

        /// <summary>
        /// Gets or Sets LiquidationPrice
        /// </summary>
        [DataMember(Name="liquidationPrice", EmitDefaultValue=false)]
        public double? LiquidationPrice { get; set; }

        /// <summary>
        /// Gets or Sets BankruptPrice
        /// </summary>
        [DataMember(Name="bankruptPrice", EmitDefaultValue=false)]
        public double? BankruptPrice { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets LastPrice
        /// </summary>
        [DataMember(Name="lastPrice", EmitDefaultValue=false)]
        public double? LastPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastValue
        /// </summary>
        [DataMember(Name="lastValue", EmitDefaultValue=false)]
        public decimal? LastValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  QuoteCurrency: ").Append(QuoteCurrency).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  InitMarginReq: ").Append(InitMarginReq).Append("\n");
            sb.Append("  MaintMarginReq: ").Append(MaintMarginReq).Append("\n");
            sb.Append("  RiskLimit: ").Append(RiskLimit).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  CrossMargin: ").Append(CrossMargin).Append("\n");
            sb.Append("  DeleveragePercentile: ").Append(DeleveragePercentile).Append("\n");
            sb.Append("  RebalancedPnl: ").Append(RebalancedPnl).Append("\n");
            sb.Append("  PrevRealisedPnl: ").Append(PrevRealisedPnl).Append("\n");
            sb.Append("  PrevUnrealisedPnl: ").Append(PrevUnrealisedPnl).Append("\n");
            sb.Append("  PrevClosePrice: ").Append(PrevClosePrice).Append("\n");
            sb.Append("  OpeningTimestamp: ").Append(OpeningTimestamp).Append("\n");
            sb.Append("  OpeningQty: ").Append(OpeningQty).Append("\n");
            sb.Append("  OpeningCost: ").Append(OpeningCost).Append("\n");
            sb.Append("  OpeningComm: ").Append(OpeningComm).Append("\n");
            sb.Append("  OpenOrderBuyQty: ").Append(OpenOrderBuyQty).Append("\n");
            sb.Append("  OpenOrderBuyCost: ").Append(OpenOrderBuyCost).Append("\n");
            sb.Append("  OpenOrderBuyPremium: ").Append(OpenOrderBuyPremium).Append("\n");
            sb.Append("  OpenOrderSellQty: ").Append(OpenOrderSellQty).Append("\n");
            sb.Append("  OpenOrderSellCost: ").Append(OpenOrderSellCost).Append("\n");
            sb.Append("  OpenOrderSellPremium: ").Append(OpenOrderSellPremium).Append("\n");
            sb.Append("  ExecBuyQty: ").Append(ExecBuyQty).Append("\n");
            sb.Append("  ExecBuyCost: ").Append(ExecBuyCost).Append("\n");
            sb.Append("  ExecSellQty: ").Append(ExecSellQty).Append("\n");
            sb.Append("  ExecSellCost: ").Append(ExecSellCost).Append("\n");
            sb.Append("  ExecQty: ").Append(ExecQty).Append("\n");
            sb.Append("  ExecCost: ").Append(ExecCost).Append("\n");
            sb.Append("  ExecComm: ").Append(ExecComm).Append("\n");
            sb.Append("  CurrentTimestamp: ").Append(CurrentTimestamp).Append("\n");
            sb.Append("  CurrentQty: ").Append(CurrentQty).Append("\n");
            sb.Append("  CurrentCost: ").Append(CurrentCost).Append("\n");
            sb.Append("  CurrentComm: ").Append(CurrentComm).Append("\n");
            sb.Append("  RealisedCost: ").Append(RealisedCost).Append("\n");
            sb.Append("  UnrealisedCost: ").Append(UnrealisedCost).Append("\n");
            sb.Append("  GrossOpenCost: ").Append(GrossOpenCost).Append("\n");
            sb.Append("  GrossOpenPremium: ").Append(GrossOpenPremium).Append("\n");
            sb.Append("  GrossExecCost: ").Append(GrossExecCost).Append("\n");
            sb.Append("  IsOpen: ").Append(IsOpen).Append("\n");
            sb.Append("  MarkPrice: ").Append(MarkPrice).Append("\n");
            sb.Append("  MarkValue: ").Append(MarkValue).Append("\n");
            sb.Append("  RiskValue: ").Append(RiskValue).Append("\n");
            sb.Append("  HomeNotional: ").Append(HomeNotional).Append("\n");
            sb.Append("  ForeignNotional: ").Append(ForeignNotional).Append("\n");
            sb.Append("  PosState: ").Append(PosState).Append("\n");
            sb.Append("  PosCost: ").Append(PosCost).Append("\n");
            sb.Append("  PosCost2: ").Append(PosCost2).Append("\n");
            sb.Append("  PosCross: ").Append(PosCross).Append("\n");
            sb.Append("  PosInit: ").Append(PosInit).Append("\n");
            sb.Append("  PosComm: ").Append(PosComm).Append("\n");
            sb.Append("  PosLoss: ").Append(PosLoss).Append("\n");
            sb.Append("  PosMargin: ").Append(PosMargin).Append("\n");
            sb.Append("  PosMaint: ").Append(PosMaint).Append("\n");
            sb.Append("  PosAllowance: ").Append(PosAllowance).Append("\n");
            sb.Append("  TaxableMargin: ").Append(TaxableMargin).Append("\n");
            sb.Append("  InitMargin: ").Append(InitMargin).Append("\n");
            sb.Append("  MaintMargin: ").Append(MaintMargin).Append("\n");
            sb.Append("  SessionMargin: ").Append(SessionMargin).Append("\n");
            sb.Append("  TargetExcessMargin: ").Append(TargetExcessMargin).Append("\n");
            sb.Append("  VarMargin: ").Append(VarMargin).Append("\n");
            sb.Append("  RealisedGrossPnl: ").Append(RealisedGrossPnl).Append("\n");
            sb.Append("  RealisedTax: ").Append(RealisedTax).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  UnrealisedGrossPnl: ").Append(UnrealisedGrossPnl).Append("\n");
            sb.Append("  LongBankrupt: ").Append(LongBankrupt).Append("\n");
            sb.Append("  ShortBankrupt: ").Append(ShortBankrupt).Append("\n");
            sb.Append("  TaxBase: ").Append(TaxBase).Append("\n");
            sb.Append("  IndicativeTaxRate: ").Append(IndicativeTaxRate).Append("\n");
            sb.Append("  IndicativeTax: ").Append(IndicativeTax).Append("\n");
            sb.Append("  UnrealisedTax: ").Append(UnrealisedTax).Append("\n");
            sb.Append("  UnrealisedPnl: ").Append(UnrealisedPnl).Append("\n");
            sb.Append("  UnrealisedPnlPcnt: ").Append(UnrealisedPnlPcnt).Append("\n");
            sb.Append("  UnrealisedRoePcnt: ").Append(UnrealisedRoePcnt).Append("\n");
            sb.Append("  SimpleQty: ").Append(SimpleQty).Append("\n");
            sb.Append("  SimpleCost: ").Append(SimpleCost).Append("\n");
            sb.Append("  SimpleValue: ").Append(SimpleValue).Append("\n");
            sb.Append("  SimplePnl: ").Append(SimplePnl).Append("\n");
            sb.Append("  SimplePnlPcnt: ").Append(SimplePnlPcnt).Append("\n");
            sb.Append("  AvgCostPrice: ").Append(AvgCostPrice).Append("\n");
            sb.Append("  AvgEntryPrice: ").Append(AvgEntryPrice).Append("\n");
            sb.Append("  BreakEvenPrice: ").Append(BreakEvenPrice).Append("\n");
            sb.Append("  MarginCallPrice: ").Append(MarginCallPrice).Append("\n");
            sb.Append("  LiquidationPrice: ").Append(LiquidationPrice).Append("\n");
            sb.Append("  BankruptPrice: ").Append(BankruptPrice).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  LastValue: ").Append(LastValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Position);
        }

        /// <summary>
        /// Returns true if Position instances are equal
        /// </summary>
        /// <param name="input">Instance of Position to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Position input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.QuoteCurrency == input.QuoteCurrency ||
                    (this.QuoteCurrency != null &&
                    this.QuoteCurrency.Equals(input.QuoteCurrency))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.InitMarginReq == input.InitMarginReq ||
                    (this.InitMarginReq != null &&
                    this.InitMarginReq.Equals(input.InitMarginReq))
                ) && 
                (
                    this.MaintMarginReq == input.MaintMarginReq ||
                    (this.MaintMarginReq != null &&
                    this.MaintMarginReq.Equals(input.MaintMarginReq))
                ) && 
                (
                    this.RiskLimit == input.RiskLimit ||
                    (this.RiskLimit != null &&
                    this.RiskLimit.Equals(input.RiskLimit))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.CrossMargin == input.CrossMargin ||
                    (this.CrossMargin != null &&
                    this.CrossMargin.Equals(input.CrossMargin))
                ) && 
                (
                    this.DeleveragePercentile == input.DeleveragePercentile ||
                    (this.DeleveragePercentile != null &&
                    this.DeleveragePercentile.Equals(input.DeleveragePercentile))
                ) && 
                (
                    this.RebalancedPnl == input.RebalancedPnl ||
                    (this.RebalancedPnl != null &&
                    this.RebalancedPnl.Equals(input.RebalancedPnl))
                ) && 
                (
                    this.PrevRealisedPnl == input.PrevRealisedPnl ||
                    (this.PrevRealisedPnl != null &&
                    this.PrevRealisedPnl.Equals(input.PrevRealisedPnl))
                ) && 
                (
                    this.PrevUnrealisedPnl == input.PrevUnrealisedPnl ||
                    (this.PrevUnrealisedPnl != null &&
                    this.PrevUnrealisedPnl.Equals(input.PrevUnrealisedPnl))
                ) && 
                (
                    this.PrevClosePrice == input.PrevClosePrice ||
                    (this.PrevClosePrice != null &&
                    this.PrevClosePrice.Equals(input.PrevClosePrice))
                ) && 
                (
                    this.OpeningTimestamp == input.OpeningTimestamp ||
                    (this.OpeningTimestamp != null &&
                    this.OpeningTimestamp.Equals(input.OpeningTimestamp))
                ) && 
                (
                    this.OpeningQty == input.OpeningQty ||
                    (this.OpeningQty != null &&
                    this.OpeningQty.Equals(input.OpeningQty))
                ) && 
                (
                    this.OpeningCost == input.OpeningCost ||
                    (this.OpeningCost != null &&
                    this.OpeningCost.Equals(input.OpeningCost))
                ) && 
                (
                    this.OpeningComm == input.OpeningComm ||
                    (this.OpeningComm != null &&
                    this.OpeningComm.Equals(input.OpeningComm))
                ) && 
                (
                    this.OpenOrderBuyQty == input.OpenOrderBuyQty ||
                    (this.OpenOrderBuyQty != null &&
                    this.OpenOrderBuyQty.Equals(input.OpenOrderBuyQty))
                ) && 
                (
                    this.OpenOrderBuyCost == input.OpenOrderBuyCost ||
                    (this.OpenOrderBuyCost != null &&
                    this.OpenOrderBuyCost.Equals(input.OpenOrderBuyCost))
                ) && 
                (
                    this.OpenOrderBuyPremium == input.OpenOrderBuyPremium ||
                    (this.OpenOrderBuyPremium != null &&
                    this.OpenOrderBuyPremium.Equals(input.OpenOrderBuyPremium))
                ) && 
                (
                    this.OpenOrderSellQty == input.OpenOrderSellQty ||
                    (this.OpenOrderSellQty != null &&
                    this.OpenOrderSellQty.Equals(input.OpenOrderSellQty))
                ) && 
                (
                    this.OpenOrderSellCost == input.OpenOrderSellCost ||
                    (this.OpenOrderSellCost != null &&
                    this.OpenOrderSellCost.Equals(input.OpenOrderSellCost))
                ) && 
                (
                    this.OpenOrderSellPremium == input.OpenOrderSellPremium ||
                    (this.OpenOrderSellPremium != null &&
                    this.OpenOrderSellPremium.Equals(input.OpenOrderSellPremium))
                ) && 
                (
                    this.ExecBuyQty == input.ExecBuyQty ||
                    (this.ExecBuyQty != null &&
                    this.ExecBuyQty.Equals(input.ExecBuyQty))
                ) && 
                (
                    this.ExecBuyCost == input.ExecBuyCost ||
                    (this.ExecBuyCost != null &&
                    this.ExecBuyCost.Equals(input.ExecBuyCost))
                ) && 
                (
                    this.ExecSellQty == input.ExecSellQty ||
                    (this.ExecSellQty != null &&
                    this.ExecSellQty.Equals(input.ExecSellQty))
                ) && 
                (
                    this.ExecSellCost == input.ExecSellCost ||
                    (this.ExecSellCost != null &&
                    this.ExecSellCost.Equals(input.ExecSellCost))
                ) && 
                (
                    this.ExecQty == input.ExecQty ||
                    (this.ExecQty != null &&
                    this.ExecQty.Equals(input.ExecQty))
                ) && 
                (
                    this.ExecCost == input.ExecCost ||
                    (this.ExecCost != null &&
                    this.ExecCost.Equals(input.ExecCost))
                ) && 
                (
                    this.ExecComm == input.ExecComm ||
                    (this.ExecComm != null &&
                    this.ExecComm.Equals(input.ExecComm))
                ) && 
                (
                    this.CurrentTimestamp == input.CurrentTimestamp ||
                    (this.CurrentTimestamp != null &&
                    this.CurrentTimestamp.Equals(input.CurrentTimestamp))
                ) && 
                (
                    this.CurrentQty == input.CurrentQty ||
                    (this.CurrentQty != null &&
                    this.CurrentQty.Equals(input.CurrentQty))
                ) && 
                (
                    this.CurrentCost == input.CurrentCost ||
                    (this.CurrentCost != null &&
                    this.CurrentCost.Equals(input.CurrentCost))
                ) && 
                (
                    this.CurrentComm == input.CurrentComm ||
                    (this.CurrentComm != null &&
                    this.CurrentComm.Equals(input.CurrentComm))
                ) && 
                (
                    this.RealisedCost == input.RealisedCost ||
                    (this.RealisedCost != null &&
                    this.RealisedCost.Equals(input.RealisedCost))
                ) && 
                (
                    this.UnrealisedCost == input.UnrealisedCost ||
                    (this.UnrealisedCost != null &&
                    this.UnrealisedCost.Equals(input.UnrealisedCost))
                ) && 
                (
                    this.GrossOpenCost == input.GrossOpenCost ||
                    (this.GrossOpenCost != null &&
                    this.GrossOpenCost.Equals(input.GrossOpenCost))
                ) && 
                (
                    this.GrossOpenPremium == input.GrossOpenPremium ||
                    (this.GrossOpenPremium != null &&
                    this.GrossOpenPremium.Equals(input.GrossOpenPremium))
                ) && 
                (
                    this.GrossExecCost == input.GrossExecCost ||
                    (this.GrossExecCost != null &&
                    this.GrossExecCost.Equals(input.GrossExecCost))
                ) && 
                (
                    this.IsOpen == input.IsOpen ||
                    (this.IsOpen != null &&
                    this.IsOpen.Equals(input.IsOpen))
                ) && 
                (
                    this.MarkPrice == input.MarkPrice ||
                    (this.MarkPrice != null &&
                    this.MarkPrice.Equals(input.MarkPrice))
                ) && 
                (
                    this.MarkValue == input.MarkValue ||
                    (this.MarkValue != null &&
                    this.MarkValue.Equals(input.MarkValue))
                ) && 
                (
                    this.RiskValue == input.RiskValue ||
                    (this.RiskValue != null &&
                    this.RiskValue.Equals(input.RiskValue))
                ) && 
                (
                    this.HomeNotional == input.HomeNotional ||
                    (this.HomeNotional != null &&
                    this.HomeNotional.Equals(input.HomeNotional))
                ) && 
                (
                    this.ForeignNotional == input.ForeignNotional ||
                    (this.ForeignNotional != null &&
                    this.ForeignNotional.Equals(input.ForeignNotional))
                ) && 
                (
                    this.PosState == input.PosState ||
                    (this.PosState != null &&
                    this.PosState.Equals(input.PosState))
                ) && 
                (
                    this.PosCost == input.PosCost ||
                    (this.PosCost != null &&
                    this.PosCost.Equals(input.PosCost))
                ) && 
                (
                    this.PosCost2 == input.PosCost2 ||
                    (this.PosCost2 != null &&
                    this.PosCost2.Equals(input.PosCost2))
                ) && 
                (
                    this.PosCross == input.PosCross ||
                    (this.PosCross != null &&
                    this.PosCross.Equals(input.PosCross))
                ) && 
                (
                    this.PosInit == input.PosInit ||
                    (this.PosInit != null &&
                    this.PosInit.Equals(input.PosInit))
                ) && 
                (
                    this.PosComm == input.PosComm ||
                    (this.PosComm != null &&
                    this.PosComm.Equals(input.PosComm))
                ) && 
                (
                    this.PosLoss == input.PosLoss ||
                    (this.PosLoss != null &&
                    this.PosLoss.Equals(input.PosLoss))
                ) && 
                (
                    this.PosMargin == input.PosMargin ||
                    (this.PosMargin != null &&
                    this.PosMargin.Equals(input.PosMargin))
                ) && 
                (
                    this.PosMaint == input.PosMaint ||
                    (this.PosMaint != null &&
                    this.PosMaint.Equals(input.PosMaint))
                ) && 
                (
                    this.PosAllowance == input.PosAllowance ||
                    (this.PosAllowance != null &&
                    this.PosAllowance.Equals(input.PosAllowance))
                ) && 
                (
                    this.TaxableMargin == input.TaxableMargin ||
                    (this.TaxableMargin != null &&
                    this.TaxableMargin.Equals(input.TaxableMargin))
                ) && 
                (
                    this.InitMargin == input.InitMargin ||
                    (this.InitMargin != null &&
                    this.InitMargin.Equals(input.InitMargin))
                ) && 
                (
                    this.MaintMargin == input.MaintMargin ||
                    (this.MaintMargin != null &&
                    this.MaintMargin.Equals(input.MaintMargin))
                ) && 
                (
                    this.SessionMargin == input.SessionMargin ||
                    (this.SessionMargin != null &&
                    this.SessionMargin.Equals(input.SessionMargin))
                ) && 
                (
                    this.TargetExcessMargin == input.TargetExcessMargin ||
                    (this.TargetExcessMargin != null &&
                    this.TargetExcessMargin.Equals(input.TargetExcessMargin))
                ) && 
                (
                    this.VarMargin == input.VarMargin ||
                    (this.VarMargin != null &&
                    this.VarMargin.Equals(input.VarMargin))
                ) && 
                (
                    this.RealisedGrossPnl == input.RealisedGrossPnl ||
                    (this.RealisedGrossPnl != null &&
                    this.RealisedGrossPnl.Equals(input.RealisedGrossPnl))
                ) && 
                (
                    this.RealisedTax == input.RealisedTax ||
                    (this.RealisedTax != null &&
                    this.RealisedTax.Equals(input.RealisedTax))
                ) && 
                (
                    this.RealisedPnl == input.RealisedPnl ||
                    (this.RealisedPnl != null &&
                    this.RealisedPnl.Equals(input.RealisedPnl))
                ) && 
                (
                    this.UnrealisedGrossPnl == input.UnrealisedGrossPnl ||
                    (this.UnrealisedGrossPnl != null &&
                    this.UnrealisedGrossPnl.Equals(input.UnrealisedGrossPnl))
                ) && 
                (
                    this.LongBankrupt == input.LongBankrupt ||
                    (this.LongBankrupt != null &&
                    this.LongBankrupt.Equals(input.LongBankrupt))
                ) && 
                (
                    this.ShortBankrupt == input.ShortBankrupt ||
                    (this.ShortBankrupt != null &&
                    this.ShortBankrupt.Equals(input.ShortBankrupt))
                ) && 
                (
                    this.TaxBase == input.TaxBase ||
                    (this.TaxBase != null &&
                    this.TaxBase.Equals(input.TaxBase))
                ) && 
                (
                    this.IndicativeTaxRate == input.IndicativeTaxRate ||
                    (this.IndicativeTaxRate != null &&
                    this.IndicativeTaxRate.Equals(input.IndicativeTaxRate))
                ) && 
                (
                    this.IndicativeTax == input.IndicativeTax ||
                    (this.IndicativeTax != null &&
                    this.IndicativeTax.Equals(input.IndicativeTax))
                ) && 
                (
                    this.UnrealisedTax == input.UnrealisedTax ||
                    (this.UnrealisedTax != null &&
                    this.UnrealisedTax.Equals(input.UnrealisedTax))
                ) && 
                (
                    this.UnrealisedPnl == input.UnrealisedPnl ||
                    (this.UnrealisedPnl != null &&
                    this.UnrealisedPnl.Equals(input.UnrealisedPnl))
                ) && 
                (
                    this.UnrealisedPnlPcnt == input.UnrealisedPnlPcnt ||
                    (this.UnrealisedPnlPcnt != null &&
                    this.UnrealisedPnlPcnt.Equals(input.UnrealisedPnlPcnt))
                ) && 
                (
                    this.UnrealisedRoePcnt == input.UnrealisedRoePcnt ||
                    (this.UnrealisedRoePcnt != null &&
                    this.UnrealisedRoePcnt.Equals(input.UnrealisedRoePcnt))
                ) && 
                (
                    this.SimpleQty == input.SimpleQty ||
                    (this.SimpleQty != null &&
                    this.SimpleQty.Equals(input.SimpleQty))
                ) && 
                (
                    this.SimpleCost == input.SimpleCost ||
                    (this.SimpleCost != null &&
                    this.SimpleCost.Equals(input.SimpleCost))
                ) && 
                (
                    this.SimpleValue == input.SimpleValue ||
                    (this.SimpleValue != null &&
                    this.SimpleValue.Equals(input.SimpleValue))
                ) && 
                (
                    this.SimplePnl == input.SimplePnl ||
                    (this.SimplePnl != null &&
                    this.SimplePnl.Equals(input.SimplePnl))
                ) && 
                (
                    this.SimplePnlPcnt == input.SimplePnlPcnt ||
                    (this.SimplePnlPcnt != null &&
                    this.SimplePnlPcnt.Equals(input.SimplePnlPcnt))
                ) && 
                (
                    this.AvgCostPrice == input.AvgCostPrice ||
                    (this.AvgCostPrice != null &&
                    this.AvgCostPrice.Equals(input.AvgCostPrice))
                ) && 
                (
                    this.AvgEntryPrice == input.AvgEntryPrice ||
                    (this.AvgEntryPrice != null &&
                    this.AvgEntryPrice.Equals(input.AvgEntryPrice))
                ) && 
                (
                    this.BreakEvenPrice == input.BreakEvenPrice ||
                    (this.BreakEvenPrice != null &&
                    this.BreakEvenPrice.Equals(input.BreakEvenPrice))
                ) && 
                (
                    this.MarginCallPrice == input.MarginCallPrice ||
                    (this.MarginCallPrice != null &&
                    this.MarginCallPrice.Equals(input.MarginCallPrice))
                ) && 
                (
                    this.LiquidationPrice == input.LiquidationPrice ||
                    (this.LiquidationPrice != null &&
                    this.LiquidationPrice.Equals(input.LiquidationPrice))
                ) && 
                (
                    this.BankruptPrice == input.BankruptPrice ||
                    (this.BankruptPrice != null &&
                    this.BankruptPrice.Equals(input.BankruptPrice))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                ) && 
                (
                    this.LastValue == input.LastValue ||
                    (this.LastValue != null &&
                    this.LastValue.Equals(input.LastValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Underlying != null)
                    hashCode = hashCode * 59 + this.Underlying.GetHashCode();
                if (this.QuoteCurrency != null)
                    hashCode = hashCode * 59 + this.QuoteCurrency.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                if (this.InitMarginReq != null)
                    hashCode = hashCode * 59 + this.InitMarginReq.GetHashCode();
                if (this.MaintMarginReq != null)
                    hashCode = hashCode * 59 + this.MaintMarginReq.GetHashCode();
                if (this.RiskLimit != null)
                    hashCode = hashCode * 59 + this.RiskLimit.GetHashCode();
                if (this.Leverage != null)
                    hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                if (this.CrossMargin != null)
                    hashCode = hashCode * 59 + this.CrossMargin.GetHashCode();
                if (this.DeleveragePercentile != null)
                    hashCode = hashCode * 59 + this.DeleveragePercentile.GetHashCode();
                if (this.RebalancedPnl != null)
                    hashCode = hashCode * 59 + this.RebalancedPnl.GetHashCode();
                if (this.PrevRealisedPnl != null)
                    hashCode = hashCode * 59 + this.PrevRealisedPnl.GetHashCode();
                if (this.PrevUnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.PrevUnrealisedPnl.GetHashCode();
                if (this.PrevClosePrice != null)
                    hashCode = hashCode * 59 + this.PrevClosePrice.GetHashCode();
                if (this.OpeningTimestamp != null)
                    hashCode = hashCode * 59 + this.OpeningTimestamp.GetHashCode();
                if (this.OpeningQty != null)
                    hashCode = hashCode * 59 + this.OpeningQty.GetHashCode();
                if (this.OpeningCost != null)
                    hashCode = hashCode * 59 + this.OpeningCost.GetHashCode();
                if (this.OpeningComm != null)
                    hashCode = hashCode * 59 + this.OpeningComm.GetHashCode();
                if (this.OpenOrderBuyQty != null)
                    hashCode = hashCode * 59 + this.OpenOrderBuyQty.GetHashCode();
                if (this.OpenOrderBuyCost != null)
                    hashCode = hashCode * 59 + this.OpenOrderBuyCost.GetHashCode();
                if (this.OpenOrderBuyPremium != null)
                    hashCode = hashCode * 59 + this.OpenOrderBuyPremium.GetHashCode();
                if (this.OpenOrderSellQty != null)
                    hashCode = hashCode * 59 + this.OpenOrderSellQty.GetHashCode();
                if (this.OpenOrderSellCost != null)
                    hashCode = hashCode * 59 + this.OpenOrderSellCost.GetHashCode();
                if (this.OpenOrderSellPremium != null)
                    hashCode = hashCode * 59 + this.OpenOrderSellPremium.GetHashCode();
                if (this.ExecBuyQty != null)
                    hashCode = hashCode * 59 + this.ExecBuyQty.GetHashCode();
                if (this.ExecBuyCost != null)
                    hashCode = hashCode * 59 + this.ExecBuyCost.GetHashCode();
                if (this.ExecSellQty != null)
                    hashCode = hashCode * 59 + this.ExecSellQty.GetHashCode();
                if (this.ExecSellCost != null)
                    hashCode = hashCode * 59 + this.ExecSellCost.GetHashCode();
                if (this.ExecQty != null)
                    hashCode = hashCode * 59 + this.ExecQty.GetHashCode();
                if (this.ExecCost != null)
                    hashCode = hashCode * 59 + this.ExecCost.GetHashCode();
                if (this.ExecComm != null)
                    hashCode = hashCode * 59 + this.ExecComm.GetHashCode();
                if (this.CurrentTimestamp != null)
                    hashCode = hashCode * 59 + this.CurrentTimestamp.GetHashCode();
                if (this.CurrentQty != null)
                    hashCode = hashCode * 59 + this.CurrentQty.GetHashCode();
                if (this.CurrentCost != null)
                    hashCode = hashCode * 59 + this.CurrentCost.GetHashCode();
                if (this.CurrentComm != null)
                    hashCode = hashCode * 59 + this.CurrentComm.GetHashCode();
                if (this.RealisedCost != null)
                    hashCode = hashCode * 59 + this.RealisedCost.GetHashCode();
                if (this.UnrealisedCost != null)
                    hashCode = hashCode * 59 + this.UnrealisedCost.GetHashCode();
                if (this.GrossOpenCost != null)
                    hashCode = hashCode * 59 + this.GrossOpenCost.GetHashCode();
                if (this.GrossOpenPremium != null)
                    hashCode = hashCode * 59 + this.GrossOpenPremium.GetHashCode();
                if (this.GrossExecCost != null)
                    hashCode = hashCode * 59 + this.GrossExecCost.GetHashCode();
                if (this.IsOpen != null)
                    hashCode = hashCode * 59 + this.IsOpen.GetHashCode();
                if (this.MarkPrice != null)
                    hashCode = hashCode * 59 + this.MarkPrice.GetHashCode();
                if (this.MarkValue != null)
                    hashCode = hashCode * 59 + this.MarkValue.GetHashCode();
                if (this.RiskValue != null)
                    hashCode = hashCode * 59 + this.RiskValue.GetHashCode();
                if (this.HomeNotional != null)
                    hashCode = hashCode * 59 + this.HomeNotional.GetHashCode();
                if (this.ForeignNotional != null)
                    hashCode = hashCode * 59 + this.ForeignNotional.GetHashCode();
                if (this.PosState != null)
                    hashCode = hashCode * 59 + this.PosState.GetHashCode();
                if (this.PosCost != null)
                    hashCode = hashCode * 59 + this.PosCost.GetHashCode();
                if (this.PosCost2 != null)
                    hashCode = hashCode * 59 + this.PosCost2.GetHashCode();
                if (this.PosCross != null)
                    hashCode = hashCode * 59 + this.PosCross.GetHashCode();
                if (this.PosInit != null)
                    hashCode = hashCode * 59 + this.PosInit.GetHashCode();
                if (this.PosComm != null)
                    hashCode = hashCode * 59 + this.PosComm.GetHashCode();
                if (this.PosLoss != null)
                    hashCode = hashCode * 59 + this.PosLoss.GetHashCode();
                if (this.PosMargin != null)
                    hashCode = hashCode * 59 + this.PosMargin.GetHashCode();
                if (this.PosMaint != null)
                    hashCode = hashCode * 59 + this.PosMaint.GetHashCode();
                if (this.PosAllowance != null)
                    hashCode = hashCode * 59 + this.PosAllowance.GetHashCode();
                if (this.TaxableMargin != null)
                    hashCode = hashCode * 59 + this.TaxableMargin.GetHashCode();
                if (this.InitMargin != null)
                    hashCode = hashCode * 59 + this.InitMargin.GetHashCode();
                if (this.MaintMargin != null)
                    hashCode = hashCode * 59 + this.MaintMargin.GetHashCode();
                if (this.SessionMargin != null)
                    hashCode = hashCode * 59 + this.SessionMargin.GetHashCode();
                if (this.TargetExcessMargin != null)
                    hashCode = hashCode * 59 + this.TargetExcessMargin.GetHashCode();
                if (this.VarMargin != null)
                    hashCode = hashCode * 59 + this.VarMargin.GetHashCode();
                if (this.RealisedGrossPnl != null)
                    hashCode = hashCode * 59 + this.RealisedGrossPnl.GetHashCode();
                if (this.RealisedTax != null)
                    hashCode = hashCode * 59 + this.RealisedTax.GetHashCode();
                if (this.RealisedPnl != null)
                    hashCode = hashCode * 59 + this.RealisedPnl.GetHashCode();
                if (this.UnrealisedGrossPnl != null)
                    hashCode = hashCode * 59 + this.UnrealisedGrossPnl.GetHashCode();
                if (this.LongBankrupt != null)
                    hashCode = hashCode * 59 + this.LongBankrupt.GetHashCode();
                if (this.ShortBankrupt != null)
                    hashCode = hashCode * 59 + this.ShortBankrupt.GetHashCode();
                if (this.TaxBase != null)
                    hashCode = hashCode * 59 + this.TaxBase.GetHashCode();
                if (this.IndicativeTaxRate != null)
                    hashCode = hashCode * 59 + this.IndicativeTaxRate.GetHashCode();
                if (this.IndicativeTax != null)
                    hashCode = hashCode * 59 + this.IndicativeTax.GetHashCode();
                if (this.UnrealisedTax != null)
                    hashCode = hashCode * 59 + this.UnrealisedTax.GetHashCode();
                if (this.UnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnl.GetHashCode();
                if (this.UnrealisedPnlPcnt != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnlPcnt.GetHashCode();
                if (this.UnrealisedRoePcnt != null)
                    hashCode = hashCode * 59 + this.UnrealisedRoePcnt.GetHashCode();
                if (this.SimpleQty != null)
                    hashCode = hashCode * 59 + this.SimpleQty.GetHashCode();
                if (this.SimpleCost != null)
                    hashCode = hashCode * 59 + this.SimpleCost.GetHashCode();
                if (this.SimpleValue != null)
                    hashCode = hashCode * 59 + this.SimpleValue.GetHashCode();
                if (this.SimplePnl != null)
                    hashCode = hashCode * 59 + this.SimplePnl.GetHashCode();
                if (this.SimplePnlPcnt != null)
                    hashCode = hashCode * 59 + this.SimplePnlPcnt.GetHashCode();
                if (this.AvgCostPrice != null)
                    hashCode = hashCode * 59 + this.AvgCostPrice.GetHashCode();
                if (this.AvgEntryPrice != null)
                    hashCode = hashCode * 59 + this.AvgEntryPrice.GetHashCode();
                if (this.BreakEvenPrice != null)
                    hashCode = hashCode * 59 + this.BreakEvenPrice.GetHashCode();
                if (this.MarginCallPrice != null)
                    hashCode = hashCode * 59 + this.MarginCallPrice.GetHashCode();
                if (this.LiquidationPrice != null)
                    hashCode = hashCode * 59 + this.LiquidationPrice.GetHashCode();
                if (this.BankruptPrice != null)
                    hashCode = hashCode * 59 + this.BankruptPrice.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.LastValue != null)
                    hashCode = hashCode * 59 + this.LastValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
