/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  - --  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  - --  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Daily Quote Fill Ratio Statistic
    /// </summary>
    [DataContract]
    public partial class QuoteFillRatio :  IEquatable<QuoteFillRatio>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteFillRatio" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteFillRatio() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteFillRatio" /> class.
        /// </summary>
        /// <param name="date">date (required).</param>
        /// <param name="account">account.</param>
        /// <param name="quoteCount">quoteCount.</param>
        /// <param name="dealtCount">dealtCount.</param>
        /// <param name="quotesMavg7">quotesMavg7.</param>
        /// <param name="dealtMavg7">dealtMavg7.</param>
        /// <param name="quoteFillRatioMavg7">quoteFillRatioMavg7.</param>
        public QuoteFillRatio(DateTime? date = default(DateTime?), double? account = default(double?), double? quoteCount = default(double?), double? dealtCount = default(double?), double? quotesMavg7 = default(double?), double? dealtMavg7 = default(double?), double? quoteFillRatioMavg7 = default(double?))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for QuoteFillRatio and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            this.Account = account;
            this.QuoteCount = quoteCount;
            this.DealtCount = dealtCount;
            this.QuotesMavg7 = quotesMavg7;
            this.DealtMavg7 = dealtMavg7;
            this.QuoteFillRatioMavg7 = quoteFillRatioMavg7;
        }
        
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public double? Account { get; set; }

        /// <summary>
        /// Gets or Sets QuoteCount
        /// </summary>
        [DataMember(Name="quoteCount", EmitDefaultValue=false)]
        public double? QuoteCount { get; set; }

        /// <summary>
        /// Gets or Sets DealtCount
        /// </summary>
        [DataMember(Name="dealtCount", EmitDefaultValue=false)]
        public double? DealtCount { get; set; }

        /// <summary>
        /// Gets or Sets QuotesMavg7
        /// </summary>
        [DataMember(Name="quotesMavg7", EmitDefaultValue=false)]
        public double? QuotesMavg7 { get; set; }

        /// <summary>
        /// Gets or Sets DealtMavg7
        /// </summary>
        [DataMember(Name="dealtMavg7", EmitDefaultValue=false)]
        public double? DealtMavg7 { get; set; }

        /// <summary>
        /// Gets or Sets QuoteFillRatioMavg7
        /// </summary>
        [DataMember(Name="quoteFillRatioMavg7", EmitDefaultValue=false)]
        public double? QuoteFillRatioMavg7 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteFillRatio {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  QuoteCount: ").Append(QuoteCount).Append("\n");
            sb.Append("  DealtCount: ").Append(DealtCount).Append("\n");
            sb.Append("  QuotesMavg7: ").Append(QuotesMavg7).Append("\n");
            sb.Append("  DealtMavg7: ").Append(DealtMavg7).Append("\n");
            sb.Append("  QuoteFillRatioMavg7: ").Append(QuoteFillRatioMavg7).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteFillRatio);
        }

        /// <summary>
        /// Returns true if QuoteFillRatio instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteFillRatio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteFillRatio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.QuoteCount == input.QuoteCount ||
                    (this.QuoteCount != null &&
                    this.QuoteCount.Equals(input.QuoteCount))
                ) && 
                (
                    this.DealtCount == input.DealtCount ||
                    (this.DealtCount != null &&
                    this.DealtCount.Equals(input.DealtCount))
                ) && 
                (
                    this.QuotesMavg7 == input.QuotesMavg7 ||
                    (this.QuotesMavg7 != null &&
                    this.QuotesMavg7.Equals(input.QuotesMavg7))
                ) && 
                (
                    this.DealtMavg7 == input.DealtMavg7 ||
                    (this.DealtMavg7 != null &&
                    this.DealtMavg7.Equals(input.DealtMavg7))
                ) && 
                (
                    this.QuoteFillRatioMavg7 == input.QuoteFillRatioMavg7 ||
                    (this.QuoteFillRatioMavg7 != null &&
                    this.QuoteFillRatioMavg7.Equals(input.QuoteFillRatioMavg7))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.QuoteCount != null)
                    hashCode = hashCode * 59 + this.QuoteCount.GetHashCode();
                if (this.DealtCount != null)
                    hashCode = hashCode * 59 + this.DealtCount.GetHashCode();
                if (this.QuotesMavg7 != null)
                    hashCode = hashCode * 59 + this.QuotesMavg7.GetHashCode();
                if (this.DealtMavg7 != null)
                    hashCode = hashCode * 59 + this.DealtMavg7.GetHashCode();
                if (this.QuoteFillRatioMavg7 != null)
                    hashCode = hashCode * 59 + this.QuoteFillRatioMavg7.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
