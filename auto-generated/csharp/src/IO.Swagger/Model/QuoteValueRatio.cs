/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  - --  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  - --  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Hourly Quote Value Ratio Statistic
    /// </summary>
    [DataContract]
    public partial class QuoteValueRatio :  IEquatable<QuoteValueRatio>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteValueRatio" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="account">account.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="quoteCount">quoteCount.</param>
        /// <param name="volumeXBT">volumeXBT.</param>
        /// <param name="qVR">qVR.</param>
        /// <param name="id">id.</param>
        public QuoteValueRatio(DateTime? timestamp = default(DateTime?), double? account = default(double?), string symbol = default(string), double? quoteCount = default(double?), double? volumeXBT = default(double?), double? qVR = default(double?), double? id = default(double?))
        {
            this.Timestamp = timestamp;
            this.Account = account;
            this.Symbol = symbol;
            this.QuoteCount = quoteCount;
            this.VolumeXBT = volumeXBT;
            this.QVR = qVR;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public double? Account { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets QuoteCount
        /// </summary>
        [DataMember(Name="quoteCount", EmitDefaultValue=false)]
        public double? QuoteCount { get; set; }

        /// <summary>
        /// Gets or Sets VolumeXBT
        /// </summary>
        [DataMember(Name="volumeXBT", EmitDefaultValue=false)]
        public double? VolumeXBT { get; set; }

        /// <summary>
        /// Gets or Sets QVR
        /// </summary>
        [DataMember(Name="QVR", EmitDefaultValue=false)]
        public double? QVR { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public double? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteValueRatio {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  QuoteCount: ").Append(QuoteCount).Append("\n");
            sb.Append("  VolumeXBT: ").Append(VolumeXBT).Append("\n");
            sb.Append("  QVR: ").Append(QVR).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteValueRatio);
        }

        /// <summary>
        /// Returns true if QuoteValueRatio instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteValueRatio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteValueRatio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.QuoteCount == input.QuoteCount ||
                    (this.QuoteCount != null &&
                    this.QuoteCount.Equals(input.QuoteCount))
                ) && 
                (
                    this.VolumeXBT == input.VolumeXBT ||
                    (this.VolumeXBT != null &&
                    this.VolumeXBT.Equals(input.VolumeXBT))
                ) && 
                (
                    this.QVR == input.QVR ||
                    (this.QVR != null &&
                    this.QVR.Equals(input.QVR))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.QuoteCount != null)
                    hashCode = hashCode * 59 + this.QuoteCount.GetHashCode();
                if (this.VolumeXBT != null)
                    hashCode = hashCode * 59 + this.VolumeXBT.GetHashCode();
                if (this.QVR != null)
                    hashCode = hashCode * 59 + this.QVR.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
