/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserPreferences
    /// </summary>
    [DataContract]
    public partial class UserPreferences :  IEquatable<UserPreferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreferences" /> class.
        /// </summary>
        /// <param name="alertOnLiquidations">alertOnLiquidations.</param>
        /// <param name="animationsEnabled">animationsEnabled.</param>
        /// <param name="announcementsLastSeen">announcementsLastSeen.</param>
        /// <param name="chatChannelID">chatChannelID.</param>
        /// <param name="colorTheme">colorTheme.</param>
        /// <param name="currency">currency.</param>
        /// <param name="debug">debug.</param>
        /// <param name="disableEmails">disableEmails.</param>
        /// <param name="hideConfirmDialogs">hideConfirmDialogs.</param>
        /// <param name="hideConnectionModal">hideConnectionModal.</param>
        /// <param name="hideFromLeaderboard">hideFromLeaderboard (default to false).</param>
        /// <param name="hideNameFromLeaderboard">hideNameFromLeaderboard (default to true).</param>
        /// <param name="hideNotifications">hideNotifications.</param>
        /// <param name="locale">locale (default to &quot;en-US&quot;).</param>
        /// <param name="msgsSeen">msgsSeen.</param>
        /// <param name="orderBookBinning">orderBookBinning.</param>
        /// <param name="orderBookType">orderBookType.</param>
        /// <param name="orderClearImmediate">orderClearImmediate (default to false).</param>
        /// <param name="orderControlsPlusMinus">orderControlsPlusMinus.</param>
        /// <param name="showLocaleNumbers">showLocaleNumbers (default to true).</param>
        /// <param name="sounds">sounds.</param>
        /// <param name="strictIPCheck">strictIPCheck (default to false).</param>
        /// <param name="strictTimeout">strictTimeout (default to true).</param>
        /// <param name="tickerGroup">tickerGroup.</param>
        /// <param name="tickerPinned">tickerPinned.</param>
        /// <param name="tradeLayout">tradeLayout.</param>
        public UserPreferences(bool? alertOnLiquidations = default(bool?), bool? animationsEnabled = default(bool?), DateTime? announcementsLastSeen = default(DateTime?), double? chatChannelID = default(double?), string colorTheme = default(string), string currency = default(string), bool? debug = default(bool?), List<string> disableEmails = default(List<string>), List<string> hideConfirmDialogs = default(List<string>), bool? hideConnectionModal = default(bool?), bool? hideFromLeaderboard = false, bool? hideNameFromLeaderboard = true, List<string> hideNotifications = default(List<string>), string locale = "en-US", List<string> msgsSeen = default(List<string>), Object orderBookBinning = default(Object), string orderBookType = default(string), bool? orderClearImmediate = false, bool? orderControlsPlusMinus = default(bool?), bool? showLocaleNumbers = true, List<string> sounds = default(List<string>), bool? strictIPCheck = false, bool? strictTimeout = true, string tickerGroup = default(string), bool? tickerPinned = default(bool?), string tradeLayout = default(string))
        {
            this.AlertOnLiquidations = alertOnLiquidations;
            this.AnimationsEnabled = animationsEnabled;
            this.AnnouncementsLastSeen = announcementsLastSeen;
            this.ChatChannelID = chatChannelID;
            this.ColorTheme = colorTheme;
            this.Currency = currency;
            this.Debug = debug;
            this.DisableEmails = disableEmails;
            this.HideConfirmDialogs = hideConfirmDialogs;
            this.HideConnectionModal = hideConnectionModal;
            // use default value if no "hideFromLeaderboard" provided
            if (hideFromLeaderboard == null)
            {
                this.HideFromLeaderboard = false;
            }
            else
            {
                this.HideFromLeaderboard = hideFromLeaderboard;
            }
            // use default value if no "hideNameFromLeaderboard" provided
            if (hideNameFromLeaderboard == null)
            {
                this.HideNameFromLeaderboard = true;
            }
            else
            {
                this.HideNameFromLeaderboard = hideNameFromLeaderboard;
            }
            this.HideNotifications = hideNotifications;
            // use default value if no "locale" provided
            if (locale == null)
            {
                this.Locale = "en-US";
            }
            else
            {
                this.Locale = locale;
            }
            this.MsgsSeen = msgsSeen;
            this.OrderBookBinning = orderBookBinning;
            this.OrderBookType = orderBookType;
            // use default value if no "orderClearImmediate" provided
            if (orderClearImmediate == null)
            {
                this.OrderClearImmediate = false;
            }
            else
            {
                this.OrderClearImmediate = orderClearImmediate;
            }
            this.OrderControlsPlusMinus = orderControlsPlusMinus;
            // use default value if no "showLocaleNumbers" provided
            if (showLocaleNumbers == null)
            {
                this.ShowLocaleNumbers = true;
            }
            else
            {
                this.ShowLocaleNumbers = showLocaleNumbers;
            }
            this.Sounds = sounds;
            // use default value if no "strictIPCheck" provided
            if (strictIPCheck == null)
            {
                this.StrictIPCheck = false;
            }
            else
            {
                this.StrictIPCheck = strictIPCheck;
            }
            // use default value if no "strictTimeout" provided
            if (strictTimeout == null)
            {
                this.StrictTimeout = true;
            }
            else
            {
                this.StrictTimeout = strictTimeout;
            }
            this.TickerGroup = tickerGroup;
            this.TickerPinned = tickerPinned;
            this.TradeLayout = tradeLayout;
        }
        
        /// <summary>
        /// Gets or Sets AlertOnLiquidations
        /// </summary>
        [DataMember(Name="alertOnLiquidations", EmitDefaultValue=false)]
        public bool? AlertOnLiquidations { get; set; }

        /// <summary>
        /// Gets or Sets AnimationsEnabled
        /// </summary>
        [DataMember(Name="animationsEnabled", EmitDefaultValue=false)]
        public bool? AnimationsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AnnouncementsLastSeen
        /// </summary>
        [DataMember(Name="announcementsLastSeen", EmitDefaultValue=false)]
        public DateTime? AnnouncementsLastSeen { get; set; }

        /// <summary>
        /// Gets or Sets ChatChannelID
        /// </summary>
        [DataMember(Name="chatChannelID", EmitDefaultValue=false)]
        public double? ChatChannelID { get; set; }

        /// <summary>
        /// Gets or Sets ColorTheme
        /// </summary>
        [DataMember(Name="colorTheme", EmitDefaultValue=false)]
        public string ColorTheme { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool? Debug { get; set; }

        /// <summary>
        /// Gets or Sets DisableEmails
        /// </summary>
        [DataMember(Name="disableEmails", EmitDefaultValue=false)]
        public List<string> DisableEmails { get; set; }

        /// <summary>
        /// Gets or Sets HideConfirmDialogs
        /// </summary>
        [DataMember(Name="hideConfirmDialogs", EmitDefaultValue=false)]
        public List<string> HideConfirmDialogs { get; set; }

        /// <summary>
        /// Gets or Sets HideConnectionModal
        /// </summary>
        [DataMember(Name="hideConnectionModal", EmitDefaultValue=false)]
        public bool? HideConnectionModal { get; set; }

        /// <summary>
        /// Gets or Sets HideFromLeaderboard
        /// </summary>
        [DataMember(Name="hideFromLeaderboard", EmitDefaultValue=false)]
        public bool? HideFromLeaderboard { get; set; }

        /// <summary>
        /// Gets or Sets HideNameFromLeaderboard
        /// </summary>
        [DataMember(Name="hideNameFromLeaderboard", EmitDefaultValue=false)]
        public bool? HideNameFromLeaderboard { get; set; }

        /// <summary>
        /// Gets or Sets HideNotifications
        /// </summary>
        [DataMember(Name="hideNotifications", EmitDefaultValue=false)]
        public List<string> HideNotifications { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets MsgsSeen
        /// </summary>
        [DataMember(Name="msgsSeen", EmitDefaultValue=false)]
        public List<string> MsgsSeen { get; set; }

        /// <summary>
        /// Gets or Sets OrderBookBinning
        /// </summary>
        [DataMember(Name="orderBookBinning", EmitDefaultValue=false)]
        public Object OrderBookBinning { get; set; }

        /// <summary>
        /// Gets or Sets OrderBookType
        /// </summary>
        [DataMember(Name="orderBookType", EmitDefaultValue=false)]
        public string OrderBookType { get; set; }

        /// <summary>
        /// Gets or Sets OrderClearImmediate
        /// </summary>
        [DataMember(Name="orderClearImmediate", EmitDefaultValue=false)]
        public bool? OrderClearImmediate { get; set; }

        /// <summary>
        /// Gets or Sets OrderControlsPlusMinus
        /// </summary>
        [DataMember(Name="orderControlsPlusMinus", EmitDefaultValue=false)]
        public bool? OrderControlsPlusMinus { get; set; }

        /// <summary>
        /// Gets or Sets ShowLocaleNumbers
        /// </summary>
        [DataMember(Name="showLocaleNumbers", EmitDefaultValue=false)]
        public bool? ShowLocaleNumbers { get; set; }

        /// <summary>
        /// Gets or Sets Sounds
        /// </summary>
        [DataMember(Name="sounds", EmitDefaultValue=false)]
        public List<string> Sounds { get; set; }

        /// <summary>
        /// Gets or Sets StrictIPCheck
        /// </summary>
        [DataMember(Name="strictIPCheck", EmitDefaultValue=false)]
        public bool? StrictIPCheck { get; set; }

        /// <summary>
        /// Gets or Sets StrictTimeout
        /// </summary>
        [DataMember(Name="strictTimeout", EmitDefaultValue=false)]
        public bool? StrictTimeout { get; set; }

        /// <summary>
        /// Gets or Sets TickerGroup
        /// </summary>
        [DataMember(Name="tickerGroup", EmitDefaultValue=false)]
        public string TickerGroup { get; set; }

        /// <summary>
        /// Gets or Sets TickerPinned
        /// </summary>
        [DataMember(Name="tickerPinned", EmitDefaultValue=false)]
        public bool? TickerPinned { get; set; }

        /// <summary>
        /// Gets or Sets TradeLayout
        /// </summary>
        [DataMember(Name="tradeLayout", EmitDefaultValue=false)]
        public string TradeLayout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPreferences {\n");
            sb.Append("  AlertOnLiquidations: ").Append(AlertOnLiquidations).Append("\n");
            sb.Append("  AnimationsEnabled: ").Append(AnimationsEnabled).Append("\n");
            sb.Append("  AnnouncementsLastSeen: ").Append(AnnouncementsLastSeen).Append("\n");
            sb.Append("  ChatChannelID: ").Append(ChatChannelID).Append("\n");
            sb.Append("  ColorTheme: ").Append(ColorTheme).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  DisableEmails: ").Append(DisableEmails).Append("\n");
            sb.Append("  HideConfirmDialogs: ").Append(HideConfirmDialogs).Append("\n");
            sb.Append("  HideConnectionModal: ").Append(HideConnectionModal).Append("\n");
            sb.Append("  HideFromLeaderboard: ").Append(HideFromLeaderboard).Append("\n");
            sb.Append("  HideNameFromLeaderboard: ").Append(HideNameFromLeaderboard).Append("\n");
            sb.Append("  HideNotifications: ").Append(HideNotifications).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MsgsSeen: ").Append(MsgsSeen).Append("\n");
            sb.Append("  OrderBookBinning: ").Append(OrderBookBinning).Append("\n");
            sb.Append("  OrderBookType: ").Append(OrderBookType).Append("\n");
            sb.Append("  OrderClearImmediate: ").Append(OrderClearImmediate).Append("\n");
            sb.Append("  OrderControlsPlusMinus: ").Append(OrderControlsPlusMinus).Append("\n");
            sb.Append("  ShowLocaleNumbers: ").Append(ShowLocaleNumbers).Append("\n");
            sb.Append("  Sounds: ").Append(Sounds).Append("\n");
            sb.Append("  StrictIPCheck: ").Append(StrictIPCheck).Append("\n");
            sb.Append("  StrictTimeout: ").Append(StrictTimeout).Append("\n");
            sb.Append("  TickerGroup: ").Append(TickerGroup).Append("\n");
            sb.Append("  TickerPinned: ").Append(TickerPinned).Append("\n");
            sb.Append("  TradeLayout: ").Append(TradeLayout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPreferences);
        }

        /// <summary>
        /// Returns true if UserPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPreferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlertOnLiquidations == input.AlertOnLiquidations ||
                    (this.AlertOnLiquidations != null &&
                    this.AlertOnLiquidations.Equals(input.AlertOnLiquidations))
                ) && 
                (
                    this.AnimationsEnabled == input.AnimationsEnabled ||
                    (this.AnimationsEnabled != null &&
                    this.AnimationsEnabled.Equals(input.AnimationsEnabled))
                ) && 
                (
                    this.AnnouncementsLastSeen == input.AnnouncementsLastSeen ||
                    (this.AnnouncementsLastSeen != null &&
                    this.AnnouncementsLastSeen.Equals(input.AnnouncementsLastSeen))
                ) && 
                (
                    this.ChatChannelID == input.ChatChannelID ||
                    (this.ChatChannelID != null &&
                    this.ChatChannelID.Equals(input.ChatChannelID))
                ) && 
                (
                    this.ColorTheme == input.ColorTheme ||
                    (this.ColorTheme != null &&
                    this.ColorTheme.Equals(input.ColorTheme))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.DisableEmails == input.DisableEmails ||
                    this.DisableEmails != null &&
                    this.DisableEmails.SequenceEqual(input.DisableEmails)
                ) && 
                (
                    this.HideConfirmDialogs == input.HideConfirmDialogs ||
                    this.HideConfirmDialogs != null &&
                    this.HideConfirmDialogs.SequenceEqual(input.HideConfirmDialogs)
                ) && 
                (
                    this.HideConnectionModal == input.HideConnectionModal ||
                    (this.HideConnectionModal != null &&
                    this.HideConnectionModal.Equals(input.HideConnectionModal))
                ) && 
                (
                    this.HideFromLeaderboard == input.HideFromLeaderboard ||
                    (this.HideFromLeaderboard != null &&
                    this.HideFromLeaderboard.Equals(input.HideFromLeaderboard))
                ) && 
                (
                    this.HideNameFromLeaderboard == input.HideNameFromLeaderboard ||
                    (this.HideNameFromLeaderboard != null &&
                    this.HideNameFromLeaderboard.Equals(input.HideNameFromLeaderboard))
                ) && 
                (
                    this.HideNotifications == input.HideNotifications ||
                    this.HideNotifications != null &&
                    this.HideNotifications.SequenceEqual(input.HideNotifications)
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.MsgsSeen == input.MsgsSeen ||
                    this.MsgsSeen != null &&
                    this.MsgsSeen.SequenceEqual(input.MsgsSeen)
                ) && 
                (
                    this.OrderBookBinning == input.OrderBookBinning ||
                    (this.OrderBookBinning != null &&
                    this.OrderBookBinning.Equals(input.OrderBookBinning))
                ) && 
                (
                    this.OrderBookType == input.OrderBookType ||
                    (this.OrderBookType != null &&
                    this.OrderBookType.Equals(input.OrderBookType))
                ) && 
                (
                    this.OrderClearImmediate == input.OrderClearImmediate ||
                    (this.OrderClearImmediate != null &&
                    this.OrderClearImmediate.Equals(input.OrderClearImmediate))
                ) && 
                (
                    this.OrderControlsPlusMinus == input.OrderControlsPlusMinus ||
                    (this.OrderControlsPlusMinus != null &&
                    this.OrderControlsPlusMinus.Equals(input.OrderControlsPlusMinus))
                ) && 
                (
                    this.ShowLocaleNumbers == input.ShowLocaleNumbers ||
                    (this.ShowLocaleNumbers != null &&
                    this.ShowLocaleNumbers.Equals(input.ShowLocaleNumbers))
                ) && 
                (
                    this.Sounds == input.Sounds ||
                    this.Sounds != null &&
                    this.Sounds.SequenceEqual(input.Sounds)
                ) && 
                (
                    this.StrictIPCheck == input.StrictIPCheck ||
                    (this.StrictIPCheck != null &&
                    this.StrictIPCheck.Equals(input.StrictIPCheck))
                ) && 
                (
                    this.StrictTimeout == input.StrictTimeout ||
                    (this.StrictTimeout != null &&
                    this.StrictTimeout.Equals(input.StrictTimeout))
                ) && 
                (
                    this.TickerGroup == input.TickerGroup ||
                    (this.TickerGroup != null &&
                    this.TickerGroup.Equals(input.TickerGroup))
                ) && 
                (
                    this.TickerPinned == input.TickerPinned ||
                    (this.TickerPinned != null &&
                    this.TickerPinned.Equals(input.TickerPinned))
                ) && 
                (
                    this.TradeLayout == input.TradeLayout ||
                    (this.TradeLayout != null &&
                    this.TradeLayout.Equals(input.TradeLayout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlertOnLiquidations != null)
                    hashCode = hashCode * 59 + this.AlertOnLiquidations.GetHashCode();
                if (this.AnimationsEnabled != null)
                    hashCode = hashCode * 59 + this.AnimationsEnabled.GetHashCode();
                if (this.AnnouncementsLastSeen != null)
                    hashCode = hashCode * 59 + this.AnnouncementsLastSeen.GetHashCode();
                if (this.ChatChannelID != null)
                    hashCode = hashCode * 59 + this.ChatChannelID.GetHashCode();
                if (this.ColorTheme != null)
                    hashCode = hashCode * 59 + this.ColorTheme.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.DisableEmails != null)
                    hashCode = hashCode * 59 + this.DisableEmails.GetHashCode();
                if (this.HideConfirmDialogs != null)
                    hashCode = hashCode * 59 + this.HideConfirmDialogs.GetHashCode();
                if (this.HideConnectionModal != null)
                    hashCode = hashCode * 59 + this.HideConnectionModal.GetHashCode();
                if (this.HideFromLeaderboard != null)
                    hashCode = hashCode * 59 + this.HideFromLeaderboard.GetHashCode();
                if (this.HideNameFromLeaderboard != null)
                    hashCode = hashCode * 59 + this.HideNameFromLeaderboard.GetHashCode();
                if (this.HideNotifications != null)
                    hashCode = hashCode * 59 + this.HideNotifications.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.MsgsSeen != null)
                    hashCode = hashCode * 59 + this.MsgsSeen.GetHashCode();
                if (this.OrderBookBinning != null)
                    hashCode = hashCode * 59 + this.OrderBookBinning.GetHashCode();
                if (this.OrderBookType != null)
                    hashCode = hashCode * 59 + this.OrderBookType.GetHashCode();
                if (this.OrderClearImmediate != null)
                    hashCode = hashCode * 59 + this.OrderClearImmediate.GetHashCode();
                if (this.OrderControlsPlusMinus != null)
                    hashCode = hashCode * 59 + this.OrderControlsPlusMinus.GetHashCode();
                if (this.ShowLocaleNumbers != null)
                    hashCode = hashCode * 59 + this.ShowLocaleNumbers.GetHashCode();
                if (this.Sounds != null)
                    hashCode = hashCode * 59 + this.Sounds.GetHashCode();
                if (this.StrictIPCheck != null)
                    hashCode = hashCode * 59 + this.StrictIPCheck.GetHashCode();
                if (this.StrictTimeout != null)
                    hashCode = hashCode * 59 + this.StrictTimeout.GetHashCode();
                if (this.TickerGroup != null)
                    hashCode = hashCode * 59 + this.TickerGroup.GetHashCode();
                if (this.TickerPinned != null)
                    hashCode = hashCode * 59 + this.TickerPinned.GetHashCode();
                if (this.TradeLayout != null)
                    hashCode = hashCode * 59 + this.TradeLayout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
