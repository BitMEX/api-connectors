---
swagger: "2.0"
info:
  description: "## REST API for the BitMEX Trading Platform\n\n_If you are building\
    \ automated tools, please subscribe to the_\n_[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/)\
    \ for changes. The feed will be updated_\n_regularly and is the most reliable\
    \ way to get downtime and update announcements._\n\n[View Changelog](/app/apiChangelog)\n\
    \n---\n\n#### Getting Started\n\nBase URI: [https://www.bitmex.com/api/v1](/api/v1)\n\
    \n##### Fetching Data\n\nAll REST endpoints are documented below. You can try\
    \ out any query right from this interface.\n\nMost table queries accept `count`,\
    \ `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.\n\
    \nAdditional documentation regarding filters, timestamps, and authentication\n\
    is available in [the main API documentation](/app/restAPI).\n\n_All_ table data\
    \ is available via the [Websocket](/app/wsAPI). We highly recommend using the\
    \ socket if you want\nto have the quickest possible data without being subject\
    \ to ratelimits.\n\n##### Return Types\n\nBy default, all data is returned as\
    \ JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.\n\
    \n##### Trade Data Queries\n\n_This is only a small subset of what is available,\
    \ to get you started._\n\nFill in the parameters and click the `Try it out!` button\
    \ to try any of these queries.\n\n- [Pricing Data](#!/Quote/Quote_get)\n\n- [Trade\
    \ Data](#!/Trade/Trade_get)\n\n- [OrderBook Data](#!/OrderBook/OrderBook_getL2)\n\
    \n- [Settlement Data](#!/Settlement/Settlement_get)\n\n- [Exchange Statistics](#!/Stats/Stats_history)\n\
    \nEvery function of the BitMEX.com platform is exposed here and documented. Many\
    \ more functions are available.\n\n##### Swagger Specification\n\n[â‡© Download\
    \ Swagger JSON](swagger.json)\n\n---\n\n## All API Endpoints\n\nClick to expand\
    \ a section.\n"
  version: "1.2.0"
  title: "BitMEX API"
  termsOfService: "https://www.bitmex.com/app/terms"
  contact:
    email: "support@bitmex.com"
host: "www.bitmex.com"
basePath: "/api/v1"
tags:
- name: "Announcement"
  description: "Public Announcements"
- name: "APIKey"
  description: "Persistent API Keys for Developers"
- name: "Chat"
  description: "Trollbox Data"
- name: "Execution"
  description: "Raw Order and Balance Data"
- name: "Funding"
  description: "Swap Funding History"
- name: "Instrument"
  description: "Tradeable Contracts, Indices, and History"
- name: "Insurance"
  description: "Insurance Fund Data"
- name: "Leaderboard"
  description: "Information on Top Users"
- name: "Liquidation"
  description: "Active Liquidations"
- name: "GlobalNotification"
  description: "Account Notifications"
- name: "Order"
  description: "Placement, Cancellation, Amending, and History"
- name: "OrderBook"
  description: "Level 2 Book Data"
- name: "Position"
  description: "Summary of Open and Closed Positions"
- name: "Quote"
  description: "Best Bid/Offer Snapshots & Historical Bins"
- name: "Schema"
  description: "Dynamic Schemata for Developers"
- name: "Settlement"
  description: "Historical Settlement Data"
- name: "Stats"
  description: "Exchange Statistics"
- name: "Trade"
  description: "Individual & Bucketed Trades"
- name: "User"
  description: "Account Operations"
- name: "UserEvent"
  description: "User Events for Auditing"
consumes:
- "application/json"
- "application/x-www-form-urlencoded"
produces:
- "application/json"
- "application/xml"
- "text/xml"
- "application/javascript"
- "text/javascript"
security:
- apiKey: []
  apiSignature: []
  apiExpires: []
paths:
  /announcement:
    get:
      tags:
      - "Announcement"
      summary: "Get site announcements."
      operationId: "Announcement.get"
      parameters:
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Announcement"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /announcement/urgent:
    get:
      tags:
      - "Announcement"
      summary: "Get urgent (banner) announcements."
      operationId: "Announcement.getUrgent"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Announcement"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /apiKey:
    get:
      tags:
      - "APIKey"
      summary: "Get your API Keys."
      operationId: "APIKey.get"
      parameters:
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APIKey"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /chat:
    get:
      tags:
      - "Chat"
      summary: "Get chat messages."
      operationId: "Chat.get"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of results to fetch."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting ID for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "channelID"
        in: "query"
        description: "Channel id. GET /chat/channels for ids. Leave blank for all."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "ChannelID"
        x-optionalDataType: "Float64"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Chat"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Chat"
      summary: "Send a chat message."
      operationId: "Chat.new"
      parameters:
      - name: "message"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Message"
      - name: "channelID"
        in: "formData"
        description: "Channel to post to. Default 1 (English)."
        required: false
        type: "number"
        default: 1.0
        format: "double"
        x-exportParamName: "ChannelID"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Chat"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /chat/channels:
    get:
      tags:
      - "Chat"
      summary: "Get available channels."
      operationId: "Chat.getChannels"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ChatChannel"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /chat/connected:
    get:
      tags:
      - "Chat"
      summary: "Get connected users."
      description: "Returns an array with browser users in the first position and\
        \ API users (bots) in the second position."
      operationId: "Chat.getConnected"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/ConnectedUsers"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /execution:
    get:
      tags:
      - "Execution"
      summary: "Get all raw executions for your account."
      description: "This returns all raw transactions, which includes order opening\
        \ and cancelation, and order status\nchanges. It can be quite noisy. More\
        \ focused information is available at `/execution/tradeHistory`.\n\nYou may\
        \ also use the `filter` param to target your query. Specify an array as a\
        \ filter value, such as\n`{\"execType\": [\"Settlement\", \"Trade\"]}` to\
        \ filter on multiple values.\n\nSee [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html)\
        \ for explanations of these fields.\n"
      operationId: "Execution.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /execution/tradeHistory:
    get:
      tags:
      - "Execution"
      summary: "Get all balance-affecting executions."
      operationId: "Execution.getTradeHistory"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /funding:
    get:
      tags:
      - "Funding"
      summary: "Get funding history."
      operationId: "Funding.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Funding"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument:
    get:
      tags:
      - "Instrument"
      summary: "Get instruments."
      description: "This returns all instruments and indices, including those that\
        \ have settled or are unlisted. Use this endpoint if you want to query for\
        \ individual instruments or use a complex filter. Use `/instrument/active`\
        \ to return active instruments, or use a filter like `{\"state\": \"Open\"\
        }`."
      operationId: "Instrument.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/active:
    get:
      tags:
      - "Instrument"
      summary: "Get all active instruments and instruments that have expired in <24hrs."
      operationId: "Instrument.getActive"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/indices:
    get:
      tags:
      - "Instrument"
      summary: "Get all price indices."
      operationId: "Instrument.getIndices"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/activeAndIndices:
    get:
      tags:
      - "Instrument"
      summary: "Helper method. Gets all active instruments and all indices. This is\
        \ a join of the result of /indices and /active."
      operationId: "Instrument.getActiveAndIndices"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/activeIntervals:
    get:
      tags:
      - "Instrument"
      summary: "Return all active contract series and interval pairs."
      description: "This endpoint is useful for determining which pairs are live.\
        \ It returns two arrays of   strings. The first is intervals, such as `[\"\
        XBT:perpetual\", \"XBT:quarterly\", \"XBT:biquarterly\", \"ETH:quarterly\"\
        , ...]`. These identifiers are usable in any query's `symbol` param. The second\
        \ array is the current resolution of these intervals. Results are mapped at\
        \ the same index."
      operationId: "Instrument.getActiveIntervals"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/InstrumentInterval"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/compositeIndex:
    get:
      tags:
      - "Instrument"
      summary: "Show constituent parts of an index."
      description: "Composite indices are built from multiple external price sources.\n\
        \nUse this endpoint to get the underlying prices of an index. For example,\
        \ send a `symbol` of `.BXBT` to\nget the ticks and weights of the constituent\
        \ exchanges that build the \".BXBT\" index.\n\nA tick with reference `\"BMI\"\
        ` and weight `null` is the composite index tick.\n"
      operationId: "Instrument.getCompositeIndex"
      parameters:
      - name: "symbol"
        in: "query"
        description: "The composite index symbol."
        required: false
        type: "string"
        default: ".BXBT"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IndexComposite"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /insurance:
    get:
      tags:
      - "Insurance"
      summary: "Get insurance fund history."
      operationId: "Insurance.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Insurance"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /leaderboard:
    get:
      tags:
      - "Leaderboard"
      summary: "Get current leaderboard."
      operationId: "Leaderboard.get"
      parameters:
      - name: "method"
        in: "query"
        description: "Ranking type. Options: \"notional\", \"ROE\""
        required: false
        type: "string"
        default: "notional"
        x-exportParamName: "Method"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Leaderboard"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /leaderboard/name:
    get:
      tags:
      - "Leaderboard"
      summary: "Get your alias on the leaderboard."
      operationId: "Leaderboard.getName"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /liquidation:
    get:
      tags:
      - "Liquidation"
      summary: "Get liquidation orders."
      operationId: "Liquidation.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Liquidation"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /globalNotification:
    get:
      tags:
      - "GlobalNotification"
      summary: "Get your current GlobalNotifications."
      description: "This is an upcoming feature and currently does not return data."
      operationId: "GlobalNotification.get"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GlobalNotification"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order:
    get:
      tags:
      - "Order"
      summary: "Get your orders."
      description: "To get open orders only, send {\"open\": true} in the filter param.\n\
        \nSee <a href=\"http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html\"\
        >the FIX Spec</a> for explanations of these fields."
      operationId: "Order.getOrders"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Order"
      summary: "Create a new order."
      description: "## Placing Orders\n\nThis endpoint is used for placing orders.\
        \ See individual fields below for more details on their use.\n\n#### Order\
        \ Types\n\nAll orders require a `symbol`. All other fields are optional except\
        \ when otherwise specified.\n\nThese are the valid `ordType`s:\n\n- **Limit**:\
        \ The default order type. Specify an `orderQty` and `price`.\n- **Market**:\
        \ A traditional Market order. A Market order will execute until filled or\
        \ your bankruptcy price is reached, at\n  which point it will cancel.\n- **Stop**:\
        \ A Stop Market order. Specify an `orderQty` and `stopPx`. When the `stopPx`\
        \ is reached, the order will be entered\n  into the book.\n  - On sell orders,\
        \ the order will trigger if the triggering price is lower than the `stopPx`.\
        \ On buys, higher.\n  - Note: Stop orders do not consume margin until triggered.\
        \ Be sure that the required margin is available in your\n    account so that\
        \ it may trigger fully.\n  - `Close` Stops don't require an `orderQty`. See\
        \ Execution Instructions below.\n- **StopLimit**: Like a Stop Market, but\
        \ enters a Limit order instead of a Market order. Specify an `orderQty`, `stopPx`,\n\
        \  and `price`.\n- **MarketIfTouched**: Similar to a Stop, but triggers are\
        \ done in the opposite direction. Useful for Take Profit orders.\n- **LimitIfTouched**:\
        \ As above; use for Take Profit Limit orders.\n- **Pegged**: Pegged orders\
        \ allow users to submit a limit price relative to the current market price.\
        \ Specify a\n  `pegPriceType`, and `pegOffsetValue`.\n  - Pegged orders **must**\
        \ have an `execInst` of `Fixed`. This means the limit price is set at the\
        \ time the order\n    is accepted and does not change as the reference price\
        \ changes.\n  - `PrimaryPeg`: Price is set relative to near touch price.\n\
        \  - `MarketPeg`: Price is set relative to far touch price.\n  - A `pegPriceType`\
        \ submitted with no `ordType` is treated as a `Pegged` order.\n\n#### Execution\
        \ Instructions\n\nThe following `execInst`s are supported. If using multiple,\
        \ separate with a comma (e.g. `LastPrice,Close`).\n\n- **ParticipateDoNotInitiate**:\
        \ Also known as a Post-Only order. If this order would have executed on placement,\
        \ it will cancel instead.\n  This is intended to protect you from the far\
        \ touch moving towards you while the order is in transit.\n  It is not intended\
        \ for speculating on the far touch moving away after submission - we consider\
        \ such behaviour abusive and monitor for it.\n- **MarkPrice, LastPrice, IndexPrice**:\
        \ Used by stop and if-touched orders to determine the triggering price.\n\
        \  Use only one. By default, `MarkPrice` is used. Also used for Pegged orders\
        \ to define the value of `LastPeg`.\n- **ReduceOnly**: A `ReduceOnly` order\
        \ can only reduce your position, not increase it. If you have a `ReduceOnly`\n\
        \  limit order that rests in the order book while the position is reduced\
        \ by other orders, then its order quantity will\n  be amended down or canceled.\
        \ If there are multiple `ReduceOnly` orders the least aggressive will be amended\
        \ first.\n- **Close**: `Close` implies `ReduceOnly`. A `Close` order will\
        \ cancel other active limit orders with the same side\n  and symbol if the\
        \ open quantity exceeds the current position. This is useful for stops: by\
        \ canceling these orders, a\n  `Close` Stop is ensured to have the margin\
        \ required to execute, and can only execute up to the full size of your\n\
        \  position. If `orderQty` is not specified, a `Close` order has an `orderQty`\
        \ equal to your current position's size.\n  - Note that a `Close` order without\
        \ an `orderQty` requires a `side`, so that BitMEX knows if it should trigger\n\
        \    above or below the `stopPx`.\n- **LastWithinMark**: Used by stop orders\
        \ with `LastPrice` to allow stop triggers only when:\n  - For Sell Stop Market\
        \ / Stop Limit Order\n    - Last Price &lt= Stop Price\n    - Last Price &gt=\
        \ Mark Price Ã— (1 - 5%)\n  - For Buy Stop Market / Stop Limit Order:\n   \
        \ - Last Price &gt= Stop Price\n    - Last Price &lt= Mark Price Ã— (1 + 5%)\n\
        - **Fixed**: Pegged orders **must** have an `execInst` of `Fixed`. This means\
        \ the limit price is set at the time\n  the order is accepted and does not\
        \ change as the reference price changes.\n\n#### Pegged Orders\n\nPegged orders\
        \ allow users to submit a limit price relative to the current market price.\n\
        The limit price is set once when the order is submitted and does not change\
        \ with the reference price.\nThis order type is not intended for speculating\
        \ on the far touch moving away after submission - we consider such behaviour\
        \ abusive and monitor for it.\n\nPegged orders have an `ordType` of `Pegged`,\
        \ and an `execInst` of `Fixed`.\n\nA `pegPriceType` and `pegOffsetValue` must\
        \ also be submitted:\n\n- `PrimaryPeg` - price is set relative to the **near\
        \ touch** price\n- `MarketPeg` - price is set relative to the **far touch**\
        \ price\n\n#### Trailing Stop Pegged Orders\n\nUse `pegPriceType` of `TrailingStopPeg`\
        \ to create Trailing Stops.\n\nThe price is set at submission and updates\
        \ once per second if the underlying price (last/mark/index) has moved by\n\
        more than 0.1%. `stopPx` then moves as the market moves away from the peg,\
        \ and freezes as the market moves toward it.\n\nUse `pegOffsetValue` to set\
        \ the `stopPx` of your order. The peg is set to the triggering price specified\
        \ in the\n`execInst` (default `MarkPrice`). Use a negative offset for stop-sell\
        \ and buy-if-touched orders.\n\nRequires `ordType`: `Stop`, `StopLimit`, `MarketIfTouched`,\
        \ `LimitIfTouched`.\n\n#### Linked Orders\n\n[Linked Orders are deprecated\
        \ as of 2018/11/10](https://blog.bitmex.com/api_announcement/deprecation-of-contingent-orders/)\n\
        \n#### Trailing Stops\n\nYou may use `pegPriceType` of `'TrailingStopPeg'`\
        \ to create Trailing Stops. The pegged `stopPx` will move as the market\n\
        moves away from the peg, and freeze as the market moves toward it.\n\nTo use,\
        \ combine with `pegOffsetValue` to set the `stopPx` of your order. The peg\
        \ is set to the triggering price\nspecified in the `execInst` (default `'MarkPrice'`).\
        \ Use a negative offset for stop-sell and buy-if-touched orders.\n\nRequires\
        \ `ordType`: `'Stop', 'StopLimit', 'MarketIfTouched', 'LimitIfTouched'`.\n\
        \n#### Simple Quantities\n\n[Simple Quantities are deprecated as of 2018/10/26](https://blog.bitmex.com/api_announcement/deprecation-of-simpleorderqty-functionality/)\n\
        \n#### Rate Limits\n\nSee the [Bulk Order Documentation](#!/Order/Order_newBulk)\
        \ if you need to place multiple orders at the same time.\nBulk orders require\
        \ fewer risk checks in the trading engine and thus are ratelimited at **1/10**\
        \ the normal rate.\n\nYou can also improve your reactivity to market movements\
        \ while staying under your ratelimit by using the\n[Amend](#!/Order/Order_amend)\
        \ and [Amend Bulk](#!/Order/Order_amendBulk) endpoints. This allows you to\
        \ stay\nin the market and avoids the cancel/replace cycle.\n\n#### Tracking\
        \ Your Orders\n\nIf you want to keep track of order IDs yourself, set a unique\
        \ `clOrdID` per order.\nThis `clOrdID` will come back as a property on the\
        \ order and any related executions (including on the WebSocket),\nand can\
        \ be used to get or cancel the order. Max length is 36 characters.\n\nYou\
        \ can also change the `clOrdID` by amending an order, supplying an `origClOrdID`,\
        \ and your desired new\nID as the `clOrdID` param, like so:\n\n```\n# Amends\
        \ an order's leavesQty, and updates its clOrdID to \"def-456\"\nPUT /api/v1/order\
        \ {\"origClOrdID\": \"abc-123\", \"clOrdID\": \"def-456\", \"leavesQty\":\
        \ 1000}\n```\n"
      operationId: "Order.new"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Instrument symbol. e.g. 'XBTUSD'."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "side"
        in: "formData"
        description: "Order side. Valid options: Buy, Sell. Defaults to 'Buy' unless\
          \ `orderQty` is negative."
        required: false
        type: "string"
        x-exportParamName: "Side"
        x-optionalDataType: "String"
      - name: "simpleOrderQty"
        in: "formData"
        description: "Deprecated: simple orders are not supported after 2018/10/26"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SimpleOrderQty"
        x-optionalDataType: "Float64"
      - name: "orderQty"
        in: "formData"
        description: "Order quantity in units of the instrument (i.e. contracts)."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "OrderQty"
        x-optionalDataType: "Float32"
      - name: "price"
        in: "formData"
        description: "Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched'\
          \ orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Price"
        x-optionalDataType: "Float64"
      - name: "displayQty"
        in: "formData"
        description: "Optional quantity to display in the book. Use 0 for a fully\
          \ hidden order."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "DisplayQty"
        x-optionalDataType: "Float32"
      - name: "stopPx"
        in: "formData"
        description: "Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched',\
          \ and 'LimitIfTouched' orders. Use a price below the current price for stop-sell\
          \ orders and buy-if-touched orders. Use `execInst` of 'MarkPrice' or 'LastPrice'\
          \ to define the current price used for triggering."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StopPx"
        x-optionalDataType: "Float64"
      - name: "clOrdID"
        in: "formData"
        description: "Optional Client Order ID. This clOrdID will come back on the\
          \ order and any related executions."
        required: false
        type: "string"
        x-exportParamName: "ClOrdID"
        x-optionalDataType: "String"
      - name: "clOrdLinkID"
        in: "formData"
        description: "Deprecated: linked orders are not supported after 2018/11/10."
        required: false
        type: "string"
        x-exportParamName: "ClOrdLinkID"
        x-optionalDataType: "String"
      - name: "pegOffsetValue"
        in: "formData"
        description: "Optional trailing offset from the current price for 'Stop',\
          \ 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a negative\
          \ offset for stop-sell orders and buy-if-touched orders. Optional offset\
          \ from the peg price for 'Pegged' orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "PegOffsetValue"
        x-optionalDataType: "Float64"
      - name: "pegPriceType"
        in: "formData"
        description: "Optional peg price type. Valid options: MarketPeg, PrimaryPeg,\
          \ TrailingStopPeg."
        required: false
        type: "string"
        x-exportParamName: "PegPriceType"
        x-optionalDataType: "String"
      - name: "ordType"
        in: "formData"
        description: "Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched,\
          \ LimitIfTouched, Pegged. Defaults to 'Limit' when `price` is specified.\
          \ Defaults to 'Stop' when `stopPx` is specified. Defaults to 'StopLimit'\
          \ when `price` and `stopPx` are specified."
        required: false
        type: "string"
        default: "Limit"
        x-exportParamName: "OrdType"
        x-optionalDataType: "String"
      - name: "timeInForce"
        in: "formData"
        description: "Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel,\
          \ FillOrKill. Defaults to 'GoodTillCancel' for 'Limit', 'StopLimit', and\
          \ 'LimitIfTouched' orders."
        required: false
        type: "string"
        x-exportParamName: "TimeInForce"
        x-optionalDataType: "String"
      - name: "execInst"
        in: "formData"
        description: "Optional execution instructions. Valid options: ParticipateDoNotInitiate,\
          \ AllOrNone, MarkPrice, IndexPrice, LastPrice, Close, ReduceOnly, Fixed,\
          \ LastWithinMark. 'AllOrNone' instruction requires `displayQty` to be 0.\
          \ 'MarkPrice', 'IndexPrice' or 'LastPrice' instruction valid for 'Stop',\
          \ 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders. 'LastWithinMark'\
          \ instruction valid for 'Stop' and 'StopLimit' with instruction 'LastPrice'."
        required: false
        type: "string"
        x-exportParamName: "ExecInst"
        x-optionalDataType: "String"
      - name: "contingencyType"
        in: "formData"
        description: "Deprecated: linked orders are not supported after 2018/11/10."
        required: false
        type: "string"
        x-exportParamName: "ContingencyType"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "Optional order annotation. e.g. 'Take profit'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "Order"
      summary: "Amend the quantity or price of an open order."
      description: "Send an `orderID` or `origClOrdID` to identify the order you wish\
        \ to amend.\n\nBoth order quantity and price can be amended. Only one `qty`\
        \ field can be used to amend.\n\nUse the `leavesQty` field to specify how\
        \ much of the order you wish to remain open. This can be useful\nif you want\
        \ to adjust your position's delta by a certain amount, regardless of how much\
        \ of the order has\nalready filled.\n\n> A `leavesQty` can be used to make\
        \ a \"Filled\" order live again, if it is received within 60 seconds of the\
        \ fill.\n\nLike order placement, amending can be done in bulk. Simply send\
        \ a request to `PUT /api/v1/order/bulk` with\na JSON body of the shape: `{\"\
        orders\": [{...}, {...}]}`, each object containing the fields used in this\
        \ endpoint.\n"
      operationId: "Order.amend"
      parameters:
      - name: "orderID"
        in: "formData"
        description: "Order ID"
        required: false
        type: "string"
        x-exportParamName: "OrderID"
        x-optionalDataType: "String"
      - name: "origClOrdID"
        in: "formData"
        description: "Client Order ID. See POST /order."
        required: false
        type: "string"
        x-exportParamName: "OrigClOrdID"
        x-optionalDataType: "String"
      - name: "clOrdID"
        in: "formData"
        description: "Optional new Client Order ID, requires `origClOrdID`."
        required: false
        type: "string"
        x-exportParamName: "ClOrdID"
        x-optionalDataType: "String"
      - name: "simpleOrderQty"
        in: "formData"
        description: "Deprecated: simple orders are not supported after 2018/10/26"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SimpleOrderQty"
        x-optionalDataType: "Float64"
      - name: "orderQty"
        in: "formData"
        description: "Optional order quantity in units of the instrument (i.e. contracts)."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "OrderQty"
        x-optionalDataType: "Float32"
      - name: "simpleLeavesQty"
        in: "formData"
        description: "Deprecated: simple orders are not supported after 2018/10/26"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SimpleLeavesQty"
        x-optionalDataType: "Float64"
      - name: "leavesQty"
        in: "formData"
        description: "Optional leaves quantity in units of the instrument (i.e. contracts).\
          \ Useful for amending partially filled orders."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "LeavesQty"
        x-optionalDataType: "Float32"
      - name: "price"
        in: "formData"
        description: "Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched'\
          \ orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Price"
        x-optionalDataType: "Float64"
      - name: "stopPx"
        in: "formData"
        description: "Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched',\
          \ and 'LimitIfTouched' orders. Use a price below the current price for stop-sell\
          \ orders and buy-if-touched orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StopPx"
        x-optionalDataType: "Float64"
      - name: "pegOffsetValue"
        in: "formData"
        description: "Optional trailing offset from the current price for 'Stop',\
          \ 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a negative\
          \ offset for stop-sell orders and buy-if-touched orders. Optional offset\
          \ from the peg price for 'Pegged' orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "PegOffsetValue"
        x-optionalDataType: "Float64"
      - name: "text"
        in: "formData"
        description: "Optional amend annotation. e.g. 'Adjust skew'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Order"
      summary: "Cancel order(s). Send multiple order IDs to cancel in bulk."
      description: "Either an orderID or a clOrdID must be provided."
      operationId: "Order.cancel"
      parameters:
      - name: "orderID"
        in: "formData"
        description: "Order ID(s)."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "OrderID"
        x-optionalDataType: "String"
      - name: "clOrdID"
        in: "formData"
        description: "Client Order ID(s). See POST /order."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "ClOrdID"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "Optional cancellation annotation. e.g. 'Spread Exceeded'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order/closePosition:
    post:
      tags:
      - "Order"
      summary: "Close a position. [Deprecated, use POST /order with execInst: 'Close']"
      description: "If no `price` is specified, a market order will be submitted to\
        \ close the whole of your position. This will also close all other open orders\
        \ in this symbol."
      operationId: "Order.closePosition"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to close."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "price"
        in: "formData"
        description: "Optional limit price."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Price"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order/all:
    delete:
      tags:
      - "Order"
      summary: "Cancels all of your orders."
      operationId: "Order.cancelAll"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Optional symbol. If provided, only cancels orders for that symbol."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "formData"
        description: "Optional filter for cancellation. Use to only cancel some orders,\
          \ e.g. `{\"side\": \"Buy\"}`."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "Optional cancellation annotation. e.g. 'Spread Exceeded'"
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order/cancelAllAfter:
    post:
      tags:
      - "Order"
      summary: "Automatically cancel all your orders after a specified timeout."
      description: "Useful as a dead-man's switch to ensure your orders are canceled\
        \ in case of an outage.\nIf called repeatedly, the existing offset will be\
        \ canceled and a new one will be inserted in its place.\n\nExample usage:\
        \ call this route at 15s intervals with an offset of 60000 (60s).\nIf this\
        \ route is not called within 60 seconds, all your orders will be automatically\
        \ canceled.\n\nThis is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#Dead-Mans-Switch-Auto-Cancel).\n"
      operationId: "Order.cancelAllAfter"
      parameters:
      - name: "timeout"
        in: "formData"
        description: "Timeout in ms. Set to 0 to cancel this timer. "
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "Timeout"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /orderBook/L2:
    get:
      tags:
      - "OrderBook"
      summary: "Get current orderbook in vertical format."
      operationId: "OrderBook.getL2"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a series (e.g. XBT) to get data for\
          \ the nearest contract in that series."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "depth"
        in: "query"
        description: "Orderbook depth per side. Send 0 for full depth."
        required: false
        type: "number"
        default: 25.0
        minimum: 0
        format: "int32"
        x-exportParamName: "Depth"
        x-optionalDataType: "Float32"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrderBookL2"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position:
    get:
      tags:
      - "Position"
      summary: "Get your positions."
      description: "This endpoint is used for retrieving position information. The\
        \ fields largely follow the [FIX spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html)\
        \ definitions. Some selected fields are explained in more detail below.\n\n\
        The fields _account_, _symbol_, _currency_ are unique to each position and\
        \ form its key.\n\n- **account**: Your unique account ID.\n- **symbol**: The\
        \ contract for this position.\n- **currency**: The margin currency for this\
        \ position.\n- **underlying**: Meta data of the _symbol_.\n- **quoteCurrency**:\
        \ Meta data of the _symbol_, All prices are in the _quoteCurrency_\n- **commission**:\
        \ The maximum of the maker, taker, and settlement fee.\n- **initMarginReq**:\
        \ The initial margin requirement. This will be at least the symbol's default\
        \ initial maintenance margin, but can be higher if you choose lower leverage.\n\
        - **maintMarginReq**: The maintenance margin requirement. This will be at\
        \ least the symbol's default maintenance maintenance margin, but can be higher\
        \ if you choose a higher risk limit.\n- **riskLimit**: This is a function\
        \ of your _maintMarginReq_.\n- **leverage**: 1 / initMarginReq.\n- **crossMargin**:\
        \ True/false depending on whether you set cross margin on this position.\n\
        - **deleveragePercentile**: Indicates where your position is in the ADL queue.\n\
        - **rebalancedPnl**: The value of realised PNL that has transferred to your\
        \ wallet for this position.\n- **prevRealisedPnl**: The value of realised\
        \ PNL that has transferred to your wallet for this position since the position\
        \ was closed.\n- **currentQty**: The current position amount in contracts.\n\
        - **currentCost**: The current cost of the position in the settlement currency\
        \ of the symbol (_currency_).\n- **currentComm**: The current commission of\
        \ the position in the settlement currency of the symbol (_currency_).\n- **realisedCost**:\
        \ The realised cost of this position calculated with regard to average cost\
        \ accounting.\n- **unrealisedCost**: _currentCost_ - _realisedCost_.\n- **grossOpenCost**:\
        \ The absolute value of your open orders for this symbol.\n- **grossOpenPremium**:\
        \ The amount your bidding above the mark price in the settlement currency\
        \ of the symbol (_currency_).\n- **markPrice**: The mark price of the symbol\
        \ in _quoteCurrency_.\n- **markValue**: The _currentQty_ at the mark price\
        \ in the settlement currency of the symbol (_currency_).\n- **homeNotional**:\
        \ Value of position in units of _underlying_.\n- **foreignNotional**: Value\
        \ of position in units of _quoteCurrency_.\n- **realisedPnl**: The negative\
        \ of _realisedCost_.\n- **unrealisedGrossPnl**: _markValue_ - _unrealisedCost_.\n\
        - **unrealisedPnl**: _unrealisedGrossPnl_.\n- **liquidationPrice**: Once markPrice\
        \ reaches this price, this position will be liquidated.\n- **bankruptPrice**:\
        \ Once markPrice reaches this price, this position will have no equity.\n"
      operationId: "Position.get"
      parameters:
      - name: "filter"
        in: "query"
        description: "Table filter. For example, send {\"symbol\": \"XBTUSD\"}."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Which columns to fetch. For example, send [\"columnName\"]."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of rows to fetch."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/isolate:
    post:
      tags:
      - "Position"
      summary: "Enable isolated margin or cross margin per-position."
      description: "Users can switch isolate margin per-position. This function allows\
        \ switching margin isolation (aka fixed margin) on and off."
      operationId: "Position.isolateMargin"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Position symbol to isolate."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "enabled"
        in: "formData"
        description: "True for isolated margin, false for cross margin."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/riskLimit:
    post:
      tags:
      - "Position"
      summary: "Update your risk limit."
      description: "Risk Limits limit the size of positions you can trade at various\
        \ margin levels. Larger positions require more margin. Please see the Risk\
        \ Limit documentation for more details."
      operationId: "Position.updateRiskLimit"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to update risk limit on."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "riskLimit"
        in: "formData"
        description: "New Risk Limit, in Satoshis."
        required: true
        type: "number"
        format: "int64"
        x-exportParamName: "RiskLimit"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/transferMargin:
    post:
      tags:
      - "Position"
      summary: "Transfer equity in or out of a position."
      description: "When margin is isolated on a position, use this function to add\
        \ or remove margin from the position. Note that you cannot remove margin below\
        \ the initial margin threshold."
      operationId: "Position.transferIsolatedMargin"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to isolate."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "amount"
        in: "formData"
        description: "Amount to transfer, in Satoshis. May be negative."
        required: true
        type: "number"
        format: "int64"
        x-exportParamName: "Amount"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/leverage:
    post:
      tags:
      - "Position"
      summary: "Choose leverage for a position."
      description: "Users can choose an isolated leverage. This will automatically\
        \ enable isolated margin."
      operationId: "Position.updateLeverage"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to adjust."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "leverage"
        in: "formData"
        description: "Leverage value. Send a number between 0.01 and 100 to enable\
          \ isolated margin with a fixed leverage. Send 0 to enable cross margin."
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "Leverage"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /quote:
    get:
      tags:
      - "Quote"
      summary: "Get Quotes."
      operationId: "Quote.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Quote"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /quote/bucketed:
    get:
      tags:
      - "Quote"
      summary: "Get previous quotes in time buckets."
      description: "Timestamps returned by our bucketed endpoints are the **end**\
        \ of the period, indicating when the bucket was written to disk. Some other\
        \ common systems use the timestamp as the beginning of the period. Please\
        \ be aware of this when using this endpoint."
      operationId: "Quote.getBucketed"
      parameters:
      - name: "binSize"
        in: "query"
        description: "Time interval to bucket by. Available options: [1m,5m,1h,1d]."
        required: false
        type: "string"
        default: "1m"
        x-exportParamName: "BinSize"
        x-optionalDataType: "String"
      - name: "partial"
        in: "query"
        description: "If true, will send in-progress (incomplete) bins for the current\
          \ time period."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Partial"
        x-optionalDataType: "Bool"
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Quote"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /schema:
    get:
      tags:
      - "Schema"
      summary: "Get model schemata for data objects returned by this API."
      operationId: "Schema.get"
      parameters:
      - name: "model"
        in: "query"
        description: "Optional model filter. If omitted, will return all models."
        required: false
        type: "string"
        x-exportParamName: "Model"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /schema/websocketHelp:
    get:
      tags:
      - "Schema"
      summary: "Returns help text & subject list for websocket usage."
      operationId: "Schema.websocketHelp"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /settlement:
    get:
      tags:
      - "Settlement"
      summary: "Get settlement history."
      operationId: "Settlement.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Settlement"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /stats:
    get:
      tags:
      - "Stats"
      summary: "Get exchange-wide and per-series turnover and volume statistics."
      operationId: "Stats.get"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Stats"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /stats/history:
    get:
      tags:
      - "Stats"
      summary: "Get historical exchange-wide and per-series turnover and volume statistics."
      operationId: "Stats.history"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StatsHistory"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /stats/historyUSD:
    get:
      tags:
      - "Stats"
      summary: "Get a summary of exchange statistics in USD."
      operationId: "Stats.historyUSD"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StatsUSD"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /trade:
    get:
      tags:
      - "Trade"
      summary: "Get Trades."
      description: "Please note that indices (symbols starting with `.`) post trades\
        \ at intervals to the trade feed. These have a `size` of 0 and are used only\
        \ to indicate a changing price.\n\nSee [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html)\
        \ for explanations of these fields."
      operationId: "Trade.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Trade"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /trade/bucketed:
    get:
      tags:
      - "Trade"
      summary: "Get previous trades in time buckets."
      description: "Timestamps returned by our bucketed endpoints are the **end**\
        \ of the period, indicating when the bucket was written to disk. Some other\
        \ common systems use the timestamp as the beginning of the period. Please\
        \ be aware of this when using this endpoint.\n\nAlso note the `open` price\
        \ is equal to the `close` price of the previous timeframe bucket."
      operationId: "Trade.getBucketed"
      parameters:
      - name: "binSize"
        in: "query"
        description: "Time interval to bucket by. Available options: [1m,5m,1h,1d]."
        required: false
        type: "string"
        default: "1m"
        x-exportParamName: "BinSize"
        x-optionalDataType: "String"
      - name: "partial"
        in: "query"
        description: "If true, will send in-progress (incomplete) bins for the current\
          \ time period."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Partial"
        x-optionalDataType: "Bool"
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100.0
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TradeBin"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/depositAddress:
    get:
      tags:
      - "User"
      summary: "Get a deposit address."
      operationId: "User.getDepositAddress"
      parameters:
      - name: "currency"
        in: "query"
        description: "Options: `XBt`, `USDt`"
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "string"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/wallet:
    get:
      tags:
      - "User"
      summary: "Get your current wallet information."
      operationId: "User.getWallet"
      parameters:
      - name: "currency"
        in: "query"
        description: "Options: `XBt`, `USDt`, `all`"
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Wallet"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/walletHistory:
    get:
      tags:
      - "User"
      summary: "Get a history of all of your wallet transactions (deposits, withdrawals,\
        \ PNL)."
      operationId: "User.getWalletHistory"
      parameters:
      - name: "currency"
        in: "query"
        description: "Options: `XBt`, `USDt`, `all`"
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch."
        required: false
        type: "number"
        default: 100.0
        format: "double"
        x-exportParamName: "Count"
        x-optionalDataType: "Float64"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0.0
        format: "double"
        x-exportParamName: "Start"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/walletSummary:
    get:
      tags:
      - "User"
      summary: "Get a summary of all of your wallet transactions (deposits, withdrawals,\
        \ PNL)."
      operationId: "User.getWalletSummary"
      parameters:
      - name: "currency"
        in: "query"
        description: "Options: `XBt`, `USDt`, `all`"
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/executionHistory:
    get:
      tags:
      - "User"
      summary: "Get the execution history by day."
      operationId: "User.getExecutionHistory"
      parameters:
      - name: "symbol"
        in: "query"
        required: true
        type: "string"
        default: "XBTUSD"
        x-exportParamName: "Symbol"
      - name: "timestamp"
        in: "query"
        required: true
        type: "string"
        default: "2017-02-13T12:00:00.000Z"
        format: "date-time"
        x-exportParamName: "Timestamp"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/minWithdrawalFee:
    get:
      tags:
      - "User"
      summary: "Get the minimum, maximum, and recommended withdrawal fees for a currency."
      description: "This is changed based on network conditions to ensure timely withdrawals.\
        \ During network congestion, this may be high. The fee is returned in the\
        \ same currency.\n\nThe \"fee\" field is the recommended fee for fast confirmation\
        \ on the blockchain."
      operationId: "User.minWithdrawalFee"
      parameters:
      - name: "currency"
        in: "query"
        description: "Options: `XBt`, `USDt`"
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      - name: "amount"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Amount"
        x-optionalDataType: "Float64"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/requestWithdrawal:
    post:
      tags:
      - "User"
      summary: "Request a withdrawal to an external wallet."
      description: "This will send a confirmation email to the email address on record."
      operationId: "User.requestWithdrawal"
      parameters:
      - name: "otpToken"
        in: "formData"
        description: "2FA token. Required for all external withdrawals."
        required: false
        type: "string"
        x-exportParamName: "OtpToken"
        x-optionalDataType: "String"
      - name: "currency"
        in: "formData"
        description: "Currency you're withdrawing. Options: `XBt`, `USDt`"
        required: true
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
      - name: "amount"
        in: "formData"
        description: "Amount of withdrawal currency."
        required: true
        type: "number"
        format: "int64"
        x-exportParamName: "Amount"
      - name: "address"
        in: "formData"
        description: "Destination Address. One of `address`, `addressId`, `targetUserId`\
          \ has to be specified."
        required: false
        type: "string"
        x-exportParamName: "Address"
        x-optionalDataType: "String"
      - name: "addressId"
        in: "formData"
        description: "ID of the Destination Address. One of `address`, `targetUserId`,\
          \ `targetUserId` has to be specified."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AddressId"
        x-optionalDataType: "Float64"
      - name: "targetUserId"
        in: "formData"
        description: "ID of the Target User. One of `address`, `addressId`, `targetUserId`\
          \ has to be specified."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetUserId"
        x-optionalDataType: "Float64"
      - name: "fee"
        in: "formData"
        description: "Network fee for Bitcoin withdrawals. If not specified, a default\
          \ value will be calculated based on Bitcoin network conditions. You will\
          \ have a chance to confirm this via email."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Fee"
        x-optionalDataType: "Float64"
      - name: "text"
        in: "formData"
        description: "Optional annotation, e.g. 'Transfer to home wallet'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/cancelWithdrawal:
    post:
      tags:
      - "User"
      summary: "Cancel a withdrawal."
      operationId: "User.cancelWithdrawal"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/confirmWithdrawal:
    post:
      tags:
      - "User"
      summary: "Confirm a withdrawal."
      operationId: "User.confirmWithdrawal"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/confirmEmail:
    post:
      tags:
      - "User"
      summary: "Confirm your email address with a token."
      operationId: "User.confirm"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/affiliateStatus:
    get:
      tags:
      - "User"
      summary: "Get your current affiliate/referral status."
      operationId: "User.getAffiliateStatus"
      parameters:
      - name: "currency"
        in: "query"
        description: "Options: `XBt`, `USDt`, `all`"
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Affiliate"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/checkReferralCode:
    get:
      tags:
      - "User"
      summary: "Check if a referral code is valid."
      description: "If the code is valid, responds with the referral code's discount\
        \ (e.g. `0.1` for 10%). Otherwise, will return a 404 or 451 if invalid."
      operationId: "User.checkReferralCode"
      parameters:
      - name: "referralCode"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ReferralCode"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "number"
            format: "double"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/quoteFillRatio:
    get:
      tags:
      - "User"
      summary: "Get 7 days worth of Quote Fill Ratio statistics."
      operationId: "User.getQuoteFillRatio"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/QuoteFillRatio"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/quoteValueRatio:
    get:
      tags:
      - "User"
      summary: "Get Quote Value Ratio statistics over the last 3 days"
      operationId: "User.getQuoteValueRatio"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/QuoteValueRatio"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/tradingVolume:
    get:
      tags:
      - "User"
      summary: "Get your 30 days USD average trading volume"
      operationId: "User.getTradingVolume"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/TradingVolume"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/logout:
    post:
      tags:
      - "User"
      summary: "Log out of BitMEX."
      operationId: "User.logout"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "null"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/preferences:
    post:
      tags:
      - "User"
      summary: "Save user preferences."
      operationId: "User.savePreferences"
      parameters:
      - name: "prefs"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Prefs"
      - name: "overwrite"
        in: "formData"
        description: "If true, will overwrite all existing preferences."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Overwrite"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user:
    get:
      tags:
      - "User"
      summary: "Get your user model."
      operationId: "User.get"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/commission:
    get:
      tags:
      - "User"
      summary: "Get your account's commission status."
      operationId: "User.getCommission"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/UserCommissionsBySymbol"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/margin:
    get:
      tags:
      - "User"
      summary: "Get your account's margin status. Send a currency of \"all\" to receive\
        \ an array of all supported currencies."
      operationId: "User.getMargin"
      parameters:
      - name: "currency"
        in: "query"
        description: "Options: `XBt`, `USDt`, `all`"
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Margin"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/communicationToken:
    post:
      tags:
      - "User"
      summary: "Register your communication token for mobile clients"
      operationId: "User.communicationToken"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      - name: "platformAgent"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "PlatformAgent"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CommunicationToken"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /userEvent:
    get:
      tags:
      - "UserEvent"
      summary: "Get your user events"
      operationId: "UserEvent.get"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of results to fetch."
        required: false
        type: "number"
        default: 150.0
        format: "double"
        x-exportParamName: "Count"
        x-optionalDataType: "Float64"
      - name: "startId"
        in: "query"
        description: "Cursor for pagination."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StartId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserEvent"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
securityDefinitions:
  apiKey:
    type: "apiKey"
    name: "api-key"
    in: "header"
  apiSignature:
    type: "apiKey"
    name: "api-signature"
    in: "header"
  apiExpires:
    type: "apiKey"
    name: "api-expires"
    in: "header"
definitions:
  Announcement:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "number"
        format: "int32"
      link:
        type: "string"
      title:
        type: "string"
      content:
        type: "string"
      date:
        type: "string"
        format: "date-time"
    description: "Public Announcements"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      link: "link"
      id: 0.80082819046101150206595775671303272247314453125
      title: "title"
      content: "content"
  Error:
    type: "object"
    required:
    - "error"
    properties:
      error:
        $ref: "#/definitions/Error_error"
  APIKey:
    type: "object"
    required:
    - "id"
    - "name"
    - "nonce"
    - "secret"
    - "userId"
    properties:
      id:
        type: "string"
        maxLength: 24
      secret:
        type: "string"
        maxLength: 48
      name:
        type: "string"
        maxLength: 64
      nonce:
        type: "number"
        format: "int64"
      cidr:
        type: "string"
        maxLength: 18
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      enabled:
        type: "boolean"
        default: false
      userId:
        type: "number"
        format: "int32"
      created:
        type: "string"
        format: "date-time"
    description: "Persistent API Keys for Developers"
    example:
      permissions:
      - {}
      - {}
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      cidr: "cidr"
      id: "id"
      secret: "secret"
      nonce: 0.80082819046101150206595775671303272247314453125
      userId: 6.02745618307040320615897144307382404804229736328125
      enabled: false
  Chat:
    type: "object"
    required:
    - "date"
    - "html"
    - "message"
    - "user"
    properties:
      id:
        type: "number"
        format: "int32"
      date:
        type: "string"
        format: "date-time"
      user:
        type: "string"
      message:
        type: "string"
      html:
        type: "string"
      fromBot:
        type: "boolean"
        default: false
      channelID:
        type: "number"
        format: "double"
    description: "Trollbox Data"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      html: "html"
      id: 0.80082819046101150206595775671303272247314453125
      message: "message"
      user: "user"
      channelID: 6.027456183070403
      fromBot: false
  ChatChannel:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "number"
        format: "int32"
      name:
        type: "string"
    example:
      name: "name"
      id: 0.80082819046101150206595775671303272247314453125
  ConnectedUsers:
    type: "object"
    properties:
      users:
        type: "number"
        format: "int32"
      bots:
        type: "number"
        format: "int32"
    example:
      bots: 6.02745618307040320615897144307382404804229736328125
      users: 0.80082819046101150206595775671303272247314453125
  Execution:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      execID:
        type: "string"
        format: "guid"
      orderID:
        type: "string"
        format: "guid"
      clOrdID:
        type: "string"
      clOrdLinkID:
        type: "string"
      account:
        type: "number"
        format: "int64"
      symbol:
        type: "string"
      side:
        type: "string"
      lastQty:
        type: "number"
        format: "int64"
      lastPx:
        type: "number"
        format: "double"
      underlyingLastPx:
        type: "number"
        format: "double"
      lastMkt:
        type: "string"
      lastLiquidityInd:
        type: "string"
      simpleOrderQty:
        type: "number"
        format: "double"
      orderQty:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "double"
      displayQty:
        type: "number"
        format: "int64"
      stopPx:
        type: "number"
        format: "double"
      pegOffsetValue:
        type: "number"
        format: "double"
      pegPriceType:
        type: "string"
      currency:
        type: "string"
      settlCurrency:
        type: "string"
      execType:
        type: "string"
      ordType:
        type: "string"
      timeInForce:
        type: "string"
      execInst:
        type: "string"
      contingencyType:
        type: "string"
      exDestination:
        type: "string"
      ordStatus:
        type: "string"
      triggered:
        type: "string"
      workingIndicator:
        type: "boolean"
      ordRejReason:
        type: "string"
      simpleLeavesQty:
        type: "number"
        format: "double"
      leavesQty:
        type: "number"
        format: "int64"
      simpleCumQty:
        type: "number"
        format: "double"
      cumQty:
        type: "number"
        format: "int64"
      avgPx:
        type: "number"
        format: "double"
      commission:
        type: "number"
        format: "double"
      tradePublishIndicator:
        type: "string"
      multiLegReportingType:
        type: "string"
      text:
        type: "string"
      trdMatchID:
        type: "string"
        format: "guid"
      execCost:
        type: "number"
        format: "int64"
      execComm:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
      foreignNotional:
        type: "number"
        format: "double"
      transactTime:
        type: "string"
        format: "date-time"
      timestamp:
        type: "string"
        format: "date-time"
    description: "Raw Order and Balance Data"
    example:
      symbol: "symbol"
      triggered: "triggered"
      clOrdLinkID: "clOrdLinkID"
      execInst: "execInst"
      homeNotional: 4.965218492984954
      pegOffsetValue: 2.027123023002322
      pegPriceType: "pegPriceType"
      execID: "execID"
      contingencyType: "contingencyType"
      foreignNotional: 5.025004791520295
      lastMkt: "lastMkt"
      simpleCumQty: 1.2315135367772556
      execCost: 7.4577447736837658709418974467553198337554931640625
      execComm: 1.173074250955943309548956676735542714595794677734375
      settlCurrency: "settlCurrency"
      ordRejReason: "ordRejReason"
      price: 7.061401241503109
      trdMatchID: "trdMatchID"
      orderQty: 2.3021358869347654518833223846741020679473876953125
      currency: "currency"
      commission: 6.84685269835264
      text: "text"
      execType: "execType"
      timeInForce: "timeInForce"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      ordStatus: "ordStatus"
      side: "side"
      simpleOrderQty: 5.637376656633329
      orderID: "orderID"
      lastPx: 1.4658129805029452
      leavesQty: 7.3862819483858839220147274318151175975799560546875
      cumQty: 1.024645700144157789424070870154537260532379150390625
      tradePublishIndicator: "tradePublishIndicator"
      displayQty: 9.301444243932575517419536481611430644989013671875
      simpleLeavesQty: 4.145608029883936
      clOrdID: "clOrdID"
      lastQty: 6.02745618307040320615897144307382404804229736328125
      avgPx: 1.4894159098541704
      multiLegReportingType: "multiLegReportingType"
      workingIndicator: true
      lastLiquidityInd: "lastLiquidityInd"
      transactTime: "2000-01-23T04:56:07.000+00:00"
      exDestination: "exDestination"
      account: 0.80082819046101150206595775671303272247314453125
      underlyingLastPx: 5.962133916683182
      stopPx: 3.616076749251911
      ordType: "ordType"
  Funding:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      fundingInterval:
        type: "string"
        format: "date-time"
      fundingRate:
        type: "number"
        format: "double"
      fundingRateDaily:
        type: "number"
        format: "double"
    description: "Swap Funding History"
    example:
      symbol: "symbol"
      fundingRateDaily: 6.027456183070403
      fundingInterval: "2000-01-23T04:56:07.000+00:00"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      fundingRate: 0.8008281904610115
  Instrument:
    type: "object"
    required:
    - "symbol"
    properties:
      symbol:
        type: "string"
      rootSymbol:
        type: "string"
      state:
        type: "string"
      typ:
        type: "string"
      listing:
        type: "string"
        format: "date-time"
      front:
        type: "string"
        format: "date-time"
      expiry:
        type: "string"
        format: "date-time"
      settle:
        type: "string"
        format: "date-time"
      listedSettle:
        type: "string"
        format: "date-time"
      relistInterval:
        type: "string"
        format: "date-time"
      inverseLeg:
        type: "string"
      sellLeg:
        type: "string"
      buyLeg:
        type: "string"
      optionStrikePcnt:
        type: "number"
        format: "double"
      optionStrikeRound:
        type: "number"
        format: "double"
      optionStrikePrice:
        type: "number"
        format: "double"
      optionMultiplier:
        type: "number"
        format: "double"
      positionCurrency:
        type: "string"
      underlying:
        type: "string"
      quoteCurrency:
        type: "string"
      underlyingSymbol:
        type: "string"
      reference:
        type: "string"
      referenceSymbol:
        type: "string"
      calcInterval:
        type: "string"
        format: "date-time"
      publishInterval:
        type: "string"
        format: "date-time"
      publishTime:
        type: "string"
        format: "date-time"
      maxOrderQty:
        type: "number"
        format: "int64"
      maxPrice:
        type: "number"
        format: "double"
      lotSize:
        type: "number"
        format: "int64"
      tickSize:
        type: "number"
        format: "double"
      multiplier:
        type: "number"
        format: "int64"
      settlCurrency:
        type: "string"
      underlyingToPositionMultiplier:
        type: "number"
        format: "int64"
      underlyingToSettleMultiplier:
        type: "number"
        format: "int64"
      quoteToSettleMultiplier:
        type: "number"
        format: "int64"
      isQuanto:
        type: "boolean"
      isInverse:
        type: "boolean"
      initMargin:
        type: "number"
        format: "double"
      maintMargin:
        type: "number"
        format: "double"
      riskLimit:
        type: "number"
        format: "int64"
      riskStep:
        type: "number"
        format: "int64"
      limit:
        type: "number"
        format: "double"
      capped:
        type: "boolean"
      taxed:
        type: "boolean"
      deleverage:
        type: "boolean"
      makerFee:
        type: "number"
        format: "double"
      takerFee:
        type: "number"
        format: "double"
      settlementFee:
        type: "number"
        format: "double"
      insuranceFee:
        type: "number"
        format: "double"
      fundingBaseSymbol:
        type: "string"
      fundingQuoteSymbol:
        type: "string"
      fundingPremiumSymbol:
        type: "string"
      fundingTimestamp:
        type: "string"
        format: "date-time"
      fundingInterval:
        type: "string"
        format: "date-time"
      fundingRate:
        type: "number"
        format: "double"
      indicativeFundingRate:
        type: "number"
        format: "double"
      rebalanceTimestamp:
        type: "string"
        format: "date-time"
      rebalanceInterval:
        type: "string"
        format: "date-time"
      openingTimestamp:
        type: "string"
        format: "date-time"
      closingTimestamp:
        type: "string"
        format: "date-time"
      sessionInterval:
        type: "string"
        format: "date-time"
      prevClosePrice:
        type: "number"
        format: "double"
      limitDownPrice:
        type: "number"
        format: "double"
      limitUpPrice:
        type: "number"
        format: "double"
      bankruptLimitDownPrice:
        type: "number"
        format: "double"
      bankruptLimitUpPrice:
        type: "number"
        format: "double"
      prevTotalVolume:
        type: "number"
        format: "int64"
      totalVolume:
        type: "number"
        format: "int64"
      volume:
        type: "number"
        format: "int64"
      volume24h:
        type: "number"
        format: "int64"
      prevTotalTurnover:
        type: "number"
        format: "int64"
      totalTurnover:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
      turnover24h:
        type: "number"
        format: "int64"
      homeNotional24h:
        type: "number"
        format: "double"
      foreignNotional24h:
        type: "number"
        format: "double"
      prevPrice24h:
        type: "number"
        format: "double"
      vwap:
        type: "number"
        format: "double"
      highPrice:
        type: "number"
        format: "double"
      lowPrice:
        type: "number"
        format: "double"
      lastPrice:
        type: "number"
        format: "double"
      lastPriceProtected:
        type: "number"
        format: "double"
      lastTickDirection:
        type: "string"
      lastChangePcnt:
        type: "number"
        format: "double"
      bidPrice:
        type: "number"
        format: "double"
      midPrice:
        type: "number"
        format: "double"
      askPrice:
        type: "number"
        format: "double"
      impactBidPrice:
        type: "number"
        format: "double"
      impactMidPrice:
        type: "number"
        format: "double"
      impactAskPrice:
        type: "number"
        format: "double"
      hasLiquidity:
        type: "boolean"
      openInterest:
        type: "number"
        format: "int64"
      openValue:
        type: "number"
        format: "int64"
      fairMethod:
        type: "string"
      fairBasisRate:
        type: "number"
        format: "double"
      fairBasis:
        type: "number"
        format: "double"
      fairPrice:
        type: "number"
        format: "double"
      markMethod:
        type: "string"
      markPrice:
        type: "number"
        format: "double"
      indicativeTaxRate:
        type: "number"
        format: "double"
      indicativeSettlePrice:
        type: "number"
        format: "double"
      optionUnderlyingPrice:
        type: "number"
        format: "double"
      settledPriceAdjustmentRate:
        type: "number"
        format: "double"
      settledPrice:
        type: "number"
        format: "double"
      timestamp:
        type: "string"
        format: "date-time"
    description: "Tradeable Contracts, Indices, and History"
    example:
      optionUnderlyingPrice: 0.5199002018724985
      deleverage: true
      riskLimit: 1.489415909854170383397331534069962799549102783203125
      fundingBaseSymbol: "fundingBaseSymbol"
      prevPrice24h: 7.058770351582356
      highPrice: 0.10263654006109402
      fairMethod: "fairMethod"
      taxed: true
      state: "state"
      expiry: "2000-01-23T04:56:07.000+00:00"
      fundingPremiumSymbol: "fundingPremiumSymbol"
      publishInterval: "2000-01-23T04:56:07.000+00:00"
      publishTime: "2000-01-23T04:56:07.000+00:00"
      maintMargin: 1.0246457001441578
      takerFee: 4.965218492984954
      fairBasis: 4.678947989005849
      volume24h: 6.87805222012787620400331434211693704128265380859375
      underlying: "underlying"
      quoteToSettleMultiplier: 7.3862819483858839220147274318151175975799560546875
      fundingQuoteSymbol: "fundingQuoteSymbol"
      quoteCurrency: "quoteCurrency"
      indicativeSettlePrice: 9.702963800023566
      settledPrice: 5.507386964179881
      relistInterval: "2000-01-23T04:56:07.000+00:00"
      prevClosePrice: 8.762042012749001
      maxPrice: 2.3021358869347655
      underlyingToPositionMultiplier: 2.027123023002321833274663731572218239307403564453125
      settle: "2000-01-23T04:56:07.000+00:00"
      buyLeg: "buyLeg"
      tickSize: 9.301444243932576
      markPrice: 9.132027271330688
      settlCurrency: "settlCurrency"
      listing: "2000-01-23T04:56:07.000+00:00"
      indicativeFundingRate: 6.683562403749608
      positionCurrency: "positionCurrency"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      limitDownPrice: 9.018348186070783
      lastTickDirection: "lastTickDirection"
      settledPriceAdjustmentRate: 7.933506881737151
      rebalanceTimestamp: "2000-01-23T04:56:07.000+00:00"
      fairBasisRate: 1.041444916118296
      lastPriceProtected: 7.740351818741173
      midPrice: 7.04836565559697
      insuranceFee: 9.965781217890562
      optionStrikePrice: 1.4658129805029452
      limitUpPrice: 6.438423552598547
      bankruptLimitUpPrice: 6.965117697638846
      rebalanceInterval: "2000-01-23T04:56:07.000+00:00"
      fundingRate: 9.369310271410669
      lastPrice: 8.969578798196912
      totalVolume: 2.884162126668780246063761296682059764862060546875
      symbol: "symbol"
      listedSettle: "2000-01-23T04:56:07.000+00:00"
      capped: true
      vwap: 6.519180951018382
      closingTimestamp: "2000-01-23T04:56:07.000+00:00"
      typ: "typ"
      inverseLeg: "inverseLeg"
      reference: "reference"
      prevTotalTurnover: 5.94489560761401580890606055618263781070709228515625
      limit: 7.457744773683766
      calcInterval: "2000-01-23T04:56:07.000+00:00"
      lastChangePcnt: 3.0205796992916243
      askPrice: 5.533258397034986
      multiplier: 3.61607674925191080461672754609026014804840087890625
      indicativeTaxRate: 0.8774076871421566
      settlementFee: 5.025004791520295
      totalTurnover: 6.70401929795003592715829654480330646038055419921875
      turnover24h: 3.093745262666447448651751983561553061008453369140625
      fairPrice: 7.260521264802104
      bidPrice: 3.0576100241049344
      volume: 6.77832496304801335185175048536621034145355224609375
      impactMidPrice: 4.078845849666752
      sellLeg: "sellLeg"
      optionStrikePcnt: 0.8008281904610115
      maxOrderQty: 5.63737665663332876420099637471139430999755859375
      hasLiquidity: true
      openInterest: 6.6284642750877420525057459599338471889495849609375
      riskStep: 6.8468526983526398765889098285697400569915771484375
      optionStrikeRound: 6.027456183070403
      isQuanto: true
      rootSymbol: "rootSymbol"
      markMethod: "markMethod"
      underlyingSymbol: "underlyingSymbol"
      fundingTimestamp: "2000-01-23T04:56:07.000+00:00"
      makerFee: 1.1730742509559433
      lowPrice: 4.652396432933246
      underlyingToSettleMultiplier: 4.1456080298839363962315474054776132106781005859375
      sessionInterval: "2000-01-23T04:56:07.000+00:00"
      fundingInterval: "2000-01-23T04:56:07.000+00:00"
      bankruptLimitDownPrice: 3.5571952270680973
      turnover: 3.35319334701124294184637619764544069766998291015625
      impactAskPrice: 0.2025324113236393
      referenceSymbol: "referenceSymbol"
      homeNotional24h: 7.143538047012306
      openValue: 4.258773108174356281097061582840979099273681640625
      isInverse: true
      lotSize: 7.061401241503109105224211816675961017608642578125
      optionMultiplier: 5.962133916683182
      openingTimestamp: "2000-01-23T04:56:07.000+00:00"
      foreignNotional24h: 0.8851374739011653
      impactBidPrice: 3.2588565619047607
      prevTotalVolume: 1.2846590061165319429647979632136411964893341064453125
      initMargin: 1.2315135367772556
      front: "2000-01-23T04:56:07.000+00:00"
  InstrumentInterval:
    type: "object"
    required:
    - "intervals"
    - "symbols"
    properties:
      intervals:
        type: "array"
        items:
          type: "string"
      symbols:
        type: "array"
        items:
          type: "string"
    example:
      intervals:
      - "intervals"
      - "intervals"
      symbols:
      - "symbols"
      - "symbols"
  x-any:
    type: "object"
  IndexComposite:
    type: "object"
    required:
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      indexSymbol:
        type: "string"
      indexMultiplier:
        type: "number"
        format: "double"
      reference:
        type: "string"
      lastPrice:
        type: "number"
        format: "double"
      sourcePrice:
        type: "number"
        format: "double"
      conversionIndex:
        type: "string"
      conversionIndexPrice:
        type: "number"
        format: "double"
      weight:
        type: "number"
        format: "double"
      logged:
        type: "string"
        format: "date-time"
    example:
      reference: "reference"
      conversionIndex: "conversionIndex"
      symbol: "symbol"
      indexSymbol: "indexSymbol"
      logged: "2000-01-23T04:56:07.000+00:00"
      conversionIndexPrice: 5.962133916683182
      weight: 5.637376656633329
      indexMultiplier: 0.8008281904610115
      sourcePrice: 1.4658129805029452
      timestamp: "2000-01-23T04:56:07.000+00:00"
      lastPrice: 6.027456183070403
  Insurance:
    type: "object"
    required:
    - "currency"
    - "timestamp"
    properties:
      currency:
        type: "string"
      timestamp:
        type: "string"
        format: "date-time"
      walletBalance:
        type: "number"
        format: "int64"
    description: "Insurance Fund Data"
    example:
      walletBalance: 0.80082819046101150206595775671303272247314453125
      currency: "currency"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Leaderboard:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      isRealName:
        type: "boolean"
      profit:
        type: "number"
        format: "double"
    description: "Information on Top Users"
    example:
      name: "name"
      isRealName: true
      profit: 0.8008281904610115
  Liquidation:
    type: "object"
    properties:
      id:
        type: "number"
        format: "double"
    description: "Active Liquidations"
    example:
      id: 0.8008281904610115
  GlobalNotification:
    type: "object"
    required:
    - "body"
    - "date"
    - "title"
    - "ttl"
    properties:
      id:
        type: "number"
        format: "int32"
      date:
        type: "string"
        format: "date-time"
      title:
        type: "string"
      body:
        type: "string"
      ttl:
        type: "number"
        format: "int32"
      type:
        type: "string"
        enum:
        - "success"
        - "error"
        - "info"
      closable:
        type: "boolean"
        default: true
      persist:
        type: "boolean"
        default: true
      waitForVisibility:
        type: "boolean"
        default: true
      sound:
        type: "string"
    description: "Account Notifications"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      waitForVisibility: true
      closable: true
      sound: "sound"
      id: 0.80082819046101150206595775671303272247314453125
      persist: true
      title: "title"
      body: "body"
      type: "success"
      ttl: 6.02745618307040320615897144307382404804229736328125
  Order:
    type: "object"
    required:
    - "orderID"
    properties:
      orderID:
        type: "string"
        format: "guid"
      clOrdID:
        type: "string"
      clOrdLinkID:
        type: "string"
      account:
        type: "number"
        format: "int64"
      symbol:
        type: "string"
      side:
        type: "string"
      simpleOrderQty:
        type: "number"
        format: "double"
      orderQty:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "double"
      displayQty:
        type: "number"
        format: "int64"
      stopPx:
        type: "number"
        format: "double"
      pegOffsetValue:
        type: "number"
        format: "double"
      pegPriceType:
        type: "string"
      currency:
        type: "string"
      settlCurrency:
        type: "string"
      ordType:
        type: "string"
      timeInForce:
        type: "string"
      execInst:
        type: "string"
      contingencyType:
        type: "string"
      exDestination:
        type: "string"
      ordStatus:
        type: "string"
      triggered:
        type: "string"
      workingIndicator:
        type: "boolean"
      ordRejReason:
        type: "string"
      simpleLeavesQty:
        type: "number"
        format: "double"
      leavesQty:
        type: "number"
        format: "int64"
      simpleCumQty:
        type: "number"
        format: "double"
      cumQty:
        type: "number"
        format: "int64"
      avgPx:
        type: "number"
        format: "double"
      multiLegReportingType:
        type: "string"
      text:
        type: "string"
      transactTime:
        type: "string"
        format: "date-time"
      timestamp:
        type: "string"
        format: "date-time"
    description: "Placement, Cancellation, Amending, and History"
    example:
      symbol: "symbol"
      triggered: "triggered"
      clOrdLinkID: "clOrdLinkID"
      execInst: "execInst"
      pegOffsetValue: 7.061401241503109
      pegPriceType: "pegPriceType"
      contingencyType: "contingencyType"
      simpleCumQty: 2.027123023002322
      settlCurrency: "settlCurrency"
      ordRejReason: "ordRejReason"
      price: 5.962133916683182
      orderQty: 1.46581298050294517310021547018550336360931396484375
      currency: "currency"
      text: "text"
      timeInForce: "timeInForce"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      ordStatus: "ordStatus"
      side: "side"
      simpleOrderQty: 6.027456183070403
      orderID: "orderID"
      leavesQty: 3.61607674925191080461672754609026014804840087890625
      cumQty: 4.1456080298839363962315474054776132106781005859375
      displayQty: 5.63737665663332876420099637471139430999755859375
      simpleLeavesQty: 9.301444243932576
      clOrdID: "clOrdID"
      avgPx: 7.386281948385884
      multiLegReportingType: "multiLegReportingType"
      workingIndicator: true
      transactTime: "2000-01-23T04:56:07.000+00:00"
      exDestination: "exDestination"
      account: 0.80082819046101150206595775671303272247314453125
      stopPx: 2.3021358869347655
      ordType: "ordType"
  OrderBookL2:
    type: "object"
    properties:
      id:
        type: "number"
        format: "double"
    example:
      id: 0.8008281904610115
  Position:
    type: "object"
    required:
    - "account"
    - "symbol"
    properties:
      account:
        type: "number"
        format: "int64"
      symbol:
        type: "string"
      currency:
        type: "string"
      underlying:
        type: "string"
      quoteCurrency:
        type: "string"
      commission:
        type: "number"
        format: "double"
        default: 0.0
      initMarginReq:
        type: "number"
        format: "double"
        default: 0.0
      maintMarginReq:
        type: "number"
        format: "double"
        default: 0.0
      riskLimit:
        type: "number"
        format: "int64"
      leverage:
        type: "number"
        format: "double"
        default: 0.0
      crossMargin:
        type: "boolean"
      deleveragePercentile:
        type: "number"
        format: "double"
        default: 0.0
      rebalancedPnl:
        type: "number"
        format: "int64"
      prevRealisedPnl:
        type: "number"
        format: "int64"
      prevUnrealisedPnl:
        type: "number"
        format: "int64"
      prevClosePrice:
        type: "number"
        format: "double"
        default: 0.0
      openingTimestamp:
        type: "string"
        format: "date-time"
      openingQty:
        type: "number"
        format: "int64"
      openingCost:
        type: "number"
        format: "int64"
      openingComm:
        type: "number"
        format: "int64"
      openOrderBuyQty:
        type: "number"
        format: "int64"
      openOrderBuyCost:
        type: "number"
        format: "int64"
      openOrderBuyPremium:
        type: "number"
        format: "int64"
      openOrderSellQty:
        type: "number"
        format: "int64"
      openOrderSellCost:
        type: "number"
        format: "int64"
      openOrderSellPremium:
        type: "number"
        format: "int64"
      execBuyQty:
        type: "number"
        format: "int64"
      execBuyCost:
        type: "number"
        format: "int64"
      execSellQty:
        type: "number"
        format: "int64"
      execSellCost:
        type: "number"
        format: "int64"
      execQty:
        type: "number"
        format: "int64"
      execCost:
        type: "number"
        format: "int64"
      execComm:
        type: "number"
        format: "int64"
      currentTimestamp:
        type: "string"
        format: "date-time"
      currentQty:
        type: "number"
        format: "int64"
      currentCost:
        type: "number"
        format: "int64"
      currentComm:
        type: "number"
        format: "int64"
      realisedCost:
        type: "number"
        format: "int64"
      unrealisedCost:
        type: "number"
        format: "int64"
      grossOpenCost:
        type: "number"
        format: "int64"
      grossOpenPremium:
        type: "number"
        format: "int64"
      grossExecCost:
        type: "number"
        format: "int64"
      isOpen:
        type: "boolean"
      markPrice:
        type: "number"
        format: "double"
        default: 0.0
      markValue:
        type: "number"
        format: "int64"
      riskValue:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
        default: 0.0
      foreignNotional:
        type: "number"
        format: "double"
        default: 0.0
      posState:
        type: "string"
      posCost:
        type: "number"
        format: "int64"
      posCost2:
        type: "number"
        format: "int64"
      posCross:
        type: "number"
        format: "int64"
      posInit:
        type: "number"
        format: "int64"
      posComm:
        type: "number"
        format: "int64"
      posLoss:
        type: "number"
        format: "int64"
      posMargin:
        type: "number"
        format: "int64"
      posMaint:
        type: "number"
        format: "int64"
      posAllowance:
        type: "number"
        format: "int64"
      taxableMargin:
        type: "number"
        format: "int64"
      initMargin:
        type: "number"
        format: "int64"
      maintMargin:
        type: "number"
        format: "int64"
      sessionMargin:
        type: "number"
        format: "int64"
      targetExcessMargin:
        type: "number"
        format: "int64"
      varMargin:
        type: "number"
        format: "int64"
      realisedGrossPnl:
        type: "number"
        format: "int64"
      realisedTax:
        type: "number"
        format: "int64"
      realisedPnl:
        type: "number"
        format: "int64"
      unrealisedGrossPnl:
        type: "number"
        format: "int64"
      longBankrupt:
        type: "number"
        format: "int64"
      shortBankrupt:
        type: "number"
        format: "int64"
      taxBase:
        type: "number"
        format: "int64"
      indicativeTaxRate:
        type: "number"
        format: "double"
        default: 0.0
      indicativeTax:
        type: "number"
        format: "int64"
      unrealisedTax:
        type: "number"
        format: "int64"
      unrealisedPnl:
        type: "number"
        format: "int64"
      unrealisedPnlPcnt:
        type: "number"
        format: "double"
        default: 0.0
      unrealisedRoePcnt:
        type: "number"
        format: "double"
        default: 0.0
      simpleQty:
        type: "number"
        format: "double"
        default: 0.0
      simpleCost:
        type: "number"
        format: "double"
        default: 0.0
      simpleValue:
        type: "number"
        format: "double"
        default: 0.0
      simplePnl:
        type: "number"
        format: "double"
        default: 0.0
      simplePnlPcnt:
        type: "number"
        format: "double"
        default: 0.0
      avgCostPrice:
        type: "number"
        format: "double"
        default: 0.0
      avgEntryPrice:
        type: "number"
        format: "double"
        default: 0.0
      breakEvenPrice:
        type: "number"
        format: "double"
        default: 0.0
      marginCallPrice:
        type: "number"
        format: "double"
        default: 0.0
      liquidationPrice:
        type: "number"
        format: "double"
        default: 0.0
      bankruptPrice:
        type: "number"
        format: "double"
        default: 0.0
      timestamp:
        type: "string"
        format: "date-time"
      lastPrice:
        type: "number"
        format: "double"
        default: 0.0
      lastValue:
        type: "number"
        format: "int64"
    description: "Summary of Open and Closed Positions"
    example:
      symbol: "symbol"
      lastValue: 5.2991435602753593769875806174241006374359130859375
      breakEvenPrice: 1.8268702177058116
      avgCostPrice: 8.863729185622827
      posLoss: 3.05761002410493443193217899533919990062713623046875
      openOrderSellQty: 1.173074250955943309548956676735542714595794677734375
      avgEntryPrice: 9.254183946267839
      taxBase: 5.5073869641798811613853104063309729099273681640625
      foreignNotional: 6.519180951018382
      execComm: 3.557195227068097320710649000830017030239105224609375
      riskLimit: 5.63737665663332876420099637471139430999755859375
      prevUnrealisedPnl: 2.027123023002321833274663731572218239307403564453125
      longBankrupt: 0.519900201872498524124921459588222205638885498046875
      marginCallPrice: 3.502657762086401
      unrealisedCost: 6.87805222012787620400331434211693704128265380859375
      posComm: 3.02057969929162428712743349024094641208648681640625
      posMaint: 5.5332583970349862312332334113307297229766845703125
      simplePnlPcnt: 4.573936264232251
      execSellCost: 8.7620420127490010742121739895083010196685791015625
      realisedCost: 6.77832496304801335185175048536621034145355224609375
      posInit: 7.7403518187411730622216055053286254405975341796875
      grossExecCost: 3.35319334701124294184637619764544069766998291015625
      posAllowance: 3.258856561904760695824734284542500972747802734375
      targetExcessMargin: 1.0414449161182959269211778519093059003353118896484375
      shortBankrupt: 7.93350688173715123951978966942988336086273193359375
      indicativeTax: 6.07389808578115175663469926803372800350189208984375
      maintMargin: 6.6284642750877420525057459599338471889495849609375
      riskValue: 0.885137473901165261480628032586537301540374755859375
      execBuyCost: 9.3693102714106686335071572102606296539306640625
      grossOpenPremium: 6.70401929795003592715829654480330646038055419921875
      currentCost: 1.2846590061165319429647979632136411964893341064453125
      indicativeTaxRate: 4.86315908102884
      underlying: "underlying"
      quoteCurrency: "quoteCurrency"
      initMarginReq: 1.4658129805029452
      isOpen: true
      posCross: 8.9695787981969115065794539987109601497650146484375
      currentTimestamp: "2000-01-23T04:56:07.000+00:00"
      simpleValue: 8.28965939814297
      prevClosePrice: 4.145608029883936
      unrealisedPnlPcnt: 3.901545264248647
      simpleCost: 1.7325933120207193
      execQty: 9.0183481860707832566959041287191212177276611328125
      taxableMargin: 4.078845849666752343409825698472559452056884765625
      openingCost: 1.231513536777255612975068288506008684635162353515625
      realisedGrossPnl: 7.26052126480210358039357743109576404094696044921875
      leverage: 2.3021358869347655
      posState: "posState"
      openOrderSellPremium: 5.02500479152029466689555192715488374233245849609375
      simpleQty: 2.9409642974827896
      openingQty: 7.3862819483858839220147274318151175975799560546875
      homeNotional: 7.058770351582356
      liquidationPrice: 9.183123594773994
      openOrderBuyQty: 1.489415909854170383397331534069962799549102783203125
      unrealisedPnl: 4.4596050349586793259959449642337858676910400390625
      execCost: 6.438423552598546706349225132726132869720458984375
      unrealisedGrossPnl: 9.7029638000235660655334868351928889751434326171875
      markPrice: 3.0937452626664474
      posMargin: 7.04836565559697003635619694250635802745819091796875
      unrealisedTax: 8.2516257489237574418439180590212345123291015625
      crossMargin: true
      deleveragePercentile: 7.061401241503109
      openOrderBuyCost: 6.8468526983526398765889098285697400569915771484375
      posCost: 0.10263654006109401706225980888120830059051513671875
      currency: "currency"
      commission: 6.027456183070403
      sessionMargin: 4.258773108174356281097061582840979099273681640625
      maintMarginReq: 5.962133916683182
      bankruptPrice: 8.761432466225475
      openOrderSellCost: 4.9652184929849543237878606305457651615142822265625
      markValue: 7.14353804701230643559028976596891880035400390625
      timestamp: "2000-01-23T04:56:07.000+00:00"
      realisedPnl: 0.8774076871421565559927557842456735670566558837890625
      varMargin: 4.67894798900584873990737833082675933837890625
      realisedTax: 9.132027271330688478201409452594816684722900390625
      rebalancedPnl: 9.301444243932575517419536481611430644989013671875
      openOrderBuyPremium: 7.4577447736837658709418974467553198337554931640625
      posCost2: 4.6523964329332461176136348512955009937286376953125
      openingTimestamp: "2000-01-23T04:56:07.000+00:00"
      currentQty: 6.96511769763884558415156789124011993408203125
      currentComm: 2.884162126668780246063761296682059764862060546875
      execSellQty: 6.683562403749608193948006373830139636993408203125
      grossOpenCost: 5.94489560761401580890606055618263781070709228515625
      prevRealisedPnl: 3.61607674925191080461672754609026014804840087890625
      execBuyQty: 9.965781217890562260208753286860883235931396484375
      initMargin: 0.202532411323639305322785730822943150997161865234375
      unrealisedRoePcnt: 0.43431398824148815
      simplePnl: 6.623518433804886
      account: 0.80082819046101150206595775671303272247314453125
      openingComm: 1.024645700144157789424070870154537260532379150390625
      lastPrice: 0.4182561061793122
  Quote:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      bidSize:
        type: "number"
        format: "int64"
      bidPrice:
        type: "number"
        format: "double"
      askPrice:
        type: "number"
        format: "double"
      askSize:
        type: "number"
        format: "int64"
    description: "Best Bid/Offer Snapshots & Historical Bins"
    example:
      symbol: "symbol"
      askPrice: 1.4658129805029452
      bidSize: 0.80082819046101150206595775671303272247314453125
      bidPrice: 6.027456183070403
      askSize: 5.962133916683182377482808078639209270477294921875
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Settlement:
    type: "object"
    properties:
      id:
        type: "number"
        format: "double"
    description: "Historical Settlement Data"
    example:
      id: 0.8008281904610115
  Stats:
    type: "object"
    required:
    - "rootSymbol"
    properties:
      rootSymbol:
        type: "string"
      currency:
        type: "string"
      volume24h:
        type: "number"
        format: "int64"
      turnover24h:
        type: "number"
        format: "int64"
      openInterest:
        type: "number"
        format: "int64"
      openValue:
        type: "number"
        format: "int64"
    description: "Exchange Statistics"
    example:
      openInterest: 1.46581298050294517310021547018550336360931396484375
      openValue: 5.962133916683182377482808078639209270477294921875
      volume24h: 0.80082819046101150206595775671303272247314453125
      currency: "currency"
      turnover24h: 6.02745618307040320615897144307382404804229736328125
      rootSymbol: "rootSymbol"
  StatsHistory:
    type: "object"
    required:
    - "date"
    - "rootSymbol"
    properties:
      date:
        type: "string"
        format: "date-time"
      rootSymbol:
        type: "string"
      currency:
        type: "string"
      volume:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      volume: 0.80082819046101150206595775671303272247314453125
      currency: "currency"
      turnover: 6.02745618307040320615897144307382404804229736328125
      rootSymbol: "rootSymbol"
  StatsUSD:
    type: "object"
    required:
    - "rootSymbol"
    properties:
      rootSymbol:
        type: "string"
      currency:
        type: "string"
      turnover24h:
        type: "number"
        format: "int64"
      turnover30d:
        type: "number"
        format: "int64"
      turnover365d:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
    example:
      turnover30d: 6.02745618307040320615897144307382404804229736328125
      turnover365d: 1.46581298050294517310021547018550336360931396484375
      currency: "currency"
      turnover24h: 0.80082819046101150206595775671303272247314453125
      turnover: 5.962133916683182377482808078639209270477294921875
      rootSymbol: "rootSymbol"
  Trade:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      side:
        type: "string"
      size:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "double"
      tickDirection:
        type: "string"
      trdMatchID:
        type: "string"
        format: "guid"
      grossValue:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
      foreignNotional:
        type: "number"
        format: "double"
    description: "Individual & Bucketed Trades"
    example:
      foreignNotional: 5.637376656633329
      symbol: "symbol"
      side: "side"
      tickDirection: "tickDirection"
      size: 0.80082819046101150206595775671303272247314453125
      price: 6.027456183070403
      grossValue: 1.46581298050294517310021547018550336360931396484375
      trdMatchID: "trdMatchID"
      homeNotional: 5.962133916683182
      timestamp: "2000-01-23T04:56:07.000+00:00"
  TradeBin:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      open:
        type: "number"
        format: "double"
      high:
        type: "number"
        format: "double"
      low:
        type: "number"
        format: "double"
      close:
        type: "number"
        format: "double"
      trades:
        type: "number"
        format: "int64"
      volume:
        type: "number"
        format: "int64"
      vwap:
        type: "number"
        format: "double"
      lastSize:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
      foreignNotional:
        type: "number"
        format: "double"
    example:
      symbol: "symbol"
      vwap: 7.061401241503109
      trades: 5.63737665663332876420099637471139430999755859375
      homeNotional: 2.027123023002322
      volume: 2.3021358869347654518833223846741020679473876953125
      foreignNotional: 4.145608029883936
      high: 6.027456183070403
      low: 1.4658129805029452
      lastSize: 9.301444243932575517419536481611430644989013671875
      close: 5.962133916683182
      turnover: 3.61607674925191080461672754609026014804840087890625
      open: 0.8008281904610115
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Wallet:
    type: "object"
    required:
    - "account"
    - "currency"
    properties:
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      prevDeposited:
        type: "number"
        format: "int64"
      prevWithdrawn:
        type: "number"
        format: "int64"
      prevTransferIn:
        type: "number"
        format: "int64"
      prevTransferOut:
        type: "number"
        format: "int64"
      prevAmount:
        type: "number"
        format: "int64"
      prevTimestamp:
        type: "string"
        format: "date-time"
      deltaDeposited:
        type: "number"
        format: "int64"
      deltaWithdrawn:
        type: "number"
        format: "int64"
      deltaTransferIn:
        type: "number"
        format: "int64"
      deltaTransferOut:
        type: "number"
        format: "int64"
      deltaAmount:
        type: "number"
        format: "int64"
      deposited:
        type: "number"
        format: "int64"
      withdrawn:
        type: "number"
        format: "int64"
      transferIn:
        type: "number"
        format: "int64"
      transferOut:
        type: "number"
        format: "int64"
      amount:
        type: "number"
        format: "int64"
      pendingCredit:
        type: "number"
        format: "int64"
      pendingDebit:
        type: "number"
        format: "int64"
      confirmedDebit:
        type: "number"
        format: "int64"
      timestamp:
        type: "string"
        format: "date-time"
    example:
      transferOut: 1.489415909854170383397331534069962799549102783203125
      deltaAmount: 4.1456080298839363962315474054776132106781005859375
      amount: 6.8468526983526398765889098285697400569915771484375
      pendingDebit: 1.173074250955943309548956676735542714595794677734375
      confirmedDebit: 4.9652184929849543237878606305457651615142822265625
      deposited: 7.3862819483858839220147274318151175975799560546875
      withdrawn: 1.231513536777255612975068288506008684635162353515625
      deltaDeposited: 7.061401241503109105224211816675961017608642578125
      pendingCredit: 7.4577447736837658709418974467553198337554931640625
      prevWithdrawn: 1.46581298050294517310021547018550336360931396484375
      prevTransferOut: 5.63737665663332876420099637471139430999755859375
      deltaTransferOut: 2.027123023002321833274663731572218239307403564453125
      deltaWithdrawn: 9.301444243932575517419536481611430644989013671875
      deltaTransferIn: 3.61607674925191080461672754609026014804840087890625
      currency: "currency"
      transferIn: 1.024645700144157789424070870154537260532379150390625
      prevDeposited: 6.02745618307040320615897144307382404804229736328125
      prevAmount: 2.3021358869347654518833223846741020679473876953125
      prevTransferIn: 5.962133916683182377482808078639209270477294921875
      prevTimestamp: "2000-01-23T04:56:07.000+00:00"
      account: 0.80082819046101150206595775671303272247314453125
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Transaction:
    type: "object"
    required:
    - "transactID"
    properties:
      transactID:
        type: "string"
        format: "guid"
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      transactType:
        type: "string"
      amount:
        type: "number"
        format: "int64"
      fee:
        type: "number"
        format: "int64"
      transactStatus:
        type: "string"
      address:
        type: "string"
      tx:
        type: "string"
      text:
        type: "string"
      transactTime:
        type: "string"
        format: "date-time"
      timestamp:
        type: "string"
        format: "date-time"
    example:
      amount: 6.02745618307040320615897144307382404804229736328125
      address: "address"
      transactType: "transactType"
      tx: "tx"
      transactID: "transactID"
      fee: 1.46581298050294517310021547018550336360931396484375
      transactTime: "2000-01-23T04:56:07.000+00:00"
      currency: "currency"
      text: "text"
      account: 0.80082819046101150206595775671303272247314453125
      transactStatus: "transactStatus"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  AccessToken:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      ttl:
        type: "number"
        format: "double"
        description: "time to live in seconds (2 weeks by default)"
        default: 1209600.0
      created:
        type: "string"
        format: "date-time"
      userId:
        type: "number"
        format: "double"
    example:
      created: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      ttl: 0.8008281904610115
      userId: 6.027456183070403
  Affiliate:
    type: "object"
    properties:
      referrerAccount:
        type: "number"
        format: "double"
      referralDiscount:
        type: "number"
        format: "double"
      affiliatePayout:
        type: "number"
        format: "double"
      id:
        type: "number"
        format: "double"
    example:
      referrerAccount: 0.8008281904610115
      referralDiscount: 6.027456183070403
      id: 5.962133916683182
      affiliatePayout: 1.4658129805029452
  QuoteFillRatio:
    type: "object"
    required:
    - "date"
    properties:
      date:
        type: "string"
        format: "date-time"
      account:
        type: "number"
        format: "double"
      quoteCount:
        type: "number"
        format: "double"
      dealtCount:
        type: "number"
        format: "double"
      quotesMavg7:
        type: "number"
        format: "double"
      dealtMavg7:
        type: "number"
        format: "double"
      quoteFillRatioMavg7:
        type: "number"
        format: "double"
    description: "Daily Quote Fill Ratio Statistic"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      quoteCount: 6.027456183070403
      quoteFillRatioMavg7: 2.3021358869347655
      dealtMavg7: 5.637376656633329
      account: 0.8008281904610115
      dealtCount: 1.4658129805029452
      quotesMavg7: 5.962133916683182
  QuoteValueRatio:
    type: "object"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      account:
        type: "number"
        format: "double"
      symbol:
        type: "string"
      quoteCount:
        type: "number"
        format: "double"
      volumeXBT:
        type: "number"
        format: "double"
      QVR:
        type: "number"
        format: "double"
      id:
        type: "number"
        format: "double"
    description: "Hourly Quote Value Ratio Statistic"
    example:
      symbol: "symbol"
      volumeXBT: 1.4658129805029452
      quoteCount: 6.027456183070403
      id: 5.637376656633329
      QVR: 5.962133916683182
      account: 0.8008281904610115
      timestamp: "2000-01-23T04:56:07.000+00:00"
  TradingVolume:
    type: "object"
    required:
    - "advUsd"
    properties:
      advUsd:
        type: "number"
        format: "double"
    description: "30 days USD average trading volume"
    example:
      advUsd: 0.8008281904610115
  User:
    type: "object"
    required:
    - "username"
    properties:
      id:
        type: "number"
        format: "int32"
      ownerId:
        type: "number"
        format: "int32"
      firstname:
        type: "string"
      lastname:
        type: "string"
      username:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      lastUpdated:
        type: "string"
        format: "date-time"
      preferences:
        $ref: "#/definitions/UserPreferences"
      TFAEnabled:
        type: "string"
      affiliateID:
        type: "string"
        maxLength: 6
      pgpPubKey:
        type: "string"
        maxLength: 16384
      pgpPubKeyCreated:
        type: "string"
        format: "date-time"
      country:
        type: "string"
        maxLength: 3
      geoipCountry:
        type: "string"
        maxLength: 2
      geoipRegion:
        type: "string"
        maxLength: 2
      typ:
        type: "string"
    description: "Account Operations"
    example:
      geoipRegion: "geoipRegion"
      country: "country"
      firstname: "firstname"
      preferences:
        hideNotifications:
        - "hideNotifications"
        - "hideNotifications"
        tickerGroup: "tickerGroup"
        animationsEnabled: true
        disablePush:
        - "disablePush"
        - "disablePush"
        alertOnLiquidations: true
        locale: "en-US"
        hideConfirmDialogs:
        - "hideConfirmDialogs"
        - "hideConfirmDialogs"
        disableEmails:
        - "disableEmails"
        - "disableEmails"
        sounds:
        - "sounds"
        - "sounds"
        hidePhoneConfirm: false
        colorTheme: "colorTheme"
        currency: "currency"
        hideNameFromLeaderboard: true
        tradeLayout: "tradeLayout"
        strictTimeout: true
        orderBookBinning: "{}"
        debug: true
        strictIPCheck: false
        msgsSeen:
        - "msgsSeen"
        - "msgsSeen"
        orderControlsPlusMinus: true
        hideConnectionModal: true
        tickerPinned: true
        hideFromLeaderboard: false
        announcementsLastSeen: "2000-01-23T04:56:07.000+00:00"
        orderBookType: "orderBookType"
        orderClearImmediate: false
        showLocaleNumbers: true
        chatChannelID: 1.4658129805029452
      pgpPubKeyCreated: "2000-01-23T04:56:07.000+00:00"
      created: "2000-01-23T04:56:07.000+00:00"
      typ: "typ"
      ownerId: 6.02745618307040320615897144307382404804229736328125
      affiliateID: "affiliateID"
      lastname: "lastname"
      geoipCountry: "geoipCountry"
      lastUpdated: "2000-01-23T04:56:07.000+00:00"
      phone: "phone"
      TFAEnabled: "TFAEnabled"
      id: 0.80082819046101150206595775671303272247314453125
      email: "email"
      pgpPubKey: "pgpPubKey"
      username: "username"
  UserCommissionsBySymbol:
    type: "object"
  Margin:
    type: "object"
    required:
    - "account"
    - "currency"
    properties:
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      riskLimit:
        type: "number"
        format: "int64"
      prevState:
        type: "string"
      state:
        type: "string"
      action:
        type: "string"
      amount:
        type: "number"
        format: "int64"
      pendingCredit:
        type: "number"
        format: "int64"
      pendingDebit:
        type: "number"
        format: "int64"
      confirmedDebit:
        type: "number"
        format: "int64"
      prevRealisedPnl:
        type: "number"
        format: "int64"
      prevUnrealisedPnl:
        type: "number"
        format: "int64"
      grossComm:
        type: "number"
        format: "int64"
      grossOpenCost:
        type: "number"
        format: "int64"
      grossOpenPremium:
        type: "number"
        format: "int64"
      grossExecCost:
        type: "number"
        format: "int64"
      grossMarkValue:
        type: "number"
        format: "int64"
      riskValue:
        type: "number"
        format: "int64"
      taxableMargin:
        type: "number"
        format: "int64"
      initMargin:
        type: "number"
        format: "int64"
      maintMargin:
        type: "number"
        format: "int64"
      sessionMargin:
        type: "number"
        format: "int64"
      targetExcessMargin:
        type: "number"
        format: "int64"
      varMargin:
        type: "number"
        format: "int64"
      realisedPnl:
        type: "number"
        format: "int64"
      unrealisedPnl:
        type: "number"
        format: "int64"
      indicativeTax:
        type: "number"
        format: "int64"
      unrealisedProfit:
        type: "number"
        format: "int64"
      syntheticMargin:
        type: "number"
        format: "int64"
      walletBalance:
        type: "number"
        format: "int64"
      marginBalance:
        type: "number"
        format: "int64"
      marginBalancePcnt:
        type: "number"
        format: "double"
        default: 0.0
      marginLeverage:
        type: "number"
        format: "double"
        default: 0.0
      marginUsedPcnt:
        type: "number"
        format: "double"
        default: 0.0
      excessMargin:
        type: "number"
        format: "int64"
      excessMarginPcnt:
        type: "number"
        format: "double"
        default: 0.0
      availableMargin:
        type: "number"
        format: "int64"
      withdrawableMargin:
        type: "number"
        format: "int64"
      grossLastValue:
        type: "number"
        format: "int64"
      commission:
        type: "number"
        format: "double"
        default: 0.0
      makerFeeDiscount:
        type: "number"
        format: "double"
        default: 0.0
      takerFeeDiscount:
        type: "number"
        format: "double"
        default: 0.0
      timestamp:
        type: "string"
        format: "date-time"
    example:
      grossMarkValue: 1.231513536777255612975068288506008684635162353515625
      marginUsedPcnt: 2.8841621266687802
      marginLeverage: 1.284659006116532
      marginBalancePcnt: 6.965117697638846
      unrealisedPnl: 9.3693102714106686335071572102606296539306640625
      riskLimit: 6.02745618307040320615897144307382404804229736328125
      prevUnrealisedPnl: 9.301444243932575517419536481611430644989013671875
      walletBalance: 6.438423552598546706349225132726132869720458984375
      grossLastValue: 3.35319334701124294184637619764544069766998291015625
      action: "action"
      currency: "currency"
      commission: 3.0937452626664474
      state: "state"
      sessionMargin: 1.173074250955943309548956676735542714595794677734375
      marginBalance: 3.557195227068097320710649000830017030239105224609375
      timestamp: "2000-01-23T04:56:07.000+00:00"
      grossExecCost: 7.3862819483858839220147274318151175975799560546875
      targetExcessMargin: 4.9652184929849543237878606305457651615142822265625
      realisedPnl: 9.965781217890562260208753286860883235931396484375
      varMargin: 5.02500479152029466689555192715488374233245849609375
      indicativeTax: 6.683562403749608193948006373830139636993408203125
      amount: 1.46581298050294517310021547018550336360931396484375
      maintMargin: 7.4577447736837658709418974467553198337554931640625
      pendingDebit: 5.63737665663332876420099637471139430999755859375
      riskValue: 1.024645700144157789424070870154537260532379150390625
      confirmedDebit: 2.3021358869347654518833223846741020679473876953125
      grossComm: 3.61607674925191080461672754609026014804840087890625
      grossOpenPremium: 4.1456080298839363962315474054776132106781005859375
      makerFeeDiscount: 7.143538047012306
      excessMarginPcnt: 6.878052220127876
      withdrawableMargin: 6.70401929795003592715829654480330646038055419921875
      pendingCredit: 5.962133916683182377482808078639209270477294921875
      grossOpenCost: 2.027123023002321833274663731572218239307403564453125
      prevState: "prevState"
      prevRealisedPnl: 7.061401241503109105224211816675961017608642578125
      excessMargin: 6.77832496304801335185175048536621034145355224609375
      unrealisedProfit: 8.7620420127490010742121739895083010196685791015625
      initMargin: 6.8468526983526398765889098285697400569915771484375
      syntheticMargin: 9.0183481860707832566959041287191212177276611328125
      taxableMargin: 1.489415909854170383397331534069962799549102783203125
      takerFeeDiscount: 0.8851374739011653
      account: 0.80082819046101150206595775671303272247314453125
      availableMargin: 5.94489560761401580890606055618263781070709228515625
  CommunicationToken:
    type: "object"
    required:
    - "channel"
    - "deviceToken"
    - "id"
    - "userId"
    properties:
      id:
        type: "string"
      userId:
        type: "number"
        format: "int32"
      deviceToken:
        type: "string"
      channel:
        type: "string"
    description: "User communication SNS token"
    example:
      channel: "channel"
      id: "id"
      userId: 0.80082819046101150206595775671303272247314453125
      deviceToken: "deviceToken"
  UserEvent:
    type: "object"
    required:
    - "created"
    - "createdById"
    - "status"
    - "type"
    - "userId"
    properties:
      id:
        type: "number"
        format: "double"
      type:
        type: "string"
        enum:
        - "apiKeyCreated"
        - "deleverageExecution"
        - "depositConfirmed"
        - "depositPending"
        - "banZeroVolumeApiUser"
        - "liquidationOrderPlaced"
        - "login"
        - "pgpMaskedEmail"
        - "pgpTestEmail"
        - "passwordChanged"
        - "positionStateLiquidated"
        - "positionStateWarning"
        - "resetPasswordConfirmed"
        - "resetPasswordRequest"
        - "transferCanceled"
        - "transferCompleted"
        - "transferReceived"
        - "transferRequested"
        - "twoFactorDisabled"
        - "twoFactorEnabled"
        - "withdrawalCanceled"
        - "withdrawalCompleted"
        - "withdrawalConfirmed"
        - "withdrawalRequested"
        - "addressSkipConfirmRequested"
        - "addressSkipConfirmVerified"
        - "verify"
      status:
        type: "string"
        enum:
        - "success"
        - "failure"
      userId:
        type: "number"
        format: "double"
      createdById:
        type: "number"
        format: "double"
      ip:
        type: "string"
      geoipCountry:
        type: "string"
        maxLength: 2
      geoipRegion:
        type: "string"
        maxLength: 3
      geoipSubRegion:
        type: "string"
        maxLength: 3
      eventMeta:
        type: "object"
        properties: {}
      created:
        type: "string"
        format: "date-time"
    description: "User Events for Auditing"
    example:
      geoipRegion: "geoipRegion"
      geoipSubRegion: "geoipSubRegion"
      eventMeta: "{}"
      created: "2000-01-23T04:56:07.000+00:00"
      ip: "ip"
      id: 0.8008281904610115
      type: "apiKeyCreated"
      userId: 6.027456183070403
      createdById: 1.4658129805029452
      status: "success"
      geoipCountry: "geoipCountry"
  UserPreferences:
    type: "object"
    properties:
      alertOnLiquidations:
        type: "boolean"
      animationsEnabled:
        type: "boolean"
      announcementsLastSeen:
        type: "string"
        format: "date-time"
      chatChannelID:
        type: "number"
        format: "double"
      colorTheme:
        type: "string"
      currency:
        type: "string"
      debug:
        type: "boolean"
      disableEmails:
        type: "array"
        items:
          type: "string"
      disablePush:
        type: "array"
        items:
          type: "string"
      hideConfirmDialogs:
        type: "array"
        items:
          type: "string"
      hideConnectionModal:
        type: "boolean"
      hideFromLeaderboard:
        type: "boolean"
        default: false
      hideNameFromLeaderboard:
        type: "boolean"
        default: true
      hideNotifications:
        type: "array"
        items:
          type: "string"
      hidePhoneConfirm:
        type: "boolean"
        default: false
      locale:
        type: "string"
        default: "en-US"
      msgsSeen:
        type: "array"
        items:
          type: "string"
      orderBookBinning:
        type: "object"
        properties: {}
      orderBookType:
        type: "string"
      orderClearImmediate:
        type: "boolean"
        default: false
      orderControlsPlusMinus:
        type: "boolean"
      showLocaleNumbers:
        type: "boolean"
        default: true
      sounds:
        type: "array"
        items:
          type: "string"
      strictIPCheck:
        type: "boolean"
        default: false
      strictTimeout:
        type: "boolean"
        default: true
      tickerGroup:
        type: "string"
      tickerPinned:
        type: "boolean"
      tradeLayout:
        type: "string"
    example:
      hideNotifications:
      - "hideNotifications"
      - "hideNotifications"
      tickerGroup: "tickerGroup"
      animationsEnabled: true
      disablePush:
      - "disablePush"
      - "disablePush"
      alertOnLiquidations: true
      locale: "en-US"
      hideConfirmDialogs:
      - "hideConfirmDialogs"
      - "hideConfirmDialogs"
      disableEmails:
      - "disableEmails"
      - "disableEmails"
      sounds:
      - "sounds"
      - "sounds"
      hidePhoneConfirm: false
      colorTheme: "colorTheme"
      currency: "currency"
      hideNameFromLeaderboard: true
      tradeLayout: "tradeLayout"
      strictTimeout: true
      orderBookBinning: "{}"
      debug: true
      strictIPCheck: false
      msgsSeen:
      - "msgsSeen"
      - "msgsSeen"
      orderControlsPlusMinus: true
      hideConnectionModal: true
      tickerPinned: true
      hideFromLeaderboard: false
      announcementsLastSeen: "2000-01-23T04:56:07.000+00:00"
      orderBookType: "orderBookType"
      orderClearImmediate: false
      showLocaleNumbers: true
      chatChannelID: 1.4658129805029452
  inline_response_200:
    type: "object"
    properties:
      name:
        type: "string"
    example:
      name: "name"
  Error_error:
    type: "object"
    properties:
      message:
        type: "string"
      name:
        type: "string"
