/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.APIKey;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse200;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiKeyApi
 */
@Ignore
public class ApiKeyApiTest {

    private final ApiKeyApi api = new ApiKeyApi();

    
    /**
     * Disable an API Key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aPIKeyDisableTest() throws ApiException {
        String apiKeyID = null;
        APIKey response = api.aPIKeyDisable(apiKeyID);

        // TODO: test validations
    }
    
    /**
     * Enable an API Key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aPIKeyEnableTest() throws ApiException {
        String apiKeyID = null;
        APIKey response = api.aPIKeyEnable(apiKeyID);

        // TODO: test validations
    }
    
    /**
     * Get your API Keys.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aPIKeyGetTest() throws ApiException {
        Boolean reverse = null;
        List<APIKey> response = api.aPIKeyGet(reverse);

        // TODO: test validations
    }
    
    /**
     * Create a new API Key.
     *
     * API Keys can only be created via the frontend.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aPIKeyNewTest() throws ApiException {
        String name = null;
        String cidr = null;
        String permissions = null;
        Boolean enabled = null;
        String token = null;
        APIKey response = api.aPIKeyNew(name, cidr, permissions, enabled, token);

        // TODO: test validations
    }
    
    /**
     * Remove an API Key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aPIKeyRemoveTest() throws ApiException {
        String apiKeyID = null;
        InlineResponse200 response = api.aPIKeyRemove(apiKeyID);

        // TODO: test validations
    }
    
}
