/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/APIKey', 'model/AccessToken', 'model/Affiliate', 'model/Announcement', 'model/Chat', 'model/ChatChannel', 'model/ConnectedUsers', 'model/Error', 'model/ErrorError', 'model/Execution', 'model/Funding', 'model/IndexComposite', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/Instrument', 'model/InstrumentInterval', 'model/Insurance', 'model/Leaderboard', 'model/Liquidation', 'model/Margin', 'model/Notification', 'model/Order', 'model/OrderBookL2', 'model/Position', 'model/Quote', 'model/Settlement', 'model/Stats', 'model/StatsHistory', 'model/StatsUSD', 'model/Trade', 'model/TradeBin', 'model/Transaction', 'model/User', 'model/UserCommission', 'model/UserPreferences', 'model/Wallet', 'model/XAny', 'api/APIKeyApi', 'api/AnnouncementApi', 'api/ChatApi', 'api/ExecutionApi', 'api/FundingApi', 'api/InstrumentApi', 'api/InsuranceApi', 'api/LeaderboardApi', 'api/LiquidationApi', 'api/NotificationApi', 'api/OrderApi', 'api/OrderBookApi', 'api/PositionApi', 'api/QuoteApi', 'api/SchemaApi', 'api/SettlementApi', 'api/StatsApi', 'api/TradeApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/APIKey'), require('./model/AccessToken'), require('./model/Affiliate'), require('./model/Announcement'), require('./model/Chat'), require('./model/ChatChannel'), require('./model/ConnectedUsers'), require('./model/Error'), require('./model/ErrorError'), require('./model/Execution'), require('./model/Funding'), require('./model/IndexComposite'), require('./model/InlineResponse200'), require('./model/InlineResponse2001'), require('./model/Instrument'), require('./model/InstrumentInterval'), require('./model/Insurance'), require('./model/Leaderboard'), require('./model/Liquidation'), require('./model/Margin'), require('./model/Notification'), require('./model/Order'), require('./model/OrderBookL2'), require('./model/Position'), require('./model/Quote'), require('./model/Settlement'), require('./model/Stats'), require('./model/StatsHistory'), require('./model/StatsUSD'), require('./model/Trade'), require('./model/TradeBin'), require('./model/Transaction'), require('./model/User'), require('./model/UserCommission'), require('./model/UserPreferences'), require('./model/Wallet'), require('./model/XAny'), require('./api/APIKeyApi'), require('./api/AnnouncementApi'), require('./api/ChatApi'), require('./api/ExecutionApi'), require('./api/FundingApi'), require('./api/InstrumentApi'), require('./api/InsuranceApi'), require('./api/LeaderboardApi'), require('./api/LiquidationApi'), require('./api/NotificationApi'), require('./api/OrderApi'), require('./api/OrderBookApi'), require('./api/PositionApi'), require('./api/QuoteApi'), require('./api/SchemaApi'), require('./api/SettlementApi'), require('./api/StatsApi'), require('./api/TradeApi'), require('./api/UserApi'));
  }
}(function(ApiClient, APIKey, AccessToken, Affiliate, Announcement, Chat, ChatChannel, ConnectedUsers, Error, ErrorError, Execution, Funding, IndexComposite, InlineResponse200, InlineResponse2001, Instrument, InstrumentInterval, Insurance, Leaderboard, Liquidation, Margin, Notification, Order, OrderBookL2, Position, Quote, Settlement, Stats, StatsHistory, StatsUSD, Trade, TradeBin, Transaction, User, UserCommission, UserPreferences, Wallet, XAny, APIKeyApi, AnnouncementApi, ChatApi, ExecutionApi, FundingApi, InstrumentApi, InsuranceApi, LeaderboardApi, LiquidationApi, NotificationApi, OrderApi, OrderBookApi, PositionApi, QuoteApi, SchemaApi, SettlementApi, StatsApi, TradeApi, UserApi) {
  'use strict';

  /**
   * _REST_API_for_the_BitMEX_Trading_Platform_View_Changelog_appapiChangelog_Getting_StartedBase_URI__httpswww_bitmex_comapiv1_apiv1_Fetching_DataAll_REST_endpoints_are_documented_below__You_can_try_out_any_query_right_from_this_interface_Most_table_queries_accept_count_start_and_reverse_params__Set_reversetrue_to_get_rows_newest_first_Additional_documentation_regarding_filters_timestamps_and_authenticationis_available_in__the_main_API_documentation_apprestAPI_All_table_data_is_available_via_the__Websocket_appwsAPI__We_highly_recommend_using_the_socket_if_you_wantto_have_the_quickest_possible_data_without_being_subject_to_ratelimits__Return_TypesBy_default_all_data_is_returned_as_JSON__Send__formatcsv_to_get_CSV_data_or__formatxml_to_get_XML_data__Trade_Data_QueriesThis_is_only_a_small_subset_of_what_is_available_to_get_you_started_Fill_in_the_parameters_and_click_the_Try_it_out_button_to_try_any_of_these_queries___Pricing_Data_QuoteQuote_get__Trade_Data_TradeTrade_get__OrderBook_Data_OrderBookOrderBook_getL2__Settlement_Data_SettlementSettlement_get__Exchange_Statistics_StatsStats_historyEvery_function_of_the_BitMEX_com_platform_is_exposed_here_and_documented__Many_more_functions_are_available__Swagger_Specification__Download_Swagger_JSON_swagger_json_All_API_EndpointsClick_to_expand_a_section_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var BitMexApi = require('index'); // See note below*.
   * var xxxSvc = new BitMexApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new BitMexApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new BitMexApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new BitMexApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.2.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The APIKey model constructor.
     * @property {module:model/APIKey}
     */
    APIKey: APIKey,
    /**
     * The AccessToken model constructor.
     * @property {module:model/AccessToken}
     */
    AccessToken: AccessToken,
    /**
     * The Affiliate model constructor.
     * @property {module:model/Affiliate}
     */
    Affiliate: Affiliate,
    /**
     * The Announcement model constructor.
     * @property {module:model/Announcement}
     */
    Announcement: Announcement,
    /**
     * The Chat model constructor.
     * @property {module:model/Chat}
     */
    Chat: Chat,
    /**
     * The ChatChannel model constructor.
     * @property {module:model/ChatChannel}
     */
    ChatChannel: ChatChannel,
    /**
     * The ConnectedUsers model constructor.
     * @property {module:model/ConnectedUsers}
     */
    ConnectedUsers: ConnectedUsers,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorError model constructor.
     * @property {module:model/ErrorError}
     */
    ErrorError: ErrorError,
    /**
     * The Execution model constructor.
     * @property {module:model/Execution}
     */
    Execution: Execution,
    /**
     * The Funding model constructor.
     * @property {module:model/Funding}
     */
    Funding: Funding,
    /**
     * The IndexComposite model constructor.
     * @property {module:model/IndexComposite}
     */
    IndexComposite: IndexComposite,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001: InlineResponse2001,
    /**
     * The Instrument model constructor.
     * @property {module:model/Instrument}
     */
    Instrument: Instrument,
    /**
     * The InstrumentInterval model constructor.
     * @property {module:model/InstrumentInterval}
     */
    InstrumentInterval: InstrumentInterval,
    /**
     * The Insurance model constructor.
     * @property {module:model/Insurance}
     */
    Insurance: Insurance,
    /**
     * The Leaderboard model constructor.
     * @property {module:model/Leaderboard}
     */
    Leaderboard: Leaderboard,
    /**
     * The Liquidation model constructor.
     * @property {module:model/Liquidation}
     */
    Liquidation: Liquidation,
    /**
     * The Margin model constructor.
     * @property {module:model/Margin}
     */
    Margin: Margin,
    /**
     * The Notification model constructor.
     * @property {module:model/Notification}
     */
    Notification: Notification,
    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order: Order,
    /**
     * The OrderBookL2 model constructor.
     * @property {module:model/OrderBookL2}
     */
    OrderBookL2: OrderBookL2,
    /**
     * The Position model constructor.
     * @property {module:model/Position}
     */
    Position: Position,
    /**
     * The Quote model constructor.
     * @property {module:model/Quote}
     */
    Quote: Quote,
    /**
     * The Settlement model constructor.
     * @property {module:model/Settlement}
     */
    Settlement: Settlement,
    /**
     * The Stats model constructor.
     * @property {module:model/Stats}
     */
    Stats: Stats,
    /**
     * The StatsHistory model constructor.
     * @property {module:model/StatsHistory}
     */
    StatsHistory: StatsHistory,
    /**
     * The StatsUSD model constructor.
     * @property {module:model/StatsUSD}
     */
    StatsUSD: StatsUSD,
    /**
     * The Trade model constructor.
     * @property {module:model/Trade}
     */
    Trade: Trade,
    /**
     * The TradeBin model constructor.
     * @property {module:model/TradeBin}
     */
    TradeBin: TradeBin,
    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction: Transaction,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserCommission model constructor.
     * @property {module:model/UserCommission}
     */
    UserCommission: UserCommission,
    /**
     * The UserPreferences model constructor.
     * @property {module:model/UserPreferences}
     */
    UserPreferences: UserPreferences,
    /**
     * The Wallet model constructor.
     * @property {module:model/Wallet}
     */
    Wallet: Wallet,
    /**
     * The XAny model constructor.
     * @property {module:model/XAny}
     */
    XAny: XAny,
    /**
     * The APIKeyApi service constructor.
     * @property {module:api/APIKeyApi}
     */
    APIKeyApi: APIKeyApi,
    /**
     * The AnnouncementApi service constructor.
     * @property {module:api/AnnouncementApi}
     */
    AnnouncementApi: AnnouncementApi,
    /**
     * The ChatApi service constructor.
     * @property {module:api/ChatApi}
     */
    ChatApi: ChatApi,
    /**
     * The ExecutionApi service constructor.
     * @property {module:api/ExecutionApi}
     */
    ExecutionApi: ExecutionApi,
    /**
     * The FundingApi service constructor.
     * @property {module:api/FundingApi}
     */
    FundingApi: FundingApi,
    /**
     * The InstrumentApi service constructor.
     * @property {module:api/InstrumentApi}
     */
    InstrumentApi: InstrumentApi,
    /**
     * The InsuranceApi service constructor.
     * @property {module:api/InsuranceApi}
     */
    InsuranceApi: InsuranceApi,
    /**
     * The LeaderboardApi service constructor.
     * @property {module:api/LeaderboardApi}
     */
    LeaderboardApi: LeaderboardApi,
    /**
     * The LiquidationApi service constructor.
     * @property {module:api/LiquidationApi}
     */
    LiquidationApi: LiquidationApi,
    /**
     * The NotificationApi service constructor.
     * @property {module:api/NotificationApi}
     */
    NotificationApi: NotificationApi,
    /**
     * The OrderApi service constructor.
     * @property {module:api/OrderApi}
     */
    OrderApi: OrderApi,
    /**
     * The OrderBookApi service constructor.
     * @property {module:api/OrderBookApi}
     */
    OrderBookApi: OrderBookApi,
    /**
     * The PositionApi service constructor.
     * @property {module:api/PositionApi}
     */
    PositionApi: PositionApi,
    /**
     * The QuoteApi service constructor.
     * @property {module:api/QuoteApi}
     */
    QuoteApi: QuoteApi,
    /**
     * The SchemaApi service constructor.
     * @property {module:api/SchemaApi}
     */
    SchemaApi: SchemaApi,
    /**
     * The SettlementApi service constructor.
     * @property {module:api/SettlementApi}
     */
    SettlementApi: SettlementApi,
    /**
     * The StatsApi service constructor.
     * @property {module:api/StatsApi}
     */
    StatsApi: StatsApi,
    /**
     * The TradeApi service constructor.
     * @property {module:api/TradeApi}
     */
    TradeApi: TradeApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
