/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BitMexApi) {
      root.BitMexApi = {};
    }
    root.BitMexApi.UserEvent = factory(root.BitMexApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The UserEvent model module.
   * @module model/UserEvent
   * @version 1.2.0
   */

  /**
   * Constructs a new <code>UserEvent</code>.
   * User Events for Auditing
   * @alias module:model/UserEvent
   * @class
   * @param type {module:model/UserEvent.TypeEnum} 
   * @param status {module:model/UserEvent.StatusEnum} 
   * @param userId {Number} 
   * @param createdById {Number} 
   * @param created {Date} 
   */
  var exports = function(type, status, userId, createdById, created) {
    this.type = type;
    this.status = status;
    this.userId = userId;
    this.createdById = createdById;
    this.created = created;
  };

  /**
   * Constructs a <code>UserEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserEvent} obj Optional instance to populate.
   * @return {module:model/UserEvent} The populated <code>UserEvent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'Number');
      if (data.hasOwnProperty('createdById'))
        obj.createdById = ApiClient.convertToType(data['createdById'], 'Number');
      if (data.hasOwnProperty('ip'))
        obj.ip = ApiClient.convertToType(data['ip'], 'String');
      if (data.hasOwnProperty('geoipCountry'))
        obj.geoipCountry = ApiClient.convertToType(data['geoipCountry'], 'String');
      if (data.hasOwnProperty('geoipRegion'))
        obj.geoipRegion = ApiClient.convertToType(data['geoipRegion'], 'String');
      if (data.hasOwnProperty('geoipSubRegion'))
        obj.geoipSubRegion = ApiClient.convertToType(data['geoipSubRegion'], 'String');
      if (data.hasOwnProperty('eventMeta'))
        obj.eventMeta = ApiClient.convertToType(data['eventMeta'], Object);
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'Date');
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {module:model/UserEvent.TypeEnum} type
   */
  exports.prototype.type = undefined;

  /**
   * @member {module:model/UserEvent.StatusEnum} status
   */
  exports.prototype.status = undefined;

  /**
   * @member {Number} userId
   */
  exports.prototype.userId = undefined;

  /**
   * @member {Number} createdById
   */
  exports.prototype.createdById = undefined;

  /**
   * @member {String} ip
   */
  exports.prototype.ip = undefined;

  /**
   * @member {String} geoipCountry
   */
  exports.prototype.geoipCountry = undefined;

  /**
   * @member {String} geoipRegion
   */
  exports.prototype.geoipRegion = undefined;

  /**
   * @member {String} geoipSubRegion
   */
  exports.prototype.geoipSubRegion = undefined;

  /**
   * @member {Object} eventMeta
   */
  exports.prototype.eventMeta = undefined;

  /**
   * @member {Date} created
   */
  exports.prototype.created = undefined;



  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "apiKeyCreated"
     * @const
     */
    apiKeyCreated: "apiKeyCreated",

    /**
     * value: "deleverageExecution"
     * @const
     */
    deleverageExecution: "deleverageExecution",

    /**
     * value: "depositConfirmed"
     * @const
     */
    depositConfirmed: "depositConfirmed",

    /**
     * value: "depositPending"
     * @const
     */
    depositPending: "depositPending",

    /**
     * value: "banZeroVolumeApiUser"
     * @const
     */
    banZeroVolumeApiUser: "banZeroVolumeApiUser",

    /**
     * value: "liquidationOrderPlaced"
     * @const
     */
    liquidationOrderPlaced: "liquidationOrderPlaced",

    /**
     * value: "login"
     * @const
     */
    login: "login",

    /**
     * value: "pgpMaskedEmail"
     * @const
     */
    pgpMaskedEmail: "pgpMaskedEmail",

    /**
     * value: "pgpTestEmail"
     * @const
     */
    pgpTestEmail: "pgpTestEmail",

    /**
     * value: "passwordChanged"
     * @const
     */
    passwordChanged: "passwordChanged",

    /**
     * value: "positionStateLiquidated"
     * @const
     */
    positionStateLiquidated: "positionStateLiquidated",

    /**
     * value: "positionStateWarning"
     * @const
     */
    positionStateWarning: "positionStateWarning",

    /**
     * value: "resetPasswordConfirmed"
     * @const
     */
    resetPasswordConfirmed: "resetPasswordConfirmed",

    /**
     * value: "resetPasswordRequest"
     * @const
     */
    resetPasswordRequest: "resetPasswordRequest",

    /**
     * value: "transferCanceled"
     * @const
     */
    transferCanceled: "transferCanceled",

    /**
     * value: "transferCompleted"
     * @const
     */
    transferCompleted: "transferCompleted",

    /**
     * value: "transferReceived"
     * @const
     */
    transferReceived: "transferReceived",

    /**
     * value: "transferRequested"
     * @const
     */
    transferRequested: "transferRequested",

    /**
     * value: "twoFactorDisabled"
     * @const
     */
    twoFactorDisabled: "twoFactorDisabled",

    /**
     * value: "twoFactorEnabled"
     * @const
     */
    twoFactorEnabled: "twoFactorEnabled",

    /**
     * value: "withdrawalCanceled"
     * @const
     */
    withdrawalCanceled: "withdrawalCanceled",

    /**
     * value: "withdrawalCompleted"
     * @const
     */
    withdrawalCompleted: "withdrawalCompleted",

    /**
     * value: "withdrawalConfirmed"
     * @const
     */
    withdrawalConfirmed: "withdrawalConfirmed",

    /**
     * value: "withdrawalRequested"
     * @const
     */
    withdrawalRequested: "withdrawalRequested",

    /**
     * value: "addressSkipConfirmRequested"
     * @const
     */
    addressSkipConfirmRequested: "addressSkipConfirmRequested",

    /**
     * value: "addressSkipConfirmVerified"
     * @const
     */
    addressSkipConfirmVerified: "addressSkipConfirmVerified",

    /**
     * value: "verify"
     * @const
     */
    verify: "verify"
  };


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "success"
     * @const
     */
    success: "success",

    /**
     * value: "failure"
     * @const
     */
    failure: "failure"
  };

  return exports;

}));
