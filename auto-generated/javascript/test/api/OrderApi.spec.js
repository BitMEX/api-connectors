/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.OrderApi();
  });

  describe('(package)', function() {
    describe('OrderApi', function() {
      describe('orderAmend', function() {
        it('should call orderAmend successfully', function(done) {
          // TODO: uncomment, update parameter values for orderAmend call and complete the assertions
          /*
          var opts = {};
          opts.orderID = "orderID_example";
          opts.origClOrdID = "origClOrdID_example";
          opts.clOrdID = "clOrdID_example";
          opts.simpleOrderQty = 1.2;
          opts.orderQty = 8.14;
          opts.simpleLeavesQty = 1.2;
          opts.leavesQty = 8.14;
          opts.price = 1.2;
          opts.stopPx = 1.2;
          opts.pegOffsetValue = 1.2;
          opts.text = "text_example";

          instance.orderAmend(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Order);
            expect(data.orderID).to.be.a('string');
            expect(data.orderID).to.be("");
            expect(data.clOrdID).to.be.a('string');
            expect(data.clOrdID).to.be("");
            expect(data.clOrdLinkID).to.be.a('string');
            expect(data.clOrdLinkID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.side).to.be.a('string');
            expect(data.side).to.be("");
            expect(data.simpleOrderQty).to.be.a('number');
            expect(data.simpleOrderQty).to.be(0.0);
            expect(data.orderQty).to.be.a('number');
            expect(data.orderQty).to.be();
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(0.0);
            expect(data.displayQty).to.be.a('number');
            expect(data.displayQty).to.be();
            expect(data.stopPx).to.be.a('number');
            expect(data.stopPx).to.be(0.0);
            expect(data.pegOffsetValue).to.be.a('number');
            expect(data.pegOffsetValue).to.be(0.0);
            expect(data.pegPriceType).to.be.a('string');
            expect(data.pegPriceType).to.be("");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.settlCurrency).to.be.a('string');
            expect(data.settlCurrency).to.be("");
            expect(data.ordType).to.be.a('string');
            expect(data.ordType).to.be("");
            expect(data.timeInForce).to.be.a('string');
            expect(data.timeInForce).to.be("");
            expect(data.execInst).to.be.a('string');
            expect(data.execInst).to.be("");
            expect(data.contingencyType).to.be.a('string');
            expect(data.contingencyType).to.be("");
            expect(data.exDestination).to.be.a('string');
            expect(data.exDestination).to.be("");
            expect(data.ordStatus).to.be.a('string');
            expect(data.ordStatus).to.be("");
            expect(data.triggered).to.be.a('string');
            expect(data.triggered).to.be("");
            expect(data.workingIndicator).to.be.a('boolean');
            expect(data.workingIndicator).to.be(false);
            expect(data.ordRejReason).to.be.a('string');
            expect(data.ordRejReason).to.be("");
            expect(data.simpleLeavesQty).to.be.a('number');
            expect(data.simpleLeavesQty).to.be(0.0);
            expect(data.leavesQty).to.be.a('number');
            expect(data.leavesQty).to.be();
            expect(data.simpleCumQty).to.be.a('number');
            expect(data.simpleCumQty).to.be(0.0);
            expect(data.cumQty).to.be.a('number');
            expect(data.cumQty).to.be();
            expect(data.avgPx).to.be.a('number');
            expect(data.avgPx).to.be(0.0);
            expect(data.multiLegReportingType).to.be.a('string');
            expect(data.multiLegReportingType).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.transactTime).to.be.a(Date);
            expect(data.transactTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orderCancel', function() {
        it('should call orderCancel successfully', function(done) {
          // TODO: uncomment, update parameter values for orderCancel call and complete the assertions
          /*
          var opts = {};
          opts.orderID = "orderID_example";
          opts.clOrdID = "clOrdID_example";
          opts.text = "text_example";

          instance.orderCancel(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.Order);
              expect(data.orderID).to.be.a('string');
              expect(data.orderID).to.be("");
              expect(data.clOrdID).to.be.a('string');
              expect(data.clOrdID).to.be("");
              expect(data.clOrdLinkID).to.be.a('string');
              expect(data.clOrdLinkID).to.be("");
              expect(data.account).to.be.a('number');
              expect(data.account).to.be();
              expect(data.symbol).to.be.a('string');
              expect(data.symbol).to.be("");
              expect(data.side).to.be.a('string');
              expect(data.side).to.be("");
              expect(data.simpleOrderQty).to.be.a('number');
              expect(data.simpleOrderQty).to.be(0.0);
              expect(data.orderQty).to.be.a('number');
              expect(data.orderQty).to.be();
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.displayQty).to.be.a('number');
              expect(data.displayQty).to.be();
              expect(data.stopPx).to.be.a('number');
              expect(data.stopPx).to.be(0.0);
              expect(data.pegOffsetValue).to.be.a('number');
              expect(data.pegOffsetValue).to.be(0.0);
              expect(data.pegPriceType).to.be.a('string');
              expect(data.pegPriceType).to.be("");
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.settlCurrency).to.be.a('string');
              expect(data.settlCurrency).to.be("");
              expect(data.ordType).to.be.a('string');
              expect(data.ordType).to.be("");
              expect(data.timeInForce).to.be.a('string');
              expect(data.timeInForce).to.be("");
              expect(data.execInst).to.be.a('string');
              expect(data.execInst).to.be("");
              expect(data.contingencyType).to.be.a('string');
              expect(data.contingencyType).to.be("");
              expect(data.exDestination).to.be.a('string');
              expect(data.exDestination).to.be("");
              expect(data.ordStatus).to.be.a('string');
              expect(data.ordStatus).to.be("");
              expect(data.triggered).to.be.a('string');
              expect(data.triggered).to.be("");
              expect(data.workingIndicator).to.be.a('boolean');
              expect(data.workingIndicator).to.be(false);
              expect(data.ordRejReason).to.be.a('string');
              expect(data.ordRejReason).to.be("");
              expect(data.simpleLeavesQty).to.be.a('number');
              expect(data.simpleLeavesQty).to.be(0.0);
              expect(data.leavesQty).to.be.a('number');
              expect(data.leavesQty).to.be();
              expect(data.simpleCumQty).to.be.a('number');
              expect(data.simpleCumQty).to.be(0.0);
              expect(data.cumQty).to.be.a('number');
              expect(data.cumQty).to.be();
              expect(data.avgPx).to.be.a('number');
              expect(data.avgPx).to.be(0.0);
              expect(data.multiLegReportingType).to.be.a('string');
              expect(data.multiLegReportingType).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.transactTime).to.be.a(Date);
              expect(data.transactTime).to.be(new Date());
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orderCancelAll', function() {
        it('should call orderCancelAll successfully', function(done) {
          // TODO: uncomment, update parameter values for orderCancelAll call and complete the assertions
          /*
          var opts = {};
          opts.symbol = "symbol_example";
          opts.filter = "filter_example";
          opts.text = "text_example";

          instance.orderCancelAll(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.Order);
              expect(data.orderID).to.be.a('string');
              expect(data.orderID).to.be("");
              expect(data.clOrdID).to.be.a('string');
              expect(data.clOrdID).to.be("");
              expect(data.clOrdLinkID).to.be.a('string');
              expect(data.clOrdLinkID).to.be("");
              expect(data.account).to.be.a('number');
              expect(data.account).to.be();
              expect(data.symbol).to.be.a('string');
              expect(data.symbol).to.be("");
              expect(data.side).to.be.a('string');
              expect(data.side).to.be("");
              expect(data.simpleOrderQty).to.be.a('number');
              expect(data.simpleOrderQty).to.be(0.0);
              expect(data.orderQty).to.be.a('number');
              expect(data.orderQty).to.be();
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.displayQty).to.be.a('number');
              expect(data.displayQty).to.be();
              expect(data.stopPx).to.be.a('number');
              expect(data.stopPx).to.be(0.0);
              expect(data.pegOffsetValue).to.be.a('number');
              expect(data.pegOffsetValue).to.be(0.0);
              expect(data.pegPriceType).to.be.a('string');
              expect(data.pegPriceType).to.be("");
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.settlCurrency).to.be.a('string');
              expect(data.settlCurrency).to.be("");
              expect(data.ordType).to.be.a('string');
              expect(data.ordType).to.be("");
              expect(data.timeInForce).to.be.a('string');
              expect(data.timeInForce).to.be("");
              expect(data.execInst).to.be.a('string');
              expect(data.execInst).to.be("");
              expect(data.contingencyType).to.be.a('string');
              expect(data.contingencyType).to.be("");
              expect(data.exDestination).to.be.a('string');
              expect(data.exDestination).to.be("");
              expect(data.ordStatus).to.be.a('string');
              expect(data.ordStatus).to.be("");
              expect(data.triggered).to.be.a('string');
              expect(data.triggered).to.be("");
              expect(data.workingIndicator).to.be.a('boolean');
              expect(data.workingIndicator).to.be(false);
              expect(data.ordRejReason).to.be.a('string');
              expect(data.ordRejReason).to.be("");
              expect(data.simpleLeavesQty).to.be.a('number');
              expect(data.simpleLeavesQty).to.be(0.0);
              expect(data.leavesQty).to.be.a('number');
              expect(data.leavesQty).to.be();
              expect(data.simpleCumQty).to.be.a('number');
              expect(data.simpleCumQty).to.be(0.0);
              expect(data.cumQty).to.be.a('number');
              expect(data.cumQty).to.be();
              expect(data.avgPx).to.be.a('number');
              expect(data.avgPx).to.be(0.0);
              expect(data.multiLegReportingType).to.be.a('string');
              expect(data.multiLegReportingType).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.transactTime).to.be.a(Date);
              expect(data.transactTime).to.be(new Date());
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orderCancelAllAfter', function() {
        it('should call orderCancelAllAfter successfully', function(done) {
          // TODO: uncomment, update parameter values for orderCancelAllAfter call and complete the assertions
          /*
          var timeout = 1.2;

          instance.orderCancelAllAfter(timeout, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orderClosePosition', function() {
        it('should call orderClosePosition successfully', function(done) {
          // TODO: uncomment, update parameter values for orderClosePosition call and complete the assertions
          /*
          var symbol = "symbol_example";
          var opts = {};
          opts.price = 1.2;

          instance.orderClosePosition(symbol, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Order);
            expect(data.orderID).to.be.a('string');
            expect(data.orderID).to.be("");
            expect(data.clOrdID).to.be.a('string');
            expect(data.clOrdID).to.be("");
            expect(data.clOrdLinkID).to.be.a('string');
            expect(data.clOrdLinkID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.side).to.be.a('string');
            expect(data.side).to.be("");
            expect(data.simpleOrderQty).to.be.a('number');
            expect(data.simpleOrderQty).to.be(0.0);
            expect(data.orderQty).to.be.a('number');
            expect(data.orderQty).to.be();
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(0.0);
            expect(data.displayQty).to.be.a('number');
            expect(data.displayQty).to.be();
            expect(data.stopPx).to.be.a('number');
            expect(data.stopPx).to.be(0.0);
            expect(data.pegOffsetValue).to.be.a('number');
            expect(data.pegOffsetValue).to.be(0.0);
            expect(data.pegPriceType).to.be.a('string');
            expect(data.pegPriceType).to.be("");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.settlCurrency).to.be.a('string');
            expect(data.settlCurrency).to.be("");
            expect(data.ordType).to.be.a('string');
            expect(data.ordType).to.be("");
            expect(data.timeInForce).to.be.a('string');
            expect(data.timeInForce).to.be("");
            expect(data.execInst).to.be.a('string');
            expect(data.execInst).to.be("");
            expect(data.contingencyType).to.be.a('string');
            expect(data.contingencyType).to.be("");
            expect(data.exDestination).to.be.a('string');
            expect(data.exDestination).to.be("");
            expect(data.ordStatus).to.be.a('string');
            expect(data.ordStatus).to.be("");
            expect(data.triggered).to.be.a('string');
            expect(data.triggered).to.be("");
            expect(data.workingIndicator).to.be.a('boolean');
            expect(data.workingIndicator).to.be(false);
            expect(data.ordRejReason).to.be.a('string');
            expect(data.ordRejReason).to.be("");
            expect(data.simpleLeavesQty).to.be.a('number');
            expect(data.simpleLeavesQty).to.be(0.0);
            expect(data.leavesQty).to.be.a('number');
            expect(data.leavesQty).to.be();
            expect(data.simpleCumQty).to.be.a('number');
            expect(data.simpleCumQty).to.be(0.0);
            expect(data.cumQty).to.be.a('number');
            expect(data.cumQty).to.be();
            expect(data.avgPx).to.be.a('number');
            expect(data.avgPx).to.be(0.0);
            expect(data.multiLegReportingType).to.be.a('string');
            expect(data.multiLegReportingType).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.transactTime).to.be.a(Date);
            expect(data.transactTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orderGetOrders', function() {
        it('should call orderGetOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for orderGetOrders call and complete the assertions
          /*
          var opts = {};
          opts.symbol = "symbol_example";
          opts.filter = "filter_example";
          opts.columns = "columns_example";
          opts.count = 100;
          opts.start = 0;
          opts.reverse = false;
          opts.startTime = new Date("2013-10-20T19:20:30+01:00");
          opts.endTime = new Date("2013-10-20T19:20:30+01:00");

          instance.orderGetOrders(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.Order);
              expect(data.orderID).to.be.a('string');
              expect(data.orderID).to.be("");
              expect(data.clOrdID).to.be.a('string');
              expect(data.clOrdID).to.be("");
              expect(data.clOrdLinkID).to.be.a('string');
              expect(data.clOrdLinkID).to.be("");
              expect(data.account).to.be.a('number');
              expect(data.account).to.be();
              expect(data.symbol).to.be.a('string');
              expect(data.symbol).to.be("");
              expect(data.side).to.be.a('string');
              expect(data.side).to.be("");
              expect(data.simpleOrderQty).to.be.a('number');
              expect(data.simpleOrderQty).to.be(0.0);
              expect(data.orderQty).to.be.a('number');
              expect(data.orderQty).to.be();
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.displayQty).to.be.a('number');
              expect(data.displayQty).to.be();
              expect(data.stopPx).to.be.a('number');
              expect(data.stopPx).to.be(0.0);
              expect(data.pegOffsetValue).to.be.a('number');
              expect(data.pegOffsetValue).to.be(0.0);
              expect(data.pegPriceType).to.be.a('string');
              expect(data.pegPriceType).to.be("");
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.settlCurrency).to.be.a('string');
              expect(data.settlCurrency).to.be("");
              expect(data.ordType).to.be.a('string');
              expect(data.ordType).to.be("");
              expect(data.timeInForce).to.be.a('string');
              expect(data.timeInForce).to.be("");
              expect(data.execInst).to.be.a('string');
              expect(data.execInst).to.be("");
              expect(data.contingencyType).to.be.a('string');
              expect(data.contingencyType).to.be("");
              expect(data.exDestination).to.be.a('string');
              expect(data.exDestination).to.be("");
              expect(data.ordStatus).to.be.a('string');
              expect(data.ordStatus).to.be("");
              expect(data.triggered).to.be.a('string');
              expect(data.triggered).to.be("");
              expect(data.workingIndicator).to.be.a('boolean');
              expect(data.workingIndicator).to.be(false);
              expect(data.ordRejReason).to.be.a('string');
              expect(data.ordRejReason).to.be("");
              expect(data.simpleLeavesQty).to.be.a('number');
              expect(data.simpleLeavesQty).to.be(0.0);
              expect(data.leavesQty).to.be.a('number');
              expect(data.leavesQty).to.be();
              expect(data.simpleCumQty).to.be.a('number');
              expect(data.simpleCumQty).to.be(0.0);
              expect(data.cumQty).to.be.a('number');
              expect(data.cumQty).to.be();
              expect(data.avgPx).to.be.a('number');
              expect(data.avgPx).to.be(0.0);
              expect(data.multiLegReportingType).to.be.a('string');
              expect(data.multiLegReportingType).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.transactTime).to.be.a(Date);
              expect(data.transactTime).to.be(new Date());
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orderNew', function() {
        it('should call orderNew successfully', function(done) {
          // TODO: uncomment, update parameter values for orderNew call and complete the assertions
          /*
          var symbol = "symbol_example";
          var opts = {};
          opts.side = "side_example";
          opts.simpleOrderQty = 1.2;
          opts.orderQty = 8.14;
          opts.price = 1.2;
          opts.displayQty = 8.14;
          opts.stopPx = 1.2;
          opts.clOrdID = "clOrdID_example";
          opts.clOrdLinkID = "clOrdLinkID_example";
          opts.pegOffsetValue = 1.2;
          opts.pegPriceType = "pegPriceType_example";
          opts.ordType = "Limit";
          opts.timeInForce = "timeInForce_example";
          opts.execInst = "execInst_example";
          opts.contingencyType = "contingencyType_example";
          opts.text = "text_example";

          instance.orderNew(symbol, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Order);
            expect(data.orderID).to.be.a('string');
            expect(data.orderID).to.be("");
            expect(data.clOrdID).to.be.a('string');
            expect(data.clOrdID).to.be("");
            expect(data.clOrdLinkID).to.be.a('string');
            expect(data.clOrdLinkID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.side).to.be.a('string');
            expect(data.side).to.be("");
            expect(data.simpleOrderQty).to.be.a('number');
            expect(data.simpleOrderQty).to.be(0.0);
            expect(data.orderQty).to.be.a('number');
            expect(data.orderQty).to.be();
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(0.0);
            expect(data.displayQty).to.be.a('number');
            expect(data.displayQty).to.be();
            expect(data.stopPx).to.be.a('number');
            expect(data.stopPx).to.be(0.0);
            expect(data.pegOffsetValue).to.be.a('number');
            expect(data.pegOffsetValue).to.be(0.0);
            expect(data.pegPriceType).to.be.a('string');
            expect(data.pegPriceType).to.be("");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.settlCurrency).to.be.a('string');
            expect(data.settlCurrency).to.be("");
            expect(data.ordType).to.be.a('string');
            expect(data.ordType).to.be("");
            expect(data.timeInForce).to.be.a('string');
            expect(data.timeInForce).to.be("");
            expect(data.execInst).to.be.a('string');
            expect(data.execInst).to.be("");
            expect(data.contingencyType).to.be.a('string');
            expect(data.contingencyType).to.be("");
            expect(data.exDestination).to.be.a('string');
            expect(data.exDestination).to.be("");
            expect(data.ordStatus).to.be.a('string');
            expect(data.ordStatus).to.be("");
            expect(data.triggered).to.be.a('string');
            expect(data.triggered).to.be("");
            expect(data.workingIndicator).to.be.a('boolean');
            expect(data.workingIndicator).to.be(false);
            expect(data.ordRejReason).to.be.a('string');
            expect(data.ordRejReason).to.be("");
            expect(data.simpleLeavesQty).to.be.a('number');
            expect(data.simpleLeavesQty).to.be(0.0);
            expect(data.leavesQty).to.be.a('number');
            expect(data.leavesQty).to.be();
            expect(data.simpleCumQty).to.be.a('number');
            expect(data.simpleCumQty).to.be(0.0);
            expect(data.cumQty).to.be.a('number');
            expect(data.cumQty).to.be();
            expect(data.avgPx).to.be.a('number');
            expect(data.avgPx).to.be(0.0);
            expect(data.multiLegReportingType).to.be.a('string');
            expect(data.multiLegReportingType).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.transactTime).to.be.a(Date);
            expect(data.transactTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
