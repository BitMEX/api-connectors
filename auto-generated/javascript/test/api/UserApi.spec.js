/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.UserApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserApi', function() {
    describe('userCancelWithdrawal', function() {
      it('should call userCancelWithdrawal successfully', function(done) {
        //uncomment below and update the code to test userCancelWithdrawal
        //instance.userCancelWithdrawal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userCheckReferralCode', function() {
      it('should call userCheckReferralCode successfully', function(done) {
        //uncomment below and update the code to test userCheckReferralCode
        //instance.userCheckReferralCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userConfirm', function() {
      it('should call userConfirm successfully', function(done) {
        //uncomment below and update the code to test userConfirm
        //instance.userConfirm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userConfirmEnableTFA', function() {
      it('should call userConfirmEnableTFA successfully', function(done) {
        //uncomment below and update the code to test userConfirmEnableTFA
        //instance.userConfirmEnableTFA(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userConfirmWithdrawal', function() {
      it('should call userConfirmWithdrawal successfully', function(done) {
        //uncomment below and update the code to test userConfirmWithdrawal
        //instance.userConfirmWithdrawal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userDisableTFA', function() {
      it('should call userDisableTFA successfully', function(done) {
        //uncomment below and update the code to test userDisableTFA
        //instance.userDisableTFA(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGet', function() {
      it('should call userGet successfully', function(done) {
        //uncomment below and update the code to test userGet
        //instance.userGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetAffiliateStatus', function() {
      it('should call userGetAffiliateStatus successfully', function(done) {
        //uncomment below and update the code to test userGetAffiliateStatus
        //instance.userGetAffiliateStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetCommission', function() {
      it('should call userGetCommission successfully', function(done) {
        //uncomment below and update the code to test userGetCommission
        //instance.userGetCommission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetDepositAddress', function() {
      it('should call userGetDepositAddress successfully', function(done) {
        //uncomment below and update the code to test userGetDepositAddress
        //instance.userGetDepositAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetMargin', function() {
      it('should call userGetMargin successfully', function(done) {
        //uncomment below and update the code to test userGetMargin
        //instance.userGetMargin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetWallet', function() {
      it('should call userGetWallet successfully', function(done) {
        //uncomment below and update the code to test userGetWallet
        //instance.userGetWallet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetWalletHistory', function() {
      it('should call userGetWalletHistory successfully', function(done) {
        //uncomment below and update the code to test userGetWalletHistory
        //instance.userGetWalletHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetWalletSummary', function() {
      it('should call userGetWalletSummary successfully', function(done) {
        //uncomment below and update the code to test userGetWalletSummary
        //instance.userGetWalletSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userLogout', function() {
      it('should call userLogout successfully', function(done) {
        //uncomment below and update the code to test userLogout
        //instance.userLogout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userLogoutAll', function() {
      it('should call userLogoutAll successfully', function(done) {
        //uncomment below and update the code to test userLogoutAll
        //instance.userLogoutAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userMinWithdrawalFee', function() {
      it('should call userMinWithdrawalFee successfully', function(done) {
        //uncomment below and update the code to test userMinWithdrawalFee
        //instance.userMinWithdrawalFee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userRequestEnableTFA', function() {
      it('should call userRequestEnableTFA successfully', function(done) {
        //uncomment below and update the code to test userRequestEnableTFA
        //instance.userRequestEnableTFA(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userRequestWithdrawal', function() {
      it('should call userRequestWithdrawal successfully', function(done) {
        //uncomment below and update the code to test userRequestWithdrawal
        //instance.userRequestWithdrawal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userSavePreferences', function() {
      it('should call userSavePreferences successfully', function(done) {
        //uncomment below and update the code to test userSavePreferences
        //instance.userSavePreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userUpdate', function() {
      it('should call userUpdate successfully', function(done) {
        //uncomment below and update the code to test userUpdate
        //instance.userUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
