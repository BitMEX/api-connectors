/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Execution', function() {
      beforeEach(function() {
        instance = new BitMexApi.Execution();
      });

      it('should create an instance of Execution', function() {
        // TODO: update the code to test Execution
        expect(instance).to.be.a(BitMexApi.Execution);
      });

      it('should have the property execID (base name: "execID")', function() {
        // TODO: update the code to test the property execID
        expect(instance).to.have.property('execID');
        // expect(instance.execID).to.be(expectedValueLiteral);
      });

      it('should have the property orderID (base name: "orderID")', function() {
        // TODO: update the code to test the property orderID
        expect(instance).to.have.property('orderID');
        // expect(instance.orderID).to.be(expectedValueLiteral);
      });

      it('should have the property clOrdID (base name: "clOrdID")', function() {
        // TODO: update the code to test the property clOrdID
        expect(instance).to.have.property('clOrdID');
        // expect(instance.clOrdID).to.be(expectedValueLiteral);
      });

      it('should have the property clOrdLinkID (base name: "clOrdLinkID")', function() {
        // TODO: update the code to test the property clOrdLinkID
        expect(instance).to.have.property('clOrdLinkID');
        // expect(instance.clOrdLinkID).to.be(expectedValueLiteral);
      });

      it('should have the property account (base name: "account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property side (base name: "side")', function() {
        // TODO: update the code to test the property side
        expect(instance).to.have.property('side');
        // expect(instance.side).to.be(expectedValueLiteral);
      });

      it('should have the property lastQty (base name: "lastQty")', function() {
        // TODO: update the code to test the property lastQty
        expect(instance).to.have.property('lastQty');
        // expect(instance.lastQty).to.be(expectedValueLiteral);
      });

      it('should have the property lastPx (base name: "lastPx")', function() {
        // TODO: update the code to test the property lastPx
        expect(instance).to.have.property('lastPx');
        // expect(instance.lastPx).to.be(expectedValueLiteral);
      });

      it('should have the property underlyingLastPx (base name: "underlyingLastPx")', function() {
        // TODO: update the code to test the property underlyingLastPx
        expect(instance).to.have.property('underlyingLastPx');
        // expect(instance.underlyingLastPx).to.be(expectedValueLiteral);
      });

      it('should have the property lastMkt (base name: "lastMkt")', function() {
        // TODO: update the code to test the property lastMkt
        expect(instance).to.have.property('lastMkt');
        // expect(instance.lastMkt).to.be(expectedValueLiteral);
      });

      it('should have the property lastLiquidityInd (base name: "lastLiquidityInd")', function() {
        // TODO: update the code to test the property lastLiquidityInd
        expect(instance).to.have.property('lastLiquidityInd');
        // expect(instance.lastLiquidityInd).to.be(expectedValueLiteral);
      });

      it('should have the property simpleOrderQty (base name: "simpleOrderQty")', function() {
        // TODO: update the code to test the property simpleOrderQty
        expect(instance).to.have.property('simpleOrderQty');
        // expect(instance.simpleOrderQty).to.be(expectedValueLiteral);
      });

      it('should have the property orderQty (base name: "orderQty")', function() {
        // TODO: update the code to test the property orderQty
        expect(instance).to.have.property('orderQty');
        // expect(instance.orderQty).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property displayQty (base name: "displayQty")', function() {
        // TODO: update the code to test the property displayQty
        expect(instance).to.have.property('displayQty');
        // expect(instance.displayQty).to.be(expectedValueLiteral);
      });

      it('should have the property stopPx (base name: "stopPx")', function() {
        // TODO: update the code to test the property stopPx
        expect(instance).to.have.property('stopPx');
        // expect(instance.stopPx).to.be(expectedValueLiteral);
      });

      it('should have the property pegOffsetValue (base name: "pegOffsetValue")', function() {
        // TODO: update the code to test the property pegOffsetValue
        expect(instance).to.have.property('pegOffsetValue');
        // expect(instance.pegOffsetValue).to.be(expectedValueLiteral);
      });

      it('should have the property pegPriceType (base name: "pegPriceType")', function() {
        // TODO: update the code to test the property pegPriceType
        expect(instance).to.have.property('pegPriceType');
        // expect(instance.pegPriceType).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property settlCurrency (base name: "settlCurrency")', function() {
        // TODO: update the code to test the property settlCurrency
        expect(instance).to.have.property('settlCurrency');
        // expect(instance.settlCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property execType (base name: "execType")', function() {
        // TODO: update the code to test the property execType
        expect(instance).to.have.property('execType');
        // expect(instance.execType).to.be(expectedValueLiteral);
      });

      it('should have the property ordType (base name: "ordType")', function() {
        // TODO: update the code to test the property ordType
        expect(instance).to.have.property('ordType');
        // expect(instance.ordType).to.be(expectedValueLiteral);
      });

      it('should have the property timeInForce (base name: "timeInForce")', function() {
        // TODO: update the code to test the property timeInForce
        expect(instance).to.have.property('timeInForce');
        // expect(instance.timeInForce).to.be(expectedValueLiteral);
      });

      it('should have the property execInst (base name: "execInst")', function() {
        // TODO: update the code to test the property execInst
        expect(instance).to.have.property('execInst');
        // expect(instance.execInst).to.be(expectedValueLiteral);
      });

      it('should have the property contingencyType (base name: "contingencyType")', function() {
        // TODO: update the code to test the property contingencyType
        expect(instance).to.have.property('contingencyType');
        // expect(instance.contingencyType).to.be(expectedValueLiteral);
      });

      it('should have the property exDestination (base name: "exDestination")', function() {
        // TODO: update the code to test the property exDestination
        expect(instance).to.have.property('exDestination');
        // expect(instance.exDestination).to.be(expectedValueLiteral);
      });

      it('should have the property ordStatus (base name: "ordStatus")', function() {
        // TODO: update the code to test the property ordStatus
        expect(instance).to.have.property('ordStatus');
        // expect(instance.ordStatus).to.be(expectedValueLiteral);
      });

      it('should have the property triggered (base name: "triggered")', function() {
        // TODO: update the code to test the property triggered
        expect(instance).to.have.property('triggered');
        // expect(instance.triggered).to.be(expectedValueLiteral);
      });

      it('should have the property workingIndicator (base name: "workingIndicator")', function() {
        // TODO: update the code to test the property workingIndicator
        expect(instance).to.have.property('workingIndicator');
        // expect(instance.workingIndicator).to.be(expectedValueLiteral);
      });

      it('should have the property ordRejReason (base name: "ordRejReason")', function() {
        // TODO: update the code to test the property ordRejReason
        expect(instance).to.have.property('ordRejReason');
        // expect(instance.ordRejReason).to.be(expectedValueLiteral);
      });

      it('should have the property simpleLeavesQty (base name: "simpleLeavesQty")', function() {
        // TODO: update the code to test the property simpleLeavesQty
        expect(instance).to.have.property('simpleLeavesQty');
        // expect(instance.simpleLeavesQty).to.be(expectedValueLiteral);
      });

      it('should have the property leavesQty (base name: "leavesQty")', function() {
        // TODO: update the code to test the property leavesQty
        expect(instance).to.have.property('leavesQty');
        // expect(instance.leavesQty).to.be(expectedValueLiteral);
      });

      it('should have the property simpleCumQty (base name: "simpleCumQty")', function() {
        // TODO: update the code to test the property simpleCumQty
        expect(instance).to.have.property('simpleCumQty');
        // expect(instance.simpleCumQty).to.be(expectedValueLiteral);
      });

      it('should have the property cumQty (base name: "cumQty")', function() {
        // TODO: update the code to test the property cumQty
        expect(instance).to.have.property('cumQty');
        // expect(instance.cumQty).to.be(expectedValueLiteral);
      });

      it('should have the property avgPx (base name: "avgPx")', function() {
        // TODO: update the code to test the property avgPx
        expect(instance).to.have.property('avgPx');
        // expect(instance.avgPx).to.be(expectedValueLiteral);
      });

      it('should have the property commission (base name: "commission")', function() {
        // TODO: update the code to test the property commission
        expect(instance).to.have.property('commission');
        // expect(instance.commission).to.be(expectedValueLiteral);
      });

      it('should have the property tradePublishIndicator (base name: "tradePublishIndicator")', function() {
        // TODO: update the code to test the property tradePublishIndicator
        expect(instance).to.have.property('tradePublishIndicator');
        // expect(instance.tradePublishIndicator).to.be(expectedValueLiteral);
      });

      it('should have the property multiLegReportingType (base name: "multiLegReportingType")', function() {
        // TODO: update the code to test the property multiLegReportingType
        expect(instance).to.have.property('multiLegReportingType');
        // expect(instance.multiLegReportingType).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property trdMatchID (base name: "trdMatchID")', function() {
        // TODO: update the code to test the property trdMatchID
        expect(instance).to.have.property('trdMatchID');
        // expect(instance.trdMatchID).to.be(expectedValueLiteral);
      });

      it('should have the property execCost (base name: "execCost")', function() {
        // TODO: update the code to test the property execCost
        expect(instance).to.have.property('execCost');
        // expect(instance.execCost).to.be(expectedValueLiteral);
      });

      it('should have the property execComm (base name: "execComm")', function() {
        // TODO: update the code to test the property execComm
        expect(instance).to.have.property('execComm');
        // expect(instance.execComm).to.be(expectedValueLiteral);
      });

      it('should have the property homeNotional (base name: "homeNotional")', function() {
        // TODO: update the code to test the property homeNotional
        expect(instance).to.have.property('homeNotional');
        // expect(instance.homeNotional).to.be(expectedValueLiteral);
      });

      it('should have the property foreignNotional (base name: "foreignNotional")', function() {
        // TODO: update the code to test the property foreignNotional
        expect(instance).to.have.property('foreignNotional');
        // expect(instance.foreignNotional).to.be(expectedValueLiteral);
      });

      it('should have the property transactTime (base name: "transactTime")', function() {
        // TODO: update the code to test the property transactTime
        expect(instance).to.have.property('transactTime');
        // expect(instance.transactTime).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

    });
  });

}));
