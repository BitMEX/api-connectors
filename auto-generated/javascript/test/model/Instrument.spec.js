/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.Instrument();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Instrument', function() {
    it('should create an instance of Instrument', function() {
      // uncomment below and update the code to test Instrument
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be.a(BitMexApi.Instrument);
    });

    it('should have the property symbol (base name: "symbol")', function() {
      // uncomment below and update the code to test the property symbol
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property rootSymbol (base name: "rootSymbol")', function() {
      // uncomment below and update the code to test the property rootSymbol
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property typ (base name: "typ")', function() {
      // uncomment below and update the code to test the property typ
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property listing (base name: "listing")', function() {
      // uncomment below and update the code to test the property listing
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property front (base name: "front")', function() {
      // uncomment below and update the code to test the property front
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property expiry (base name: "expiry")', function() {
      // uncomment below and update the code to test the property expiry
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property settle (base name: "settle")', function() {
      // uncomment below and update the code to test the property settle
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property relistInterval (base name: "relistInterval")', function() {
      // uncomment below and update the code to test the property relistInterval
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property inverseLeg (base name: "inverseLeg")', function() {
      // uncomment below and update the code to test the property inverseLeg
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property sellLeg (base name: "sellLeg")', function() {
      // uncomment below and update the code to test the property sellLeg
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property buyLeg (base name: "buyLeg")', function() {
      // uncomment below and update the code to test the property buyLeg
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property optionStrikePcnt (base name: "optionStrikePcnt")', function() {
      // uncomment below and update the code to test the property optionStrikePcnt
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property optionStrikeRound (base name: "optionStrikeRound")', function() {
      // uncomment below and update the code to test the property optionStrikeRound
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property optionStrikePrice (base name: "optionStrikePrice")', function() {
      // uncomment below and update the code to test the property optionStrikePrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property optionMultiplier (base name: "optionMultiplier")', function() {
      // uncomment below and update the code to test the property optionMultiplier
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property positionCurrency (base name: "positionCurrency")', function() {
      // uncomment below and update the code to test the property positionCurrency
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property underlying (base name: "underlying")', function() {
      // uncomment below and update the code to test the property underlying
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property quoteCurrency (base name: "quoteCurrency")', function() {
      // uncomment below and update the code to test the property quoteCurrency
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property underlyingSymbol (base name: "underlyingSymbol")', function() {
      // uncomment below and update the code to test the property underlyingSymbol
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property referenceSymbol (base name: "referenceSymbol")', function() {
      // uncomment below and update the code to test the property referenceSymbol
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property calcInterval (base name: "calcInterval")', function() {
      // uncomment below and update the code to test the property calcInterval
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property publishInterval (base name: "publishInterval")', function() {
      // uncomment below and update the code to test the property publishInterval
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property publishTime (base name: "publishTime")', function() {
      // uncomment below and update the code to test the property publishTime
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property maxOrderQty (base name: "maxOrderQty")', function() {
      // uncomment below and update the code to test the property maxOrderQty
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property maxPrice (base name: "maxPrice")', function() {
      // uncomment below and update the code to test the property maxPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property lotSize (base name: "lotSize")', function() {
      // uncomment below and update the code to test the property lotSize
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property tickSize (base name: "tickSize")', function() {
      // uncomment below and update the code to test the property tickSize
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property multiplier (base name: "multiplier")', function() {
      // uncomment below and update the code to test the property multiplier
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property settlCurrency (base name: "settlCurrency")', function() {
      // uncomment below and update the code to test the property settlCurrency
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property underlyingToPositionMultiplier (base name: "underlyingToPositionMultiplier")', function() {
      // uncomment below and update the code to test the property underlyingToPositionMultiplier
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property underlyingToSettleMultiplier (base name: "underlyingToSettleMultiplier")', function() {
      // uncomment below and update the code to test the property underlyingToSettleMultiplier
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property quoteToSettleMultiplier (base name: "quoteToSettleMultiplier")', function() {
      // uncomment below and update the code to test the property quoteToSettleMultiplier
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property isQuanto (base name: "isQuanto")', function() {
      // uncomment below and update the code to test the property isQuanto
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property isInverse (base name: "isInverse")', function() {
      // uncomment below and update the code to test the property isInverse
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property initMargin (base name: "initMargin")', function() {
      // uncomment below and update the code to test the property initMargin
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property maintMargin (base name: "maintMargin")', function() {
      // uncomment below and update the code to test the property maintMargin
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property riskLimit (base name: "riskLimit")', function() {
      // uncomment below and update the code to test the property riskLimit
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property riskStep (base name: "riskStep")', function() {
      // uncomment below and update the code to test the property riskStep
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property limit (base name: "limit")', function() {
      // uncomment below and update the code to test the property limit
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property capped (base name: "capped")', function() {
      // uncomment below and update the code to test the property capped
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property taxed (base name: "taxed")', function() {
      // uncomment below and update the code to test the property taxed
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property deleverage (base name: "deleverage")', function() {
      // uncomment below and update the code to test the property deleverage
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property makerFee (base name: "makerFee")', function() {
      // uncomment below and update the code to test the property makerFee
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property takerFee (base name: "takerFee")', function() {
      // uncomment below and update the code to test the property takerFee
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property settlementFee (base name: "settlementFee")', function() {
      // uncomment below and update the code to test the property settlementFee
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property insuranceFee (base name: "insuranceFee")', function() {
      // uncomment below and update the code to test the property insuranceFee
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fundingBaseSymbol (base name: "fundingBaseSymbol")', function() {
      // uncomment below and update the code to test the property fundingBaseSymbol
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fundingQuoteSymbol (base name: "fundingQuoteSymbol")', function() {
      // uncomment below and update the code to test the property fundingQuoteSymbol
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fundingPremiumSymbol (base name: "fundingPremiumSymbol")', function() {
      // uncomment below and update the code to test the property fundingPremiumSymbol
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fundingTimestamp (base name: "fundingTimestamp")', function() {
      // uncomment below and update the code to test the property fundingTimestamp
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fundingInterval (base name: "fundingInterval")', function() {
      // uncomment below and update the code to test the property fundingInterval
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fundingRate (base name: "fundingRate")', function() {
      // uncomment below and update the code to test the property fundingRate
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property indicativeFundingRate (base name: "indicativeFundingRate")', function() {
      // uncomment below and update the code to test the property indicativeFundingRate
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property rebalanceTimestamp (base name: "rebalanceTimestamp")', function() {
      // uncomment below and update the code to test the property rebalanceTimestamp
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property rebalanceInterval (base name: "rebalanceInterval")', function() {
      // uncomment below and update the code to test the property rebalanceInterval
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property openingTimestamp (base name: "openingTimestamp")', function() {
      // uncomment below and update the code to test the property openingTimestamp
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property closingTimestamp (base name: "closingTimestamp")', function() {
      // uncomment below and update the code to test the property closingTimestamp
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property sessionInterval (base name: "sessionInterval")', function() {
      // uncomment below and update the code to test the property sessionInterval
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property prevClosePrice (base name: "prevClosePrice")', function() {
      // uncomment below and update the code to test the property prevClosePrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property limitDownPrice (base name: "limitDownPrice")', function() {
      // uncomment below and update the code to test the property limitDownPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property limitUpPrice (base name: "limitUpPrice")', function() {
      // uncomment below and update the code to test the property limitUpPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property bankruptLimitDownPrice (base name: "bankruptLimitDownPrice")', function() {
      // uncomment below and update the code to test the property bankruptLimitDownPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property bankruptLimitUpPrice (base name: "bankruptLimitUpPrice")', function() {
      // uncomment below and update the code to test the property bankruptLimitUpPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property prevTotalVolume (base name: "prevTotalVolume")', function() {
      // uncomment below and update the code to test the property prevTotalVolume
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property totalVolume (base name: "totalVolume")', function() {
      // uncomment below and update the code to test the property totalVolume
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property volume (base name: "volume")', function() {
      // uncomment below and update the code to test the property volume
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property volume24h (base name: "volume24h")', function() {
      // uncomment below and update the code to test the property volume24h
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property prevTotalTurnover (base name: "prevTotalTurnover")', function() {
      // uncomment below and update the code to test the property prevTotalTurnover
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property totalTurnover (base name: "totalTurnover")', function() {
      // uncomment below and update the code to test the property totalTurnover
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property turnover (base name: "turnover")', function() {
      // uncomment below and update the code to test the property turnover
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property turnover24h (base name: "turnover24h")', function() {
      // uncomment below and update the code to test the property turnover24h
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property prevPrice24h (base name: "prevPrice24h")', function() {
      // uncomment below and update the code to test the property prevPrice24h
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property vwap (base name: "vwap")', function() {
      // uncomment below and update the code to test the property vwap
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property highPrice (base name: "highPrice")', function() {
      // uncomment below and update the code to test the property highPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property lowPrice (base name: "lowPrice")', function() {
      // uncomment below and update the code to test the property lowPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property lastPrice (base name: "lastPrice")', function() {
      // uncomment below and update the code to test the property lastPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property lastPriceProtected (base name: "lastPriceProtected")', function() {
      // uncomment below and update the code to test the property lastPriceProtected
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property lastTickDirection (base name: "lastTickDirection")', function() {
      // uncomment below and update the code to test the property lastTickDirection
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property lastChangePcnt (base name: "lastChangePcnt")', function() {
      // uncomment below and update the code to test the property lastChangePcnt
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property bidPrice (base name: "bidPrice")', function() {
      // uncomment below and update the code to test the property bidPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property midPrice (base name: "midPrice")', function() {
      // uncomment below and update the code to test the property midPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property askPrice (base name: "askPrice")', function() {
      // uncomment below and update the code to test the property askPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property impactBidPrice (base name: "impactBidPrice")', function() {
      // uncomment below and update the code to test the property impactBidPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property impactMidPrice (base name: "impactMidPrice")', function() {
      // uncomment below and update the code to test the property impactMidPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property impactAskPrice (base name: "impactAskPrice")', function() {
      // uncomment below and update the code to test the property impactAskPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property hasLiquidity (base name: "hasLiquidity")', function() {
      // uncomment below and update the code to test the property hasLiquidity
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property openInterest (base name: "openInterest")', function() {
      // uncomment below and update the code to test the property openInterest
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property openValue (base name: "openValue")', function() {
      // uncomment below and update the code to test the property openValue
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fairMethod (base name: "fairMethod")', function() {
      // uncomment below and update the code to test the property fairMethod
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fairBasisRate (base name: "fairBasisRate")', function() {
      // uncomment below and update the code to test the property fairBasisRate
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fairBasis (base name: "fairBasis")', function() {
      // uncomment below and update the code to test the property fairBasis
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property fairPrice (base name: "fairPrice")', function() {
      // uncomment below and update the code to test the property fairPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property markMethod (base name: "markMethod")', function() {
      // uncomment below and update the code to test the property markMethod
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property markPrice (base name: "markPrice")', function() {
      // uncomment below and update the code to test the property markPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property indicativeTaxRate (base name: "indicativeTaxRate")', function() {
      // uncomment below and update the code to test the property indicativeTaxRate
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property indicativeSettlePrice (base name: "indicativeSettlePrice")', function() {
      // uncomment below and update the code to test the property indicativeSettlePrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property optionUnderlyingPrice (base name: "optionUnderlyingPrice")', function() {
      // uncomment below and update the code to test the property optionUnderlyingPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property settledPrice (base name: "settledPrice")', function() {
      // uncomment below and update the code to test the property settledPrice
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new BitMexApi.Instrument();
      //expect(instance).to.be();
    });

  });

}));
