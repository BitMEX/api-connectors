/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Margin', function() {
      beforeEach(function() {
        instance = new BitMexApi.Margin();
      });

      it('should create an instance of Margin', function() {
        // TODO: update the code to test Margin
        expect(instance).to.be.a(BitMexApi.Margin);
      });

      it('should have the property account (base name: "account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property riskLimit (base name: "riskLimit")', function() {
        // TODO: update the code to test the property riskLimit
        expect(instance).to.have.property('riskLimit');
        // expect(instance.riskLimit).to.be(expectedValueLiteral);
      });

      it('should have the property prevState (base name: "prevState")', function() {
        // TODO: update the code to test the property prevState
        expect(instance).to.have.property('prevState');
        // expect(instance.prevState).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property action (base name: "action")', function() {
        // TODO: update the code to test the property action
        expect(instance).to.have.property('action');
        // expect(instance.action).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property pendingCredit (base name: "pendingCredit")', function() {
        // TODO: update the code to test the property pendingCredit
        expect(instance).to.have.property('pendingCredit');
        // expect(instance.pendingCredit).to.be(expectedValueLiteral);
      });

      it('should have the property pendingDebit (base name: "pendingDebit")', function() {
        // TODO: update the code to test the property pendingDebit
        expect(instance).to.have.property('pendingDebit');
        // expect(instance.pendingDebit).to.be(expectedValueLiteral);
      });

      it('should have the property confirmedDebit (base name: "confirmedDebit")', function() {
        // TODO: update the code to test the property confirmedDebit
        expect(instance).to.have.property('confirmedDebit');
        // expect(instance.confirmedDebit).to.be(expectedValueLiteral);
      });

      it('should have the property prevRealisedPnl (base name: "prevRealisedPnl")', function() {
        // TODO: update the code to test the property prevRealisedPnl
        expect(instance).to.have.property('prevRealisedPnl');
        // expect(instance.prevRealisedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property prevUnrealisedPnl (base name: "prevUnrealisedPnl")', function() {
        // TODO: update the code to test the property prevUnrealisedPnl
        expect(instance).to.have.property('prevUnrealisedPnl');
        // expect(instance.prevUnrealisedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property grossComm (base name: "grossComm")', function() {
        // TODO: update the code to test the property grossComm
        expect(instance).to.have.property('grossComm');
        // expect(instance.grossComm).to.be(expectedValueLiteral);
      });

      it('should have the property grossOpenCost (base name: "grossOpenCost")', function() {
        // TODO: update the code to test the property grossOpenCost
        expect(instance).to.have.property('grossOpenCost');
        // expect(instance.grossOpenCost).to.be(expectedValueLiteral);
      });

      it('should have the property grossOpenPremium (base name: "grossOpenPremium")', function() {
        // TODO: update the code to test the property grossOpenPremium
        expect(instance).to.have.property('grossOpenPremium');
        // expect(instance.grossOpenPremium).to.be(expectedValueLiteral);
      });

      it('should have the property grossExecCost (base name: "grossExecCost")', function() {
        // TODO: update the code to test the property grossExecCost
        expect(instance).to.have.property('grossExecCost');
        // expect(instance.grossExecCost).to.be(expectedValueLiteral);
      });

      it('should have the property grossMarkValue (base name: "grossMarkValue")', function() {
        // TODO: update the code to test the property grossMarkValue
        expect(instance).to.have.property('grossMarkValue');
        // expect(instance.grossMarkValue).to.be(expectedValueLiteral);
      });

      it('should have the property riskValue (base name: "riskValue")', function() {
        // TODO: update the code to test the property riskValue
        expect(instance).to.have.property('riskValue');
        // expect(instance.riskValue).to.be(expectedValueLiteral);
      });

      it('should have the property taxableMargin (base name: "taxableMargin")', function() {
        // TODO: update the code to test the property taxableMargin
        expect(instance).to.have.property('taxableMargin');
        // expect(instance.taxableMargin).to.be(expectedValueLiteral);
      });

      it('should have the property initMargin (base name: "initMargin")', function() {
        // TODO: update the code to test the property initMargin
        expect(instance).to.have.property('initMargin');
        // expect(instance.initMargin).to.be(expectedValueLiteral);
      });

      it('should have the property maintMargin (base name: "maintMargin")', function() {
        // TODO: update the code to test the property maintMargin
        expect(instance).to.have.property('maintMargin');
        // expect(instance.maintMargin).to.be(expectedValueLiteral);
      });

      it('should have the property sessionMargin (base name: "sessionMargin")', function() {
        // TODO: update the code to test the property sessionMargin
        expect(instance).to.have.property('sessionMargin');
        // expect(instance.sessionMargin).to.be(expectedValueLiteral);
      });

      it('should have the property targetExcessMargin (base name: "targetExcessMargin")', function() {
        // TODO: update the code to test the property targetExcessMargin
        expect(instance).to.have.property('targetExcessMargin');
        // expect(instance.targetExcessMargin).to.be(expectedValueLiteral);
      });

      it('should have the property varMargin (base name: "varMargin")', function() {
        // TODO: update the code to test the property varMargin
        expect(instance).to.have.property('varMargin');
        // expect(instance.varMargin).to.be(expectedValueLiteral);
      });

      it('should have the property realisedPnl (base name: "realisedPnl")', function() {
        // TODO: update the code to test the property realisedPnl
        expect(instance).to.have.property('realisedPnl');
        // expect(instance.realisedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property unrealisedPnl (base name: "unrealisedPnl")', function() {
        // TODO: update the code to test the property unrealisedPnl
        expect(instance).to.have.property('unrealisedPnl');
        // expect(instance.unrealisedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property indicativeTax (base name: "indicativeTax")', function() {
        // TODO: update the code to test the property indicativeTax
        expect(instance).to.have.property('indicativeTax');
        // expect(instance.indicativeTax).to.be(expectedValueLiteral);
      });

      it('should have the property unrealisedProfit (base name: "unrealisedProfit")', function() {
        // TODO: update the code to test the property unrealisedProfit
        expect(instance).to.have.property('unrealisedProfit');
        // expect(instance.unrealisedProfit).to.be(expectedValueLiteral);
      });

      it('should have the property syntheticMargin (base name: "syntheticMargin")', function() {
        // TODO: update the code to test the property syntheticMargin
        expect(instance).to.have.property('syntheticMargin');
        // expect(instance.syntheticMargin).to.be(expectedValueLiteral);
      });

      it('should have the property walletBalance (base name: "walletBalance")', function() {
        // TODO: update the code to test the property walletBalance
        expect(instance).to.have.property('walletBalance');
        // expect(instance.walletBalance).to.be(expectedValueLiteral);
      });

      it('should have the property marginBalance (base name: "marginBalance")', function() {
        // TODO: update the code to test the property marginBalance
        expect(instance).to.have.property('marginBalance');
        // expect(instance.marginBalance).to.be(expectedValueLiteral);
      });

      it('should have the property marginBalancePcnt (base name: "marginBalancePcnt")', function() {
        // TODO: update the code to test the property marginBalancePcnt
        expect(instance).to.have.property('marginBalancePcnt');
        // expect(instance.marginBalancePcnt).to.be(expectedValueLiteral);
      });

      it('should have the property marginLeverage (base name: "marginLeverage")', function() {
        // TODO: update the code to test the property marginLeverage
        expect(instance).to.have.property('marginLeverage');
        // expect(instance.marginLeverage).to.be(expectedValueLiteral);
      });

      it('should have the property marginUsedPcnt (base name: "marginUsedPcnt")', function() {
        // TODO: update the code to test the property marginUsedPcnt
        expect(instance).to.have.property('marginUsedPcnt');
        // expect(instance.marginUsedPcnt).to.be(expectedValueLiteral);
      });

      it('should have the property excessMargin (base name: "excessMargin")', function() {
        // TODO: update the code to test the property excessMargin
        expect(instance).to.have.property('excessMargin');
        // expect(instance.excessMargin).to.be(expectedValueLiteral);
      });

      it('should have the property excessMarginPcnt (base name: "excessMarginPcnt")', function() {
        // TODO: update the code to test the property excessMarginPcnt
        expect(instance).to.have.property('excessMarginPcnt');
        // expect(instance.excessMarginPcnt).to.be(expectedValueLiteral);
      });

      it('should have the property availableMargin (base name: "availableMargin")', function() {
        // TODO: update the code to test the property availableMargin
        expect(instance).to.have.property('availableMargin');
        // expect(instance.availableMargin).to.be(expectedValueLiteral);
      });

      it('should have the property withdrawableMargin (base name: "withdrawableMargin")', function() {
        // TODO: update the code to test the property withdrawableMargin
        expect(instance).to.have.property('withdrawableMargin');
        // expect(instance.withdrawableMargin).to.be(expectedValueLiteral);
      });

      it('should have the property grossLastValue (base name: "grossLastValue")', function() {
        // TODO: update the code to test the property grossLastValue
        expect(instance).to.have.property('grossLastValue');
        // expect(instance.grossLastValue).to.be(expectedValueLiteral);
      });

      it('should have the property commission (base name: "commission")', function() {
        // TODO: update the code to test the property commission
        expect(instance).to.have.property('commission');
        // expect(instance.commission).to.be(expectedValueLiteral);
      });

      it('should have the property makerFeeDiscount (base name: "makerFeeDiscount")', function() {
        // TODO: update the code to test the property makerFeeDiscount
        expect(instance).to.have.property('makerFeeDiscount');
        // expect(instance.makerFeeDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property takerFeeDiscount (base name: "takerFeeDiscount")', function() {
        // TODO: update the code to test the property takerFeeDiscount
        expect(instance).to.have.property('takerFeeDiscount');
        // expect(instance.takerFeeDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

    });
  });

}));
