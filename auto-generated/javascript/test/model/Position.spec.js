/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.Position();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Position', function() {
    it('should create an instance of Position', function() {
      // uncomment below and update the code to test Position
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be.a(BitMexApi.Position);
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property symbol (base name: "symbol")', function() {
      // uncomment below and update the code to test the property symbol
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property underlying (base name: "underlying")', function() {
      // uncomment below and update the code to test the property underlying
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property quoteCurrency (base name: "quoteCurrency")', function() {
      // uncomment below and update the code to test the property quoteCurrency
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property commission (base name: "commission")', function() {
      // uncomment below and update the code to test the property commission
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property initMarginReq (base name: "initMarginReq")', function() {
      // uncomment below and update the code to test the property initMarginReq
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property maintMarginReq (base name: "maintMarginReq")', function() {
      // uncomment below and update the code to test the property maintMarginReq
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property riskLimit (base name: "riskLimit")', function() {
      // uncomment below and update the code to test the property riskLimit
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property leverage (base name: "leverage")', function() {
      // uncomment below and update the code to test the property leverage
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property crossMargin (base name: "crossMargin")', function() {
      // uncomment below and update the code to test the property crossMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property deleveragePercentile (base name: "deleveragePercentile")', function() {
      // uncomment below and update the code to test the property deleveragePercentile
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property rebalancedPnl (base name: "rebalancedPnl")', function() {
      // uncomment below and update the code to test the property rebalancedPnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property prevRealisedPnl (base name: "prevRealisedPnl")', function() {
      // uncomment below and update the code to test the property prevRealisedPnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property prevUnrealisedPnl (base name: "prevUnrealisedPnl")', function() {
      // uncomment below and update the code to test the property prevUnrealisedPnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property prevClosePrice (base name: "prevClosePrice")', function() {
      // uncomment below and update the code to test the property prevClosePrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openingTimestamp (base name: "openingTimestamp")', function() {
      // uncomment below and update the code to test the property openingTimestamp
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openingQty (base name: "openingQty")', function() {
      // uncomment below and update the code to test the property openingQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openingCost (base name: "openingCost")', function() {
      // uncomment below and update the code to test the property openingCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openingComm (base name: "openingComm")', function() {
      // uncomment below and update the code to test the property openingComm
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openOrderBuyQty (base name: "openOrderBuyQty")', function() {
      // uncomment below and update the code to test the property openOrderBuyQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openOrderBuyCost (base name: "openOrderBuyCost")', function() {
      // uncomment below and update the code to test the property openOrderBuyCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openOrderBuyPremium (base name: "openOrderBuyPremium")', function() {
      // uncomment below and update the code to test the property openOrderBuyPremium
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openOrderSellQty (base name: "openOrderSellQty")', function() {
      // uncomment below and update the code to test the property openOrderSellQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openOrderSellCost (base name: "openOrderSellCost")', function() {
      // uncomment below and update the code to test the property openOrderSellCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property openOrderSellPremium (base name: "openOrderSellPremium")', function() {
      // uncomment below and update the code to test the property openOrderSellPremium
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property execBuyQty (base name: "execBuyQty")', function() {
      // uncomment below and update the code to test the property execBuyQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property execBuyCost (base name: "execBuyCost")', function() {
      // uncomment below and update the code to test the property execBuyCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property execSellQty (base name: "execSellQty")', function() {
      // uncomment below and update the code to test the property execSellQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property execSellCost (base name: "execSellCost")', function() {
      // uncomment below and update the code to test the property execSellCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property execQty (base name: "execQty")', function() {
      // uncomment below and update the code to test the property execQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property execCost (base name: "execCost")', function() {
      // uncomment below and update the code to test the property execCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property execComm (base name: "execComm")', function() {
      // uncomment below and update the code to test the property execComm
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property currentTimestamp (base name: "currentTimestamp")', function() {
      // uncomment below and update the code to test the property currentTimestamp
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property currentQty (base name: "currentQty")', function() {
      // uncomment below and update the code to test the property currentQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property currentCost (base name: "currentCost")', function() {
      // uncomment below and update the code to test the property currentCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property currentComm (base name: "currentComm")', function() {
      // uncomment below and update the code to test the property currentComm
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property realisedCost (base name: "realisedCost")', function() {
      // uncomment below and update the code to test the property realisedCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedCost (base name: "unrealisedCost")', function() {
      // uncomment below and update the code to test the property unrealisedCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property grossOpenCost (base name: "grossOpenCost")', function() {
      // uncomment below and update the code to test the property grossOpenCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property grossOpenPremium (base name: "grossOpenPremium")', function() {
      // uncomment below and update the code to test the property grossOpenPremium
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property grossExecCost (base name: "grossExecCost")', function() {
      // uncomment below and update the code to test the property grossExecCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property isOpen (base name: "isOpen")', function() {
      // uncomment below and update the code to test the property isOpen
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property markPrice (base name: "markPrice")', function() {
      // uncomment below and update the code to test the property markPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property markValue (base name: "markValue")', function() {
      // uncomment below and update the code to test the property markValue
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property riskValue (base name: "riskValue")', function() {
      // uncomment below and update the code to test the property riskValue
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property homeNotional (base name: "homeNotional")', function() {
      // uncomment below and update the code to test the property homeNotional
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property foreignNotional (base name: "foreignNotional")', function() {
      // uncomment below and update the code to test the property foreignNotional
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posState (base name: "posState")', function() {
      // uncomment below and update the code to test the property posState
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posCost (base name: "posCost")', function() {
      // uncomment below and update the code to test the property posCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posCost2 (base name: "posCost2")', function() {
      // uncomment below and update the code to test the property posCost2
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posCross (base name: "posCross")', function() {
      // uncomment below and update the code to test the property posCross
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posInit (base name: "posInit")', function() {
      // uncomment below and update the code to test the property posInit
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posComm (base name: "posComm")', function() {
      // uncomment below and update the code to test the property posComm
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posLoss (base name: "posLoss")', function() {
      // uncomment below and update the code to test the property posLoss
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posMargin (base name: "posMargin")', function() {
      // uncomment below and update the code to test the property posMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posMaint (base name: "posMaint")', function() {
      // uncomment below and update the code to test the property posMaint
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property posAllowance (base name: "posAllowance")', function() {
      // uncomment below and update the code to test the property posAllowance
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property taxableMargin (base name: "taxableMargin")', function() {
      // uncomment below and update the code to test the property taxableMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property initMargin (base name: "initMargin")', function() {
      // uncomment below and update the code to test the property initMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property maintMargin (base name: "maintMargin")', function() {
      // uncomment below and update the code to test the property maintMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property sessionMargin (base name: "sessionMargin")', function() {
      // uncomment below and update the code to test the property sessionMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property targetExcessMargin (base name: "targetExcessMargin")', function() {
      // uncomment below and update the code to test the property targetExcessMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property varMargin (base name: "varMargin")', function() {
      // uncomment below and update the code to test the property varMargin
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property realisedGrossPnl (base name: "realisedGrossPnl")', function() {
      // uncomment below and update the code to test the property realisedGrossPnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property realisedTax (base name: "realisedTax")', function() {
      // uncomment below and update the code to test the property realisedTax
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property realisedPnl (base name: "realisedPnl")', function() {
      // uncomment below and update the code to test the property realisedPnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedGrossPnl (base name: "unrealisedGrossPnl")', function() {
      // uncomment below and update the code to test the property unrealisedGrossPnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property longBankrupt (base name: "longBankrupt")', function() {
      // uncomment below and update the code to test the property longBankrupt
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property shortBankrupt (base name: "shortBankrupt")', function() {
      // uncomment below and update the code to test the property shortBankrupt
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property taxBase (base name: "taxBase")', function() {
      // uncomment below and update the code to test the property taxBase
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property indicativeTaxRate (base name: "indicativeTaxRate")', function() {
      // uncomment below and update the code to test the property indicativeTaxRate
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property indicativeTax (base name: "indicativeTax")', function() {
      // uncomment below and update the code to test the property indicativeTax
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedTax (base name: "unrealisedTax")', function() {
      // uncomment below and update the code to test the property unrealisedTax
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedPnl (base name: "unrealisedPnl")', function() {
      // uncomment below and update the code to test the property unrealisedPnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedPnlPcnt (base name: "unrealisedPnlPcnt")', function() {
      // uncomment below and update the code to test the property unrealisedPnlPcnt
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedRoePcnt (base name: "unrealisedRoePcnt")', function() {
      // uncomment below and update the code to test the property unrealisedRoePcnt
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property simpleQty (base name: "simpleQty")', function() {
      // uncomment below and update the code to test the property simpleQty
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property simpleCost (base name: "simpleCost")', function() {
      // uncomment below and update the code to test the property simpleCost
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property simpleValue (base name: "simpleValue")', function() {
      // uncomment below and update the code to test the property simpleValue
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property simplePnl (base name: "simplePnl")', function() {
      // uncomment below and update the code to test the property simplePnl
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property simplePnlPcnt (base name: "simplePnlPcnt")', function() {
      // uncomment below and update the code to test the property simplePnlPcnt
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property avgCostPrice (base name: "avgCostPrice")', function() {
      // uncomment below and update the code to test the property avgCostPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property avgEntryPrice (base name: "avgEntryPrice")', function() {
      // uncomment below and update the code to test the property avgEntryPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property breakEvenPrice (base name: "breakEvenPrice")', function() {
      // uncomment below and update the code to test the property breakEvenPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property marginCallPrice (base name: "marginCallPrice")', function() {
      // uncomment below and update the code to test the property marginCallPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property liquidationPrice (base name: "liquidationPrice")', function() {
      // uncomment below and update the code to test the property liquidationPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property bankruptPrice (base name: "bankruptPrice")', function() {
      // uncomment below and update the code to test the property bankruptPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property lastPrice (base name: "lastPrice")', function() {
      // uncomment below and update the code to test the property lastPrice
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

    it('should have the property lastValue (base name: "lastValue")', function() {
      // uncomment below and update the code to test the property lastValue
      //var instance = new BitMexApi.Position();
      //expect(instance).to.be();
    });

  });

}));
