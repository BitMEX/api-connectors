#import <Foundation/Foundation.h>
#import "SWGAPIKey.h"
#import "SWGError.h"
#import "SWGInlineResponse200.h"
#import "SWGApi.h"

/**
* BitMEX API
* ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
*
* OpenAPI spec version: 1.2.0
* Contact: support@bitmex.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGAPIKeyApi: NSObject <SWGApi>

extern NSString* kSWGAPIKeyApiErrorDomain;
extern NSInteger kSWGAPIKeyApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Disable an API Key.
/// 
///
/// @param apiKeyID API Key ID (public component).
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return SWGAPIKey*
-(NSURLSessionTask*) aPIKeyDisableWithApiKeyID: (NSString*) apiKeyID
    completionHandler: (void (^)(SWGAPIKey* output, NSError* error)) handler;


/// Enable an API Key.
/// 
///
/// @param apiKeyID API Key ID (public component).
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return SWGAPIKey*
-(NSURLSessionTask*) aPIKeyEnableWithApiKeyID: (NSString*) apiKeyID
    completionHandler: (void (^)(SWGAPIKey* output, NSError* error)) handler;


/// Get your API Keys.
/// 
///
/// @param reverse If true, will sort results newest first. (optional) (default to false)
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return NSArray<SWGAPIKey>*
-(NSURLSessionTask*) aPIKeyGetWithReverse: (NSNumber*) reverse
    completionHandler: (void (^)(NSArray<SWGAPIKey>* output, NSError* error)) handler;


/// Create a new API Key.
/// API Keys can only be created via the frontend.
///
/// @param name Key name. This name is for reference only. (optional)
/// @param cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)
/// @param permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;orderCancel\&quot;, \&quot;withdraw\&quot;]. (optional)
/// @param enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional) (default to false)
/// @param token OTP Token (YubiKey, Google Authenticator) (optional)
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return SWGAPIKey*
-(NSURLSessionTask*) aPIKeyNewWithName: (NSString*) name
    cidr: (NSString*) cidr
    permissions: (NSString*) permissions
    enabled: (NSNumber*) enabled
    token: (NSString*) token
    completionHandler: (void (^)(SWGAPIKey* output, NSError* error)) handler;


/// Remove an API Key.
/// 
///
/// @param apiKeyID API Key ID (public component).
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return SWGInlineResponse200*
-(NSURLSessionTask*) aPIKeyRemoveWithApiKeyID: (NSString*) apiKeyID
    completionHandler: (void (^)(SWGInlineResponse200* output, NSError* error)) handler;



@end
