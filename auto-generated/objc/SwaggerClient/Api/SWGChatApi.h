#import <Foundation/Foundation.h>
#import "SWGChat.h"
#import "SWGChatChannel.h"
#import "SWGConnectedUsers.h"
#import "SWGError.h"
#import "SWGApi.h"

/**
* BitMEX API
* ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
*
* OpenAPI spec version: 1.2.0
* Contact: support@bitmex.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGChatApi: NSObject <SWGApi>

extern NSString* kSWGChatApiErrorDomain;
extern NSInteger kSWGChatApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Get chat messages.
/// 
///
/// @param count Number of results to fetch. (optional) (default to 100)
/// @param start Starting ID for results. (optional) (default to 0)
/// @param reverse If true, will sort results newest first. (optional) (default to true)
/// @param channelID Channel id. GET /chat/channels for ids. Leave blank for all. (optional)
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return NSArray<SWGChat>*
-(NSURLSessionTask*) chatGetWithCount: (NSNumber*) count
    start: (NSNumber*) start
    reverse: (NSNumber*) reverse
    channelID: (NSNumber*) channelID
    completionHandler: (void (^)(NSArray<SWGChat>* output, NSError* error)) handler;


/// Get available channels.
/// 
///
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return NSArray<SWGChatChannel>*
-(NSURLSessionTask*) chatGetChannelsWithCompletionHandler: 
    (void (^)(NSArray<SWGChatChannel>* output, NSError* error)) handler;


/// Get connected users.
/// Returns an array with browser users in the first position and API users (bots) in the second position.
///
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return SWGConnectedUsers*
-(NSURLSessionTask*) chatGetConnectedWithCompletionHandler: 
    (void (^)(SWGConnectedUsers* output, NSError* error)) handler;


/// Send a chat message.
/// 
///
/// @param message 
/// @param channelID Channel to post to. Default 1 (English). (optional) (default to 1)
/// 
///  code:200 message:"Request was successful",
///  code:400 message:"Parameter Error",
///  code:401 message:"Unauthorized",
///  code:404 message:"Not Found"
///
/// @return SWGChat*
-(NSURLSessionTask*) chatNewWithMessage: (NSString*) message
    channelID: (NSNumber*) channelID
    completionHandler: (void (^)(SWGChat* output, NSError* error)) handler;



@end
