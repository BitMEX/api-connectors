<?php
/**
 * Position
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Position Class Doc Comment
 *
 * @category Class
 * @description Summary of Open and Closed Positions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Position implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Position';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => 'float',
        'symbol' => 'string',
        'currency' => 'string',
        'underlying' => 'string',
        'quote_currency' => 'string',
        'commission' => 'double',
        'init_margin_req' => 'double',
        'maint_margin_req' => 'double',
        'risk_limit' => 'float',
        'leverage' => 'double',
        'cross_margin' => 'bool',
        'deleverage_percentile' => 'double',
        'rebalanced_pnl' => 'float',
        'prev_realised_pnl' => 'float',
        'prev_unrealised_pnl' => 'float',
        'prev_close_price' => 'double',
        'opening_timestamp' => '\DateTime',
        'opening_qty' => 'float',
        'opening_cost' => 'float',
        'opening_comm' => 'float',
        'open_order_buy_qty' => 'float',
        'open_order_buy_cost' => 'float',
        'open_order_buy_premium' => 'float',
        'open_order_sell_qty' => 'float',
        'open_order_sell_cost' => 'float',
        'open_order_sell_premium' => 'float',
        'exec_buy_qty' => 'float',
        'exec_buy_cost' => 'float',
        'exec_sell_qty' => 'float',
        'exec_sell_cost' => 'float',
        'exec_qty' => 'float',
        'exec_cost' => 'float',
        'exec_comm' => 'float',
        'current_timestamp' => '\DateTime',
        'current_qty' => 'float',
        'current_cost' => 'float',
        'current_comm' => 'float',
        'realised_cost' => 'float',
        'unrealised_cost' => 'float',
        'gross_open_cost' => 'float',
        'gross_open_premium' => 'float',
        'gross_exec_cost' => 'float',
        'is_open' => 'bool',
        'mark_price' => 'double',
        'mark_value' => 'float',
        'risk_value' => 'float',
        'home_notional' => 'double',
        'foreign_notional' => 'double',
        'pos_state' => 'string',
        'pos_cost' => 'float',
        'pos_cost2' => 'float',
        'pos_cross' => 'float',
        'pos_init' => 'float',
        'pos_comm' => 'float',
        'pos_loss' => 'float',
        'pos_margin' => 'float',
        'pos_maint' => 'float',
        'pos_allowance' => 'float',
        'taxable_margin' => 'float',
        'init_margin' => 'float',
        'maint_margin' => 'float',
        'session_margin' => 'float',
        'target_excess_margin' => 'float',
        'var_margin' => 'float',
        'realised_gross_pnl' => 'float',
        'realised_tax' => 'float',
        'realised_pnl' => 'float',
        'unrealised_gross_pnl' => 'float',
        'long_bankrupt' => 'float',
        'short_bankrupt' => 'float',
        'tax_base' => 'float',
        'indicative_tax_rate' => 'double',
        'indicative_tax' => 'float',
        'unrealised_tax' => 'float',
        'unrealised_pnl' => 'float',
        'unrealised_pnl_pcnt' => 'double',
        'unrealised_roe_pcnt' => 'double',
        'simple_qty' => 'double',
        'simple_cost' => 'double',
        'simple_value' => 'double',
        'simple_pnl' => 'double',
        'simple_pnl_pcnt' => 'double',
        'avg_cost_price' => 'double',
        'avg_entry_price' => 'double',
        'break_even_price' => 'double',
        'margin_call_price' => 'double',
        'liquidation_price' => 'double',
        'bankrupt_price' => 'double',
        'timestamp' => '\DateTime',
        'last_price' => 'double',
        'last_value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => 'int64',
        'symbol' => null,
        'currency' => null,
        'underlying' => null,
        'quote_currency' => null,
        'commission' => 'double',
        'init_margin_req' => 'double',
        'maint_margin_req' => 'double',
        'risk_limit' => 'int64',
        'leverage' => 'double',
        'cross_margin' => null,
        'deleverage_percentile' => 'double',
        'rebalanced_pnl' => 'int64',
        'prev_realised_pnl' => 'int64',
        'prev_unrealised_pnl' => 'int64',
        'prev_close_price' => 'double',
        'opening_timestamp' => 'date-time',
        'opening_qty' => 'int64',
        'opening_cost' => 'int64',
        'opening_comm' => 'int64',
        'open_order_buy_qty' => 'int64',
        'open_order_buy_cost' => 'int64',
        'open_order_buy_premium' => 'int64',
        'open_order_sell_qty' => 'int64',
        'open_order_sell_cost' => 'int64',
        'open_order_sell_premium' => 'int64',
        'exec_buy_qty' => 'int64',
        'exec_buy_cost' => 'int64',
        'exec_sell_qty' => 'int64',
        'exec_sell_cost' => 'int64',
        'exec_qty' => 'int64',
        'exec_cost' => 'int64',
        'exec_comm' => 'int64',
        'current_timestamp' => 'date-time',
        'current_qty' => 'int64',
        'current_cost' => 'int64',
        'current_comm' => 'int64',
        'realised_cost' => 'int64',
        'unrealised_cost' => 'int64',
        'gross_open_cost' => 'int64',
        'gross_open_premium' => 'int64',
        'gross_exec_cost' => 'int64',
        'is_open' => null,
        'mark_price' => 'double',
        'mark_value' => 'int64',
        'risk_value' => 'int64',
        'home_notional' => 'double',
        'foreign_notional' => 'double',
        'pos_state' => null,
        'pos_cost' => 'int64',
        'pos_cost2' => 'int64',
        'pos_cross' => 'int64',
        'pos_init' => 'int64',
        'pos_comm' => 'int64',
        'pos_loss' => 'int64',
        'pos_margin' => 'int64',
        'pos_maint' => 'int64',
        'pos_allowance' => 'int64',
        'taxable_margin' => 'int64',
        'init_margin' => 'int64',
        'maint_margin' => 'int64',
        'session_margin' => 'int64',
        'target_excess_margin' => 'int64',
        'var_margin' => 'int64',
        'realised_gross_pnl' => 'int64',
        'realised_tax' => 'int64',
        'realised_pnl' => 'int64',
        'unrealised_gross_pnl' => 'int64',
        'long_bankrupt' => 'int64',
        'short_bankrupt' => 'int64',
        'tax_base' => 'int64',
        'indicative_tax_rate' => 'double',
        'indicative_tax' => 'int64',
        'unrealised_tax' => 'int64',
        'unrealised_pnl' => 'int64',
        'unrealised_pnl_pcnt' => 'double',
        'unrealised_roe_pcnt' => 'double',
        'simple_qty' => 'double',
        'simple_cost' => 'double',
        'simple_value' => 'double',
        'simple_pnl' => 'double',
        'simple_pnl_pcnt' => 'double',
        'avg_cost_price' => 'double',
        'avg_entry_price' => 'double',
        'break_even_price' => 'double',
        'margin_call_price' => 'double',
        'liquidation_price' => 'double',
        'bankrupt_price' => 'double',
        'timestamp' => 'date-time',
        'last_price' => 'double',
        'last_value' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'symbol' => 'symbol',
        'currency' => 'currency',
        'underlying' => 'underlying',
        'quote_currency' => 'quoteCurrency',
        'commission' => 'commission',
        'init_margin_req' => 'initMarginReq',
        'maint_margin_req' => 'maintMarginReq',
        'risk_limit' => 'riskLimit',
        'leverage' => 'leverage',
        'cross_margin' => 'crossMargin',
        'deleverage_percentile' => 'deleveragePercentile',
        'rebalanced_pnl' => 'rebalancedPnl',
        'prev_realised_pnl' => 'prevRealisedPnl',
        'prev_unrealised_pnl' => 'prevUnrealisedPnl',
        'prev_close_price' => 'prevClosePrice',
        'opening_timestamp' => 'openingTimestamp',
        'opening_qty' => 'openingQty',
        'opening_cost' => 'openingCost',
        'opening_comm' => 'openingComm',
        'open_order_buy_qty' => 'openOrderBuyQty',
        'open_order_buy_cost' => 'openOrderBuyCost',
        'open_order_buy_premium' => 'openOrderBuyPremium',
        'open_order_sell_qty' => 'openOrderSellQty',
        'open_order_sell_cost' => 'openOrderSellCost',
        'open_order_sell_premium' => 'openOrderSellPremium',
        'exec_buy_qty' => 'execBuyQty',
        'exec_buy_cost' => 'execBuyCost',
        'exec_sell_qty' => 'execSellQty',
        'exec_sell_cost' => 'execSellCost',
        'exec_qty' => 'execQty',
        'exec_cost' => 'execCost',
        'exec_comm' => 'execComm',
        'current_timestamp' => 'currentTimestamp',
        'current_qty' => 'currentQty',
        'current_cost' => 'currentCost',
        'current_comm' => 'currentComm',
        'realised_cost' => 'realisedCost',
        'unrealised_cost' => 'unrealisedCost',
        'gross_open_cost' => 'grossOpenCost',
        'gross_open_premium' => 'grossOpenPremium',
        'gross_exec_cost' => 'grossExecCost',
        'is_open' => 'isOpen',
        'mark_price' => 'markPrice',
        'mark_value' => 'markValue',
        'risk_value' => 'riskValue',
        'home_notional' => 'homeNotional',
        'foreign_notional' => 'foreignNotional',
        'pos_state' => 'posState',
        'pos_cost' => 'posCost',
        'pos_cost2' => 'posCost2',
        'pos_cross' => 'posCross',
        'pos_init' => 'posInit',
        'pos_comm' => 'posComm',
        'pos_loss' => 'posLoss',
        'pos_margin' => 'posMargin',
        'pos_maint' => 'posMaint',
        'pos_allowance' => 'posAllowance',
        'taxable_margin' => 'taxableMargin',
        'init_margin' => 'initMargin',
        'maint_margin' => 'maintMargin',
        'session_margin' => 'sessionMargin',
        'target_excess_margin' => 'targetExcessMargin',
        'var_margin' => 'varMargin',
        'realised_gross_pnl' => 'realisedGrossPnl',
        'realised_tax' => 'realisedTax',
        'realised_pnl' => 'realisedPnl',
        'unrealised_gross_pnl' => 'unrealisedGrossPnl',
        'long_bankrupt' => 'longBankrupt',
        'short_bankrupt' => 'shortBankrupt',
        'tax_base' => 'taxBase',
        'indicative_tax_rate' => 'indicativeTaxRate',
        'indicative_tax' => 'indicativeTax',
        'unrealised_tax' => 'unrealisedTax',
        'unrealised_pnl' => 'unrealisedPnl',
        'unrealised_pnl_pcnt' => 'unrealisedPnlPcnt',
        'unrealised_roe_pcnt' => 'unrealisedRoePcnt',
        'simple_qty' => 'simpleQty',
        'simple_cost' => 'simpleCost',
        'simple_value' => 'simpleValue',
        'simple_pnl' => 'simplePnl',
        'simple_pnl_pcnt' => 'simplePnlPcnt',
        'avg_cost_price' => 'avgCostPrice',
        'avg_entry_price' => 'avgEntryPrice',
        'break_even_price' => 'breakEvenPrice',
        'margin_call_price' => 'marginCallPrice',
        'liquidation_price' => 'liquidationPrice',
        'bankrupt_price' => 'bankruptPrice',
        'timestamp' => 'timestamp',
        'last_price' => 'lastPrice',
        'last_value' => 'lastValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'symbol' => 'setSymbol',
        'currency' => 'setCurrency',
        'underlying' => 'setUnderlying',
        'quote_currency' => 'setQuoteCurrency',
        'commission' => 'setCommission',
        'init_margin_req' => 'setInitMarginReq',
        'maint_margin_req' => 'setMaintMarginReq',
        'risk_limit' => 'setRiskLimit',
        'leverage' => 'setLeverage',
        'cross_margin' => 'setCrossMargin',
        'deleverage_percentile' => 'setDeleveragePercentile',
        'rebalanced_pnl' => 'setRebalancedPnl',
        'prev_realised_pnl' => 'setPrevRealisedPnl',
        'prev_unrealised_pnl' => 'setPrevUnrealisedPnl',
        'prev_close_price' => 'setPrevClosePrice',
        'opening_timestamp' => 'setOpeningTimestamp',
        'opening_qty' => 'setOpeningQty',
        'opening_cost' => 'setOpeningCost',
        'opening_comm' => 'setOpeningComm',
        'open_order_buy_qty' => 'setOpenOrderBuyQty',
        'open_order_buy_cost' => 'setOpenOrderBuyCost',
        'open_order_buy_premium' => 'setOpenOrderBuyPremium',
        'open_order_sell_qty' => 'setOpenOrderSellQty',
        'open_order_sell_cost' => 'setOpenOrderSellCost',
        'open_order_sell_premium' => 'setOpenOrderSellPremium',
        'exec_buy_qty' => 'setExecBuyQty',
        'exec_buy_cost' => 'setExecBuyCost',
        'exec_sell_qty' => 'setExecSellQty',
        'exec_sell_cost' => 'setExecSellCost',
        'exec_qty' => 'setExecQty',
        'exec_cost' => 'setExecCost',
        'exec_comm' => 'setExecComm',
        'current_timestamp' => 'setCurrentTimestamp',
        'current_qty' => 'setCurrentQty',
        'current_cost' => 'setCurrentCost',
        'current_comm' => 'setCurrentComm',
        'realised_cost' => 'setRealisedCost',
        'unrealised_cost' => 'setUnrealisedCost',
        'gross_open_cost' => 'setGrossOpenCost',
        'gross_open_premium' => 'setGrossOpenPremium',
        'gross_exec_cost' => 'setGrossExecCost',
        'is_open' => 'setIsOpen',
        'mark_price' => 'setMarkPrice',
        'mark_value' => 'setMarkValue',
        'risk_value' => 'setRiskValue',
        'home_notional' => 'setHomeNotional',
        'foreign_notional' => 'setForeignNotional',
        'pos_state' => 'setPosState',
        'pos_cost' => 'setPosCost',
        'pos_cost2' => 'setPosCost2',
        'pos_cross' => 'setPosCross',
        'pos_init' => 'setPosInit',
        'pos_comm' => 'setPosComm',
        'pos_loss' => 'setPosLoss',
        'pos_margin' => 'setPosMargin',
        'pos_maint' => 'setPosMaint',
        'pos_allowance' => 'setPosAllowance',
        'taxable_margin' => 'setTaxableMargin',
        'init_margin' => 'setInitMargin',
        'maint_margin' => 'setMaintMargin',
        'session_margin' => 'setSessionMargin',
        'target_excess_margin' => 'setTargetExcessMargin',
        'var_margin' => 'setVarMargin',
        'realised_gross_pnl' => 'setRealisedGrossPnl',
        'realised_tax' => 'setRealisedTax',
        'realised_pnl' => 'setRealisedPnl',
        'unrealised_gross_pnl' => 'setUnrealisedGrossPnl',
        'long_bankrupt' => 'setLongBankrupt',
        'short_bankrupt' => 'setShortBankrupt',
        'tax_base' => 'setTaxBase',
        'indicative_tax_rate' => 'setIndicativeTaxRate',
        'indicative_tax' => 'setIndicativeTax',
        'unrealised_tax' => 'setUnrealisedTax',
        'unrealised_pnl' => 'setUnrealisedPnl',
        'unrealised_pnl_pcnt' => 'setUnrealisedPnlPcnt',
        'unrealised_roe_pcnt' => 'setUnrealisedRoePcnt',
        'simple_qty' => 'setSimpleQty',
        'simple_cost' => 'setSimpleCost',
        'simple_value' => 'setSimpleValue',
        'simple_pnl' => 'setSimplePnl',
        'simple_pnl_pcnt' => 'setSimplePnlPcnt',
        'avg_cost_price' => 'setAvgCostPrice',
        'avg_entry_price' => 'setAvgEntryPrice',
        'break_even_price' => 'setBreakEvenPrice',
        'margin_call_price' => 'setMarginCallPrice',
        'liquidation_price' => 'setLiquidationPrice',
        'bankrupt_price' => 'setBankruptPrice',
        'timestamp' => 'setTimestamp',
        'last_price' => 'setLastPrice',
        'last_value' => 'setLastValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'symbol' => 'getSymbol',
        'currency' => 'getCurrency',
        'underlying' => 'getUnderlying',
        'quote_currency' => 'getQuoteCurrency',
        'commission' => 'getCommission',
        'init_margin_req' => 'getInitMarginReq',
        'maint_margin_req' => 'getMaintMarginReq',
        'risk_limit' => 'getRiskLimit',
        'leverage' => 'getLeverage',
        'cross_margin' => 'getCrossMargin',
        'deleverage_percentile' => 'getDeleveragePercentile',
        'rebalanced_pnl' => 'getRebalancedPnl',
        'prev_realised_pnl' => 'getPrevRealisedPnl',
        'prev_unrealised_pnl' => 'getPrevUnrealisedPnl',
        'prev_close_price' => 'getPrevClosePrice',
        'opening_timestamp' => 'getOpeningTimestamp',
        'opening_qty' => 'getOpeningQty',
        'opening_cost' => 'getOpeningCost',
        'opening_comm' => 'getOpeningComm',
        'open_order_buy_qty' => 'getOpenOrderBuyQty',
        'open_order_buy_cost' => 'getOpenOrderBuyCost',
        'open_order_buy_premium' => 'getOpenOrderBuyPremium',
        'open_order_sell_qty' => 'getOpenOrderSellQty',
        'open_order_sell_cost' => 'getOpenOrderSellCost',
        'open_order_sell_premium' => 'getOpenOrderSellPremium',
        'exec_buy_qty' => 'getExecBuyQty',
        'exec_buy_cost' => 'getExecBuyCost',
        'exec_sell_qty' => 'getExecSellQty',
        'exec_sell_cost' => 'getExecSellCost',
        'exec_qty' => 'getExecQty',
        'exec_cost' => 'getExecCost',
        'exec_comm' => 'getExecComm',
        'current_timestamp' => 'getCurrentTimestamp',
        'current_qty' => 'getCurrentQty',
        'current_cost' => 'getCurrentCost',
        'current_comm' => 'getCurrentComm',
        'realised_cost' => 'getRealisedCost',
        'unrealised_cost' => 'getUnrealisedCost',
        'gross_open_cost' => 'getGrossOpenCost',
        'gross_open_premium' => 'getGrossOpenPremium',
        'gross_exec_cost' => 'getGrossExecCost',
        'is_open' => 'getIsOpen',
        'mark_price' => 'getMarkPrice',
        'mark_value' => 'getMarkValue',
        'risk_value' => 'getRiskValue',
        'home_notional' => 'getHomeNotional',
        'foreign_notional' => 'getForeignNotional',
        'pos_state' => 'getPosState',
        'pos_cost' => 'getPosCost',
        'pos_cost2' => 'getPosCost2',
        'pos_cross' => 'getPosCross',
        'pos_init' => 'getPosInit',
        'pos_comm' => 'getPosComm',
        'pos_loss' => 'getPosLoss',
        'pos_margin' => 'getPosMargin',
        'pos_maint' => 'getPosMaint',
        'pos_allowance' => 'getPosAllowance',
        'taxable_margin' => 'getTaxableMargin',
        'init_margin' => 'getInitMargin',
        'maint_margin' => 'getMaintMargin',
        'session_margin' => 'getSessionMargin',
        'target_excess_margin' => 'getTargetExcessMargin',
        'var_margin' => 'getVarMargin',
        'realised_gross_pnl' => 'getRealisedGrossPnl',
        'realised_tax' => 'getRealisedTax',
        'realised_pnl' => 'getRealisedPnl',
        'unrealised_gross_pnl' => 'getUnrealisedGrossPnl',
        'long_bankrupt' => 'getLongBankrupt',
        'short_bankrupt' => 'getShortBankrupt',
        'tax_base' => 'getTaxBase',
        'indicative_tax_rate' => 'getIndicativeTaxRate',
        'indicative_tax' => 'getIndicativeTax',
        'unrealised_tax' => 'getUnrealisedTax',
        'unrealised_pnl' => 'getUnrealisedPnl',
        'unrealised_pnl_pcnt' => 'getUnrealisedPnlPcnt',
        'unrealised_roe_pcnt' => 'getUnrealisedRoePcnt',
        'simple_qty' => 'getSimpleQty',
        'simple_cost' => 'getSimpleCost',
        'simple_value' => 'getSimpleValue',
        'simple_pnl' => 'getSimplePnl',
        'simple_pnl_pcnt' => 'getSimplePnlPcnt',
        'avg_cost_price' => 'getAvgCostPrice',
        'avg_entry_price' => 'getAvgEntryPrice',
        'break_even_price' => 'getBreakEvenPrice',
        'margin_call_price' => 'getMarginCallPrice',
        'liquidation_price' => 'getLiquidationPrice',
        'bankrupt_price' => 'getBankruptPrice',
        'timestamp' => 'getTimestamp',
        'last_price' => 'getLastPrice',
        'last_value' => 'getLastValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['underlying'] = isset($data['underlying']) ? $data['underlying'] : null;
        $this->container['quote_currency'] = isset($data['quote_currency']) ? $data['quote_currency'] : null;
        $this->container['commission'] = isset($data['commission']) ? $data['commission'] : 0.0;
        $this->container['init_margin_req'] = isset($data['init_margin_req']) ? $data['init_margin_req'] : 0.0;
        $this->container['maint_margin_req'] = isset($data['maint_margin_req']) ? $data['maint_margin_req'] : 0.0;
        $this->container['risk_limit'] = isset($data['risk_limit']) ? $data['risk_limit'] : null;
        $this->container['leverage'] = isset($data['leverage']) ? $data['leverage'] : 0.0;
        $this->container['cross_margin'] = isset($data['cross_margin']) ? $data['cross_margin'] : null;
        $this->container['deleverage_percentile'] = isset($data['deleverage_percentile']) ? $data['deleverage_percentile'] : 0.0;
        $this->container['rebalanced_pnl'] = isset($data['rebalanced_pnl']) ? $data['rebalanced_pnl'] : null;
        $this->container['prev_realised_pnl'] = isset($data['prev_realised_pnl']) ? $data['prev_realised_pnl'] : null;
        $this->container['prev_unrealised_pnl'] = isset($data['prev_unrealised_pnl']) ? $data['prev_unrealised_pnl'] : null;
        $this->container['prev_close_price'] = isset($data['prev_close_price']) ? $data['prev_close_price'] : 0.0;
        $this->container['opening_timestamp'] = isset($data['opening_timestamp']) ? $data['opening_timestamp'] : null;
        $this->container['opening_qty'] = isset($data['opening_qty']) ? $data['opening_qty'] : null;
        $this->container['opening_cost'] = isset($data['opening_cost']) ? $data['opening_cost'] : null;
        $this->container['opening_comm'] = isset($data['opening_comm']) ? $data['opening_comm'] : null;
        $this->container['open_order_buy_qty'] = isset($data['open_order_buy_qty']) ? $data['open_order_buy_qty'] : null;
        $this->container['open_order_buy_cost'] = isset($data['open_order_buy_cost']) ? $data['open_order_buy_cost'] : null;
        $this->container['open_order_buy_premium'] = isset($data['open_order_buy_premium']) ? $data['open_order_buy_premium'] : null;
        $this->container['open_order_sell_qty'] = isset($data['open_order_sell_qty']) ? $data['open_order_sell_qty'] : null;
        $this->container['open_order_sell_cost'] = isset($data['open_order_sell_cost']) ? $data['open_order_sell_cost'] : null;
        $this->container['open_order_sell_premium'] = isset($data['open_order_sell_premium']) ? $data['open_order_sell_premium'] : null;
        $this->container['exec_buy_qty'] = isset($data['exec_buy_qty']) ? $data['exec_buy_qty'] : null;
        $this->container['exec_buy_cost'] = isset($data['exec_buy_cost']) ? $data['exec_buy_cost'] : null;
        $this->container['exec_sell_qty'] = isset($data['exec_sell_qty']) ? $data['exec_sell_qty'] : null;
        $this->container['exec_sell_cost'] = isset($data['exec_sell_cost']) ? $data['exec_sell_cost'] : null;
        $this->container['exec_qty'] = isset($data['exec_qty']) ? $data['exec_qty'] : null;
        $this->container['exec_cost'] = isset($data['exec_cost']) ? $data['exec_cost'] : null;
        $this->container['exec_comm'] = isset($data['exec_comm']) ? $data['exec_comm'] : null;
        $this->container['current_timestamp'] = isset($data['current_timestamp']) ? $data['current_timestamp'] : null;
        $this->container['current_qty'] = isset($data['current_qty']) ? $data['current_qty'] : null;
        $this->container['current_cost'] = isset($data['current_cost']) ? $data['current_cost'] : null;
        $this->container['current_comm'] = isset($data['current_comm']) ? $data['current_comm'] : null;
        $this->container['realised_cost'] = isset($data['realised_cost']) ? $data['realised_cost'] : null;
        $this->container['unrealised_cost'] = isset($data['unrealised_cost']) ? $data['unrealised_cost'] : null;
        $this->container['gross_open_cost'] = isset($data['gross_open_cost']) ? $data['gross_open_cost'] : null;
        $this->container['gross_open_premium'] = isset($data['gross_open_premium']) ? $data['gross_open_premium'] : null;
        $this->container['gross_exec_cost'] = isset($data['gross_exec_cost']) ? $data['gross_exec_cost'] : null;
        $this->container['is_open'] = isset($data['is_open']) ? $data['is_open'] : null;
        $this->container['mark_price'] = isset($data['mark_price']) ? $data['mark_price'] : 0.0;
        $this->container['mark_value'] = isset($data['mark_value']) ? $data['mark_value'] : null;
        $this->container['risk_value'] = isset($data['risk_value']) ? $data['risk_value'] : null;
        $this->container['home_notional'] = isset($data['home_notional']) ? $data['home_notional'] : 0.0;
        $this->container['foreign_notional'] = isset($data['foreign_notional']) ? $data['foreign_notional'] : 0.0;
        $this->container['pos_state'] = isset($data['pos_state']) ? $data['pos_state'] : null;
        $this->container['pos_cost'] = isset($data['pos_cost']) ? $data['pos_cost'] : null;
        $this->container['pos_cost2'] = isset($data['pos_cost2']) ? $data['pos_cost2'] : null;
        $this->container['pos_cross'] = isset($data['pos_cross']) ? $data['pos_cross'] : null;
        $this->container['pos_init'] = isset($data['pos_init']) ? $data['pos_init'] : null;
        $this->container['pos_comm'] = isset($data['pos_comm']) ? $data['pos_comm'] : null;
        $this->container['pos_loss'] = isset($data['pos_loss']) ? $data['pos_loss'] : null;
        $this->container['pos_margin'] = isset($data['pos_margin']) ? $data['pos_margin'] : null;
        $this->container['pos_maint'] = isset($data['pos_maint']) ? $data['pos_maint'] : null;
        $this->container['pos_allowance'] = isset($data['pos_allowance']) ? $data['pos_allowance'] : null;
        $this->container['taxable_margin'] = isset($data['taxable_margin']) ? $data['taxable_margin'] : null;
        $this->container['init_margin'] = isset($data['init_margin']) ? $data['init_margin'] : null;
        $this->container['maint_margin'] = isset($data['maint_margin']) ? $data['maint_margin'] : null;
        $this->container['session_margin'] = isset($data['session_margin']) ? $data['session_margin'] : null;
        $this->container['target_excess_margin'] = isset($data['target_excess_margin']) ? $data['target_excess_margin'] : null;
        $this->container['var_margin'] = isset($data['var_margin']) ? $data['var_margin'] : null;
        $this->container['realised_gross_pnl'] = isset($data['realised_gross_pnl']) ? $data['realised_gross_pnl'] : null;
        $this->container['realised_tax'] = isset($data['realised_tax']) ? $data['realised_tax'] : null;
        $this->container['realised_pnl'] = isset($data['realised_pnl']) ? $data['realised_pnl'] : null;
        $this->container['unrealised_gross_pnl'] = isset($data['unrealised_gross_pnl']) ? $data['unrealised_gross_pnl'] : null;
        $this->container['long_bankrupt'] = isset($data['long_bankrupt']) ? $data['long_bankrupt'] : null;
        $this->container['short_bankrupt'] = isset($data['short_bankrupt']) ? $data['short_bankrupt'] : null;
        $this->container['tax_base'] = isset($data['tax_base']) ? $data['tax_base'] : null;
        $this->container['indicative_tax_rate'] = isset($data['indicative_tax_rate']) ? $data['indicative_tax_rate'] : 0.0;
        $this->container['indicative_tax'] = isset($data['indicative_tax']) ? $data['indicative_tax'] : null;
        $this->container['unrealised_tax'] = isset($data['unrealised_tax']) ? $data['unrealised_tax'] : null;
        $this->container['unrealised_pnl'] = isset($data['unrealised_pnl']) ? $data['unrealised_pnl'] : null;
        $this->container['unrealised_pnl_pcnt'] = isset($data['unrealised_pnl_pcnt']) ? $data['unrealised_pnl_pcnt'] : 0.0;
        $this->container['unrealised_roe_pcnt'] = isset($data['unrealised_roe_pcnt']) ? $data['unrealised_roe_pcnt'] : 0.0;
        $this->container['simple_qty'] = isset($data['simple_qty']) ? $data['simple_qty'] : 0.0;
        $this->container['simple_cost'] = isset($data['simple_cost']) ? $data['simple_cost'] : 0.0;
        $this->container['simple_value'] = isset($data['simple_value']) ? $data['simple_value'] : 0.0;
        $this->container['simple_pnl'] = isset($data['simple_pnl']) ? $data['simple_pnl'] : 0.0;
        $this->container['simple_pnl_pcnt'] = isset($data['simple_pnl_pcnt']) ? $data['simple_pnl_pcnt'] : 0.0;
        $this->container['avg_cost_price'] = isset($data['avg_cost_price']) ? $data['avg_cost_price'] : 0.0;
        $this->container['avg_entry_price'] = isset($data['avg_entry_price']) ? $data['avg_entry_price'] : 0.0;
        $this->container['break_even_price'] = isset($data['break_even_price']) ? $data['break_even_price'] : 0.0;
        $this->container['margin_call_price'] = isset($data['margin_call_price']) ? $data['margin_call_price'] : 0.0;
        $this->container['liquidation_price'] = isset($data['liquidation_price']) ? $data['liquidation_price'] : 0.0;
        $this->container['bankrupt_price'] = isset($data['bankrupt_price']) ? $data['bankrupt_price'] : 0.0;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : 0.0;
        $this->container['last_value'] = isset($data['last_value']) ? $data['last_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return float
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param float $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets underlying
     *
     * @return string
     */
    public function getUnderlying()
    {
        return $this->container['underlying'];
    }

    /**
     * Sets underlying
     *
     * @param string $underlying underlying
     *
     * @return $this
     */
    public function setUnderlying($underlying)
    {
        $this->container['underlying'] = $underlying;

        return $this;
    }

    /**
     * Gets quote_currency
     *
     * @return string
     */
    public function getQuoteCurrency()
    {
        return $this->container['quote_currency'];
    }

    /**
     * Sets quote_currency
     *
     * @param string $quote_currency quote_currency
     *
     * @return $this
     */
    public function setQuoteCurrency($quote_currency)
    {
        $this->container['quote_currency'] = $quote_currency;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return double
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param double $commission commission
     *
     * @return $this
     */
    public function setCommission($commission)
    {
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets init_margin_req
     *
     * @return double
     */
    public function getInitMarginReq()
    {
        return $this->container['init_margin_req'];
    }

    /**
     * Sets init_margin_req
     *
     * @param double $init_margin_req init_margin_req
     *
     * @return $this
     */
    public function setInitMarginReq($init_margin_req)
    {
        $this->container['init_margin_req'] = $init_margin_req;

        return $this;
    }

    /**
     * Gets maint_margin_req
     *
     * @return double
     */
    public function getMaintMarginReq()
    {
        return $this->container['maint_margin_req'];
    }

    /**
     * Sets maint_margin_req
     *
     * @param double $maint_margin_req maint_margin_req
     *
     * @return $this
     */
    public function setMaintMarginReq($maint_margin_req)
    {
        $this->container['maint_margin_req'] = $maint_margin_req;

        return $this;
    }

    /**
     * Gets risk_limit
     *
     * @return float
     */
    public function getRiskLimit()
    {
        return $this->container['risk_limit'];
    }

    /**
     * Sets risk_limit
     *
     * @param float $risk_limit risk_limit
     *
     * @return $this
     */
    public function setRiskLimit($risk_limit)
    {
        $this->container['risk_limit'] = $risk_limit;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return double
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param double $leverage leverage
     *
     * @return $this
     */
    public function setLeverage($leverage)
    {
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets cross_margin
     *
     * @return bool
     */
    public function getCrossMargin()
    {
        return $this->container['cross_margin'];
    }

    /**
     * Sets cross_margin
     *
     * @param bool $cross_margin cross_margin
     *
     * @return $this
     */
    public function setCrossMargin($cross_margin)
    {
        $this->container['cross_margin'] = $cross_margin;

        return $this;
    }

    /**
     * Gets deleverage_percentile
     *
     * @return double
     */
    public function getDeleveragePercentile()
    {
        return $this->container['deleverage_percentile'];
    }

    /**
     * Sets deleverage_percentile
     *
     * @param double $deleverage_percentile deleverage_percentile
     *
     * @return $this
     */
    public function setDeleveragePercentile($deleverage_percentile)
    {
        $this->container['deleverage_percentile'] = $deleverage_percentile;

        return $this;
    }

    /**
     * Gets rebalanced_pnl
     *
     * @return float
     */
    public function getRebalancedPnl()
    {
        return $this->container['rebalanced_pnl'];
    }

    /**
     * Sets rebalanced_pnl
     *
     * @param float $rebalanced_pnl rebalanced_pnl
     *
     * @return $this
     */
    public function setRebalancedPnl($rebalanced_pnl)
    {
        $this->container['rebalanced_pnl'] = $rebalanced_pnl;

        return $this;
    }

    /**
     * Gets prev_realised_pnl
     *
     * @return float
     */
    public function getPrevRealisedPnl()
    {
        return $this->container['prev_realised_pnl'];
    }

    /**
     * Sets prev_realised_pnl
     *
     * @param float $prev_realised_pnl prev_realised_pnl
     *
     * @return $this
     */
    public function setPrevRealisedPnl($prev_realised_pnl)
    {
        $this->container['prev_realised_pnl'] = $prev_realised_pnl;

        return $this;
    }

    /**
     * Gets prev_unrealised_pnl
     *
     * @return float
     */
    public function getPrevUnrealisedPnl()
    {
        return $this->container['prev_unrealised_pnl'];
    }

    /**
     * Sets prev_unrealised_pnl
     *
     * @param float $prev_unrealised_pnl prev_unrealised_pnl
     *
     * @return $this
     */
    public function setPrevUnrealisedPnl($prev_unrealised_pnl)
    {
        $this->container['prev_unrealised_pnl'] = $prev_unrealised_pnl;

        return $this;
    }

    /**
     * Gets prev_close_price
     *
     * @return double
     */
    public function getPrevClosePrice()
    {
        return $this->container['prev_close_price'];
    }

    /**
     * Sets prev_close_price
     *
     * @param double $prev_close_price prev_close_price
     *
     * @return $this
     */
    public function setPrevClosePrice($prev_close_price)
    {
        $this->container['prev_close_price'] = $prev_close_price;

        return $this;
    }

    /**
     * Gets opening_timestamp
     *
     * @return \DateTime
     */
    public function getOpeningTimestamp()
    {
        return $this->container['opening_timestamp'];
    }

    /**
     * Sets opening_timestamp
     *
     * @param \DateTime $opening_timestamp opening_timestamp
     *
     * @return $this
     */
    public function setOpeningTimestamp($opening_timestamp)
    {
        $this->container['opening_timestamp'] = $opening_timestamp;

        return $this;
    }

    /**
     * Gets opening_qty
     *
     * @return float
     */
    public function getOpeningQty()
    {
        return $this->container['opening_qty'];
    }

    /**
     * Sets opening_qty
     *
     * @param float $opening_qty opening_qty
     *
     * @return $this
     */
    public function setOpeningQty($opening_qty)
    {
        $this->container['opening_qty'] = $opening_qty;

        return $this;
    }

    /**
     * Gets opening_cost
     *
     * @return float
     */
    public function getOpeningCost()
    {
        return $this->container['opening_cost'];
    }

    /**
     * Sets opening_cost
     *
     * @param float $opening_cost opening_cost
     *
     * @return $this
     */
    public function setOpeningCost($opening_cost)
    {
        $this->container['opening_cost'] = $opening_cost;

        return $this;
    }

    /**
     * Gets opening_comm
     *
     * @return float
     */
    public function getOpeningComm()
    {
        return $this->container['opening_comm'];
    }

    /**
     * Sets opening_comm
     *
     * @param float $opening_comm opening_comm
     *
     * @return $this
     */
    public function setOpeningComm($opening_comm)
    {
        $this->container['opening_comm'] = $opening_comm;

        return $this;
    }

    /**
     * Gets open_order_buy_qty
     *
     * @return float
     */
    public function getOpenOrderBuyQty()
    {
        return $this->container['open_order_buy_qty'];
    }

    /**
     * Sets open_order_buy_qty
     *
     * @param float $open_order_buy_qty open_order_buy_qty
     *
     * @return $this
     */
    public function setOpenOrderBuyQty($open_order_buy_qty)
    {
        $this->container['open_order_buy_qty'] = $open_order_buy_qty;

        return $this;
    }

    /**
     * Gets open_order_buy_cost
     *
     * @return float
     */
    public function getOpenOrderBuyCost()
    {
        return $this->container['open_order_buy_cost'];
    }

    /**
     * Sets open_order_buy_cost
     *
     * @param float $open_order_buy_cost open_order_buy_cost
     *
     * @return $this
     */
    public function setOpenOrderBuyCost($open_order_buy_cost)
    {
        $this->container['open_order_buy_cost'] = $open_order_buy_cost;

        return $this;
    }

    /**
     * Gets open_order_buy_premium
     *
     * @return float
     */
    public function getOpenOrderBuyPremium()
    {
        return $this->container['open_order_buy_premium'];
    }

    /**
     * Sets open_order_buy_premium
     *
     * @param float $open_order_buy_premium open_order_buy_premium
     *
     * @return $this
     */
    public function setOpenOrderBuyPremium($open_order_buy_premium)
    {
        $this->container['open_order_buy_premium'] = $open_order_buy_premium;

        return $this;
    }

    /**
     * Gets open_order_sell_qty
     *
     * @return float
     */
    public function getOpenOrderSellQty()
    {
        return $this->container['open_order_sell_qty'];
    }

    /**
     * Sets open_order_sell_qty
     *
     * @param float $open_order_sell_qty open_order_sell_qty
     *
     * @return $this
     */
    public function setOpenOrderSellQty($open_order_sell_qty)
    {
        $this->container['open_order_sell_qty'] = $open_order_sell_qty;

        return $this;
    }

    /**
     * Gets open_order_sell_cost
     *
     * @return float
     */
    public function getOpenOrderSellCost()
    {
        return $this->container['open_order_sell_cost'];
    }

    /**
     * Sets open_order_sell_cost
     *
     * @param float $open_order_sell_cost open_order_sell_cost
     *
     * @return $this
     */
    public function setOpenOrderSellCost($open_order_sell_cost)
    {
        $this->container['open_order_sell_cost'] = $open_order_sell_cost;

        return $this;
    }

    /**
     * Gets open_order_sell_premium
     *
     * @return float
     */
    public function getOpenOrderSellPremium()
    {
        return $this->container['open_order_sell_premium'];
    }

    /**
     * Sets open_order_sell_premium
     *
     * @param float $open_order_sell_premium open_order_sell_premium
     *
     * @return $this
     */
    public function setOpenOrderSellPremium($open_order_sell_premium)
    {
        $this->container['open_order_sell_premium'] = $open_order_sell_premium;

        return $this;
    }

    /**
     * Gets exec_buy_qty
     *
     * @return float
     */
    public function getExecBuyQty()
    {
        return $this->container['exec_buy_qty'];
    }

    /**
     * Sets exec_buy_qty
     *
     * @param float $exec_buy_qty exec_buy_qty
     *
     * @return $this
     */
    public function setExecBuyQty($exec_buy_qty)
    {
        $this->container['exec_buy_qty'] = $exec_buy_qty;

        return $this;
    }

    /**
     * Gets exec_buy_cost
     *
     * @return float
     */
    public function getExecBuyCost()
    {
        return $this->container['exec_buy_cost'];
    }

    /**
     * Sets exec_buy_cost
     *
     * @param float $exec_buy_cost exec_buy_cost
     *
     * @return $this
     */
    public function setExecBuyCost($exec_buy_cost)
    {
        $this->container['exec_buy_cost'] = $exec_buy_cost;

        return $this;
    }

    /**
     * Gets exec_sell_qty
     *
     * @return float
     */
    public function getExecSellQty()
    {
        return $this->container['exec_sell_qty'];
    }

    /**
     * Sets exec_sell_qty
     *
     * @param float $exec_sell_qty exec_sell_qty
     *
     * @return $this
     */
    public function setExecSellQty($exec_sell_qty)
    {
        $this->container['exec_sell_qty'] = $exec_sell_qty;

        return $this;
    }

    /**
     * Gets exec_sell_cost
     *
     * @return float
     */
    public function getExecSellCost()
    {
        return $this->container['exec_sell_cost'];
    }

    /**
     * Sets exec_sell_cost
     *
     * @param float $exec_sell_cost exec_sell_cost
     *
     * @return $this
     */
    public function setExecSellCost($exec_sell_cost)
    {
        $this->container['exec_sell_cost'] = $exec_sell_cost;

        return $this;
    }

    /**
     * Gets exec_qty
     *
     * @return float
     */
    public function getExecQty()
    {
        return $this->container['exec_qty'];
    }

    /**
     * Sets exec_qty
     *
     * @param float $exec_qty exec_qty
     *
     * @return $this
     */
    public function setExecQty($exec_qty)
    {
        $this->container['exec_qty'] = $exec_qty;

        return $this;
    }

    /**
     * Gets exec_cost
     *
     * @return float
     */
    public function getExecCost()
    {
        return $this->container['exec_cost'];
    }

    /**
     * Sets exec_cost
     *
     * @param float $exec_cost exec_cost
     *
     * @return $this
     */
    public function setExecCost($exec_cost)
    {
        $this->container['exec_cost'] = $exec_cost;

        return $this;
    }

    /**
     * Gets exec_comm
     *
     * @return float
     */
    public function getExecComm()
    {
        return $this->container['exec_comm'];
    }

    /**
     * Sets exec_comm
     *
     * @param float $exec_comm exec_comm
     *
     * @return $this
     */
    public function setExecComm($exec_comm)
    {
        $this->container['exec_comm'] = $exec_comm;

        return $this;
    }

    /**
     * Gets current_timestamp
     *
     * @return \DateTime
     */
    public function getCurrentTimestamp()
    {
        return $this->container['current_timestamp'];
    }

    /**
     * Sets current_timestamp
     *
     * @param \DateTime $current_timestamp current_timestamp
     *
     * @return $this
     */
    public function setCurrentTimestamp($current_timestamp)
    {
        $this->container['current_timestamp'] = $current_timestamp;

        return $this;
    }

    /**
     * Gets current_qty
     *
     * @return float
     */
    public function getCurrentQty()
    {
        return $this->container['current_qty'];
    }

    /**
     * Sets current_qty
     *
     * @param float $current_qty current_qty
     *
     * @return $this
     */
    public function setCurrentQty($current_qty)
    {
        $this->container['current_qty'] = $current_qty;

        return $this;
    }

    /**
     * Gets current_cost
     *
     * @return float
     */
    public function getCurrentCost()
    {
        return $this->container['current_cost'];
    }

    /**
     * Sets current_cost
     *
     * @param float $current_cost current_cost
     *
     * @return $this
     */
    public function setCurrentCost($current_cost)
    {
        $this->container['current_cost'] = $current_cost;

        return $this;
    }

    /**
     * Gets current_comm
     *
     * @return float
     */
    public function getCurrentComm()
    {
        return $this->container['current_comm'];
    }

    /**
     * Sets current_comm
     *
     * @param float $current_comm current_comm
     *
     * @return $this
     */
    public function setCurrentComm($current_comm)
    {
        $this->container['current_comm'] = $current_comm;

        return $this;
    }

    /**
     * Gets realised_cost
     *
     * @return float
     */
    public function getRealisedCost()
    {
        return $this->container['realised_cost'];
    }

    /**
     * Sets realised_cost
     *
     * @param float $realised_cost realised_cost
     *
     * @return $this
     */
    public function setRealisedCost($realised_cost)
    {
        $this->container['realised_cost'] = $realised_cost;

        return $this;
    }

    /**
     * Gets unrealised_cost
     *
     * @return float
     */
    public function getUnrealisedCost()
    {
        return $this->container['unrealised_cost'];
    }

    /**
     * Sets unrealised_cost
     *
     * @param float $unrealised_cost unrealised_cost
     *
     * @return $this
     */
    public function setUnrealisedCost($unrealised_cost)
    {
        $this->container['unrealised_cost'] = $unrealised_cost;

        return $this;
    }

    /**
     * Gets gross_open_cost
     *
     * @return float
     */
    public function getGrossOpenCost()
    {
        return $this->container['gross_open_cost'];
    }

    /**
     * Sets gross_open_cost
     *
     * @param float $gross_open_cost gross_open_cost
     *
     * @return $this
     */
    public function setGrossOpenCost($gross_open_cost)
    {
        $this->container['gross_open_cost'] = $gross_open_cost;

        return $this;
    }

    /**
     * Gets gross_open_premium
     *
     * @return float
     */
    public function getGrossOpenPremium()
    {
        return $this->container['gross_open_premium'];
    }

    /**
     * Sets gross_open_premium
     *
     * @param float $gross_open_premium gross_open_premium
     *
     * @return $this
     */
    public function setGrossOpenPremium($gross_open_premium)
    {
        $this->container['gross_open_premium'] = $gross_open_premium;

        return $this;
    }

    /**
     * Gets gross_exec_cost
     *
     * @return float
     */
    public function getGrossExecCost()
    {
        return $this->container['gross_exec_cost'];
    }

    /**
     * Sets gross_exec_cost
     *
     * @param float $gross_exec_cost gross_exec_cost
     *
     * @return $this
     */
    public function setGrossExecCost($gross_exec_cost)
    {
        $this->container['gross_exec_cost'] = $gross_exec_cost;

        return $this;
    }

    /**
     * Gets is_open
     *
     * @return bool
     */
    public function getIsOpen()
    {
        return $this->container['is_open'];
    }

    /**
     * Sets is_open
     *
     * @param bool $is_open is_open
     *
     * @return $this
     */
    public function setIsOpen($is_open)
    {
        $this->container['is_open'] = $is_open;

        return $this;
    }

    /**
     * Gets mark_price
     *
     * @return double
     */
    public function getMarkPrice()
    {
        return $this->container['mark_price'];
    }

    /**
     * Sets mark_price
     *
     * @param double $mark_price mark_price
     *
     * @return $this
     */
    public function setMarkPrice($mark_price)
    {
        $this->container['mark_price'] = $mark_price;

        return $this;
    }

    /**
     * Gets mark_value
     *
     * @return float
     */
    public function getMarkValue()
    {
        return $this->container['mark_value'];
    }

    /**
     * Sets mark_value
     *
     * @param float $mark_value mark_value
     *
     * @return $this
     */
    public function setMarkValue($mark_value)
    {
        $this->container['mark_value'] = $mark_value;

        return $this;
    }

    /**
     * Gets risk_value
     *
     * @return float
     */
    public function getRiskValue()
    {
        return $this->container['risk_value'];
    }

    /**
     * Sets risk_value
     *
     * @param float $risk_value risk_value
     *
     * @return $this
     */
    public function setRiskValue($risk_value)
    {
        $this->container['risk_value'] = $risk_value;

        return $this;
    }

    /**
     * Gets home_notional
     *
     * @return double
     */
    public function getHomeNotional()
    {
        return $this->container['home_notional'];
    }

    /**
     * Sets home_notional
     *
     * @param double $home_notional home_notional
     *
     * @return $this
     */
    public function setHomeNotional($home_notional)
    {
        $this->container['home_notional'] = $home_notional;

        return $this;
    }

    /**
     * Gets foreign_notional
     *
     * @return double
     */
    public function getForeignNotional()
    {
        return $this->container['foreign_notional'];
    }

    /**
     * Sets foreign_notional
     *
     * @param double $foreign_notional foreign_notional
     *
     * @return $this
     */
    public function setForeignNotional($foreign_notional)
    {
        $this->container['foreign_notional'] = $foreign_notional;

        return $this;
    }

    /**
     * Gets pos_state
     *
     * @return string
     */
    public function getPosState()
    {
        return $this->container['pos_state'];
    }

    /**
     * Sets pos_state
     *
     * @param string $pos_state pos_state
     *
     * @return $this
     */
    public function setPosState($pos_state)
    {
        $this->container['pos_state'] = $pos_state;

        return $this;
    }

    /**
     * Gets pos_cost
     *
     * @return float
     */
    public function getPosCost()
    {
        return $this->container['pos_cost'];
    }

    /**
     * Sets pos_cost
     *
     * @param float $pos_cost pos_cost
     *
     * @return $this
     */
    public function setPosCost($pos_cost)
    {
        $this->container['pos_cost'] = $pos_cost;

        return $this;
    }

    /**
     * Gets pos_cost2
     *
     * @return float
     */
    public function getPosCost2()
    {
        return $this->container['pos_cost2'];
    }

    /**
     * Sets pos_cost2
     *
     * @param float $pos_cost2 pos_cost2
     *
     * @return $this
     */
    public function setPosCost2($pos_cost2)
    {
        $this->container['pos_cost2'] = $pos_cost2;

        return $this;
    }

    /**
     * Gets pos_cross
     *
     * @return float
     */
    public function getPosCross()
    {
        return $this->container['pos_cross'];
    }

    /**
     * Sets pos_cross
     *
     * @param float $pos_cross pos_cross
     *
     * @return $this
     */
    public function setPosCross($pos_cross)
    {
        $this->container['pos_cross'] = $pos_cross;

        return $this;
    }

    /**
     * Gets pos_init
     *
     * @return float
     */
    public function getPosInit()
    {
        return $this->container['pos_init'];
    }

    /**
     * Sets pos_init
     *
     * @param float $pos_init pos_init
     *
     * @return $this
     */
    public function setPosInit($pos_init)
    {
        $this->container['pos_init'] = $pos_init;

        return $this;
    }

    /**
     * Gets pos_comm
     *
     * @return float
     */
    public function getPosComm()
    {
        return $this->container['pos_comm'];
    }

    /**
     * Sets pos_comm
     *
     * @param float $pos_comm pos_comm
     *
     * @return $this
     */
    public function setPosComm($pos_comm)
    {
        $this->container['pos_comm'] = $pos_comm;

        return $this;
    }

    /**
     * Gets pos_loss
     *
     * @return float
     */
    public function getPosLoss()
    {
        return $this->container['pos_loss'];
    }

    /**
     * Sets pos_loss
     *
     * @param float $pos_loss pos_loss
     *
     * @return $this
     */
    public function setPosLoss($pos_loss)
    {
        $this->container['pos_loss'] = $pos_loss;

        return $this;
    }

    /**
     * Gets pos_margin
     *
     * @return float
     */
    public function getPosMargin()
    {
        return $this->container['pos_margin'];
    }

    /**
     * Sets pos_margin
     *
     * @param float $pos_margin pos_margin
     *
     * @return $this
     */
    public function setPosMargin($pos_margin)
    {
        $this->container['pos_margin'] = $pos_margin;

        return $this;
    }

    /**
     * Gets pos_maint
     *
     * @return float
     */
    public function getPosMaint()
    {
        return $this->container['pos_maint'];
    }

    /**
     * Sets pos_maint
     *
     * @param float $pos_maint pos_maint
     *
     * @return $this
     */
    public function setPosMaint($pos_maint)
    {
        $this->container['pos_maint'] = $pos_maint;

        return $this;
    }

    /**
     * Gets pos_allowance
     *
     * @return float
     */
    public function getPosAllowance()
    {
        return $this->container['pos_allowance'];
    }

    /**
     * Sets pos_allowance
     *
     * @param float $pos_allowance pos_allowance
     *
     * @return $this
     */
    public function setPosAllowance($pos_allowance)
    {
        $this->container['pos_allowance'] = $pos_allowance;

        return $this;
    }

    /**
     * Gets taxable_margin
     *
     * @return float
     */
    public function getTaxableMargin()
    {
        return $this->container['taxable_margin'];
    }

    /**
     * Sets taxable_margin
     *
     * @param float $taxable_margin taxable_margin
     *
     * @return $this
     */
    public function setTaxableMargin($taxable_margin)
    {
        $this->container['taxable_margin'] = $taxable_margin;

        return $this;
    }

    /**
     * Gets init_margin
     *
     * @return float
     */
    public function getInitMargin()
    {
        return $this->container['init_margin'];
    }

    /**
     * Sets init_margin
     *
     * @param float $init_margin init_margin
     *
     * @return $this
     */
    public function setInitMargin($init_margin)
    {
        $this->container['init_margin'] = $init_margin;

        return $this;
    }

    /**
     * Gets maint_margin
     *
     * @return float
     */
    public function getMaintMargin()
    {
        return $this->container['maint_margin'];
    }

    /**
     * Sets maint_margin
     *
     * @param float $maint_margin maint_margin
     *
     * @return $this
     */
    public function setMaintMargin($maint_margin)
    {
        $this->container['maint_margin'] = $maint_margin;

        return $this;
    }

    /**
     * Gets session_margin
     *
     * @return float
     */
    public function getSessionMargin()
    {
        return $this->container['session_margin'];
    }

    /**
     * Sets session_margin
     *
     * @param float $session_margin session_margin
     *
     * @return $this
     */
    public function setSessionMargin($session_margin)
    {
        $this->container['session_margin'] = $session_margin;

        return $this;
    }

    /**
     * Gets target_excess_margin
     *
     * @return float
     */
    public function getTargetExcessMargin()
    {
        return $this->container['target_excess_margin'];
    }

    /**
     * Sets target_excess_margin
     *
     * @param float $target_excess_margin target_excess_margin
     *
     * @return $this
     */
    public function setTargetExcessMargin($target_excess_margin)
    {
        $this->container['target_excess_margin'] = $target_excess_margin;

        return $this;
    }

    /**
     * Gets var_margin
     *
     * @return float
     */
    public function getVarMargin()
    {
        return $this->container['var_margin'];
    }

    /**
     * Sets var_margin
     *
     * @param float $var_margin var_margin
     *
     * @return $this
     */
    public function setVarMargin($var_margin)
    {
        $this->container['var_margin'] = $var_margin;

        return $this;
    }

    /**
     * Gets realised_gross_pnl
     *
     * @return float
     */
    public function getRealisedGrossPnl()
    {
        return $this->container['realised_gross_pnl'];
    }

    /**
     * Sets realised_gross_pnl
     *
     * @param float $realised_gross_pnl realised_gross_pnl
     *
     * @return $this
     */
    public function setRealisedGrossPnl($realised_gross_pnl)
    {
        $this->container['realised_gross_pnl'] = $realised_gross_pnl;

        return $this;
    }

    /**
     * Gets realised_tax
     *
     * @return float
     */
    public function getRealisedTax()
    {
        return $this->container['realised_tax'];
    }

    /**
     * Sets realised_tax
     *
     * @param float $realised_tax realised_tax
     *
     * @return $this
     */
    public function setRealisedTax($realised_tax)
    {
        $this->container['realised_tax'] = $realised_tax;

        return $this;
    }

    /**
     * Gets realised_pnl
     *
     * @return float
     */
    public function getRealisedPnl()
    {
        return $this->container['realised_pnl'];
    }

    /**
     * Sets realised_pnl
     *
     * @param float $realised_pnl realised_pnl
     *
     * @return $this
     */
    public function setRealisedPnl($realised_pnl)
    {
        $this->container['realised_pnl'] = $realised_pnl;

        return $this;
    }

    /**
     * Gets unrealised_gross_pnl
     *
     * @return float
     */
    public function getUnrealisedGrossPnl()
    {
        return $this->container['unrealised_gross_pnl'];
    }

    /**
     * Sets unrealised_gross_pnl
     *
     * @param float $unrealised_gross_pnl unrealised_gross_pnl
     *
     * @return $this
     */
    public function setUnrealisedGrossPnl($unrealised_gross_pnl)
    {
        $this->container['unrealised_gross_pnl'] = $unrealised_gross_pnl;

        return $this;
    }

    /**
     * Gets long_bankrupt
     *
     * @return float
     */
    public function getLongBankrupt()
    {
        return $this->container['long_bankrupt'];
    }

    /**
     * Sets long_bankrupt
     *
     * @param float $long_bankrupt long_bankrupt
     *
     * @return $this
     */
    public function setLongBankrupt($long_bankrupt)
    {
        $this->container['long_bankrupt'] = $long_bankrupt;

        return $this;
    }

    /**
     * Gets short_bankrupt
     *
     * @return float
     */
    public function getShortBankrupt()
    {
        return $this->container['short_bankrupt'];
    }

    /**
     * Sets short_bankrupt
     *
     * @param float $short_bankrupt short_bankrupt
     *
     * @return $this
     */
    public function setShortBankrupt($short_bankrupt)
    {
        $this->container['short_bankrupt'] = $short_bankrupt;

        return $this;
    }

    /**
     * Gets tax_base
     *
     * @return float
     */
    public function getTaxBase()
    {
        return $this->container['tax_base'];
    }

    /**
     * Sets tax_base
     *
     * @param float $tax_base tax_base
     *
     * @return $this
     */
    public function setTaxBase($tax_base)
    {
        $this->container['tax_base'] = $tax_base;

        return $this;
    }

    /**
     * Gets indicative_tax_rate
     *
     * @return double
     */
    public function getIndicativeTaxRate()
    {
        return $this->container['indicative_tax_rate'];
    }

    /**
     * Sets indicative_tax_rate
     *
     * @param double $indicative_tax_rate indicative_tax_rate
     *
     * @return $this
     */
    public function setIndicativeTaxRate($indicative_tax_rate)
    {
        $this->container['indicative_tax_rate'] = $indicative_tax_rate;

        return $this;
    }

    /**
     * Gets indicative_tax
     *
     * @return float
     */
    public function getIndicativeTax()
    {
        return $this->container['indicative_tax'];
    }

    /**
     * Sets indicative_tax
     *
     * @param float $indicative_tax indicative_tax
     *
     * @return $this
     */
    public function setIndicativeTax($indicative_tax)
    {
        $this->container['indicative_tax'] = $indicative_tax;

        return $this;
    }

    /**
     * Gets unrealised_tax
     *
     * @return float
     */
    public function getUnrealisedTax()
    {
        return $this->container['unrealised_tax'];
    }

    /**
     * Sets unrealised_tax
     *
     * @param float $unrealised_tax unrealised_tax
     *
     * @return $this
     */
    public function setUnrealisedTax($unrealised_tax)
    {
        $this->container['unrealised_tax'] = $unrealised_tax;

        return $this;
    }

    /**
     * Gets unrealised_pnl
     *
     * @return float
     */
    public function getUnrealisedPnl()
    {
        return $this->container['unrealised_pnl'];
    }

    /**
     * Sets unrealised_pnl
     *
     * @param float $unrealised_pnl unrealised_pnl
     *
     * @return $this
     */
    public function setUnrealisedPnl($unrealised_pnl)
    {
        $this->container['unrealised_pnl'] = $unrealised_pnl;

        return $this;
    }

    /**
     * Gets unrealised_pnl_pcnt
     *
     * @return double
     */
    public function getUnrealisedPnlPcnt()
    {
        return $this->container['unrealised_pnl_pcnt'];
    }

    /**
     * Sets unrealised_pnl_pcnt
     *
     * @param double $unrealised_pnl_pcnt unrealised_pnl_pcnt
     *
     * @return $this
     */
    public function setUnrealisedPnlPcnt($unrealised_pnl_pcnt)
    {
        $this->container['unrealised_pnl_pcnt'] = $unrealised_pnl_pcnt;

        return $this;
    }

    /**
     * Gets unrealised_roe_pcnt
     *
     * @return double
     */
    public function getUnrealisedRoePcnt()
    {
        return $this->container['unrealised_roe_pcnt'];
    }

    /**
     * Sets unrealised_roe_pcnt
     *
     * @param double $unrealised_roe_pcnt unrealised_roe_pcnt
     *
     * @return $this
     */
    public function setUnrealisedRoePcnt($unrealised_roe_pcnt)
    {
        $this->container['unrealised_roe_pcnt'] = $unrealised_roe_pcnt;

        return $this;
    }

    /**
     * Gets simple_qty
     *
     * @return double
     */
    public function getSimpleQty()
    {
        return $this->container['simple_qty'];
    }

    /**
     * Sets simple_qty
     *
     * @param double $simple_qty simple_qty
     *
     * @return $this
     */
    public function setSimpleQty($simple_qty)
    {
        $this->container['simple_qty'] = $simple_qty;

        return $this;
    }

    /**
     * Gets simple_cost
     *
     * @return double
     */
    public function getSimpleCost()
    {
        return $this->container['simple_cost'];
    }

    /**
     * Sets simple_cost
     *
     * @param double $simple_cost simple_cost
     *
     * @return $this
     */
    public function setSimpleCost($simple_cost)
    {
        $this->container['simple_cost'] = $simple_cost;

        return $this;
    }

    /**
     * Gets simple_value
     *
     * @return double
     */
    public function getSimpleValue()
    {
        return $this->container['simple_value'];
    }

    /**
     * Sets simple_value
     *
     * @param double $simple_value simple_value
     *
     * @return $this
     */
    public function setSimpleValue($simple_value)
    {
        $this->container['simple_value'] = $simple_value;

        return $this;
    }

    /**
     * Gets simple_pnl
     *
     * @return double
     */
    public function getSimplePnl()
    {
        return $this->container['simple_pnl'];
    }

    /**
     * Sets simple_pnl
     *
     * @param double $simple_pnl simple_pnl
     *
     * @return $this
     */
    public function setSimplePnl($simple_pnl)
    {
        $this->container['simple_pnl'] = $simple_pnl;

        return $this;
    }

    /**
     * Gets simple_pnl_pcnt
     *
     * @return double
     */
    public function getSimplePnlPcnt()
    {
        return $this->container['simple_pnl_pcnt'];
    }

    /**
     * Sets simple_pnl_pcnt
     *
     * @param double $simple_pnl_pcnt simple_pnl_pcnt
     *
     * @return $this
     */
    public function setSimplePnlPcnt($simple_pnl_pcnt)
    {
        $this->container['simple_pnl_pcnt'] = $simple_pnl_pcnt;

        return $this;
    }

    /**
     * Gets avg_cost_price
     *
     * @return double
     */
    public function getAvgCostPrice()
    {
        return $this->container['avg_cost_price'];
    }

    /**
     * Sets avg_cost_price
     *
     * @param double $avg_cost_price avg_cost_price
     *
     * @return $this
     */
    public function setAvgCostPrice($avg_cost_price)
    {
        $this->container['avg_cost_price'] = $avg_cost_price;

        return $this;
    }

    /**
     * Gets avg_entry_price
     *
     * @return double
     */
    public function getAvgEntryPrice()
    {
        return $this->container['avg_entry_price'];
    }

    /**
     * Sets avg_entry_price
     *
     * @param double $avg_entry_price avg_entry_price
     *
     * @return $this
     */
    public function setAvgEntryPrice($avg_entry_price)
    {
        $this->container['avg_entry_price'] = $avg_entry_price;

        return $this;
    }

    /**
     * Gets break_even_price
     *
     * @return double
     */
    public function getBreakEvenPrice()
    {
        return $this->container['break_even_price'];
    }

    /**
     * Sets break_even_price
     *
     * @param double $break_even_price break_even_price
     *
     * @return $this
     */
    public function setBreakEvenPrice($break_even_price)
    {
        $this->container['break_even_price'] = $break_even_price;

        return $this;
    }

    /**
     * Gets margin_call_price
     *
     * @return double
     */
    public function getMarginCallPrice()
    {
        return $this->container['margin_call_price'];
    }

    /**
     * Sets margin_call_price
     *
     * @param double $margin_call_price margin_call_price
     *
     * @return $this
     */
    public function setMarginCallPrice($margin_call_price)
    {
        $this->container['margin_call_price'] = $margin_call_price;

        return $this;
    }

    /**
     * Gets liquidation_price
     *
     * @return double
     */
    public function getLiquidationPrice()
    {
        return $this->container['liquidation_price'];
    }

    /**
     * Sets liquidation_price
     *
     * @param double $liquidation_price liquidation_price
     *
     * @return $this
     */
    public function setLiquidationPrice($liquidation_price)
    {
        $this->container['liquidation_price'] = $liquidation_price;

        return $this;
    }

    /**
     * Gets bankrupt_price
     *
     * @return double
     */
    public function getBankruptPrice()
    {
        return $this->container['bankrupt_price'];
    }

    /**
     * Sets bankrupt_price
     *
     * @param double $bankrupt_price bankrupt_price
     *
     * @return $this
     */
    public function setBankruptPrice($bankrupt_price)
    {
        $this->container['bankrupt_price'] = $bankrupt_price;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return double
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param double $last_price last_price
     *
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets last_value
     *
     * @return float
     */
    public function getLastValue()
    {
        return $this->container['last_value'];
    }

    /**
     * Sets last_value
     *
     * @param float $last_value last_value
     *
     * @return $this
     */
    public function setLastValue($last_value)
    {
        $this->container['last_value'] = $last_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


