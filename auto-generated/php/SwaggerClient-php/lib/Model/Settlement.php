<?php
/**
 * Settlement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Settlement Class Doc Comment
 *
 * @category Class
 * @description Historical Settlement Data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Settlement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Settlement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp' => '\DateTime',
        'symbol' => 'string',
        'settlement_type' => 'string',
        'settled_price' => 'double',
        'option_strike_price' => 'double',
        'option_underlying_price' => 'double',
        'bankrupt' => 'float',
        'tax_base' => 'float',
        'tax_rate' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timestamp' => 'date-time',
        'symbol' => null,
        'settlement_type' => null,
        'settled_price' => 'double',
        'option_strike_price' => 'double',
        'option_underlying_price' => 'double',
        'bankrupt' => 'int64',
        'tax_base' => 'int64',
        'tax_rate' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'symbol' => 'symbol',
        'settlement_type' => 'settlementType',
        'settled_price' => 'settledPrice',
        'option_strike_price' => 'optionStrikePrice',
        'option_underlying_price' => 'optionUnderlyingPrice',
        'bankrupt' => 'bankrupt',
        'tax_base' => 'taxBase',
        'tax_rate' => 'taxRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'symbol' => 'setSymbol',
        'settlement_type' => 'setSettlementType',
        'settled_price' => 'setSettledPrice',
        'option_strike_price' => 'setOptionStrikePrice',
        'option_underlying_price' => 'setOptionUnderlyingPrice',
        'bankrupt' => 'setBankrupt',
        'tax_base' => 'setTaxBase',
        'tax_rate' => 'setTaxRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'symbol' => 'getSymbol',
        'settlement_type' => 'getSettlementType',
        'settled_price' => 'getSettledPrice',
        'option_strike_price' => 'getOptionStrikePrice',
        'option_underlying_price' => 'getOptionUnderlyingPrice',
        'bankrupt' => 'getBankrupt',
        'tax_base' => 'getTaxBase',
        'tax_rate' => 'getTaxRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['settlement_type'] = isset($data['settlement_type']) ? $data['settlement_type'] : null;
        $this->container['settled_price'] = isset($data['settled_price']) ? $data['settled_price'] : null;
        $this->container['option_strike_price'] = isset($data['option_strike_price']) ? $data['option_strike_price'] : null;
        $this->container['option_underlying_price'] = isset($data['option_underlying_price']) ? $data['option_underlying_price'] : null;
        $this->container['bankrupt'] = isset($data['bankrupt']) ? $data['bankrupt'] : null;
        $this->container['tax_base'] = isset($data['tax_base']) ? $data['tax_base'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets settlement_type
     *
     * @return string
     */
    public function getSettlementType()
    {
        return $this->container['settlement_type'];
    }

    /**
     * Sets settlement_type
     *
     * @param string $settlement_type settlement_type
     *
     * @return $this
     */
    public function setSettlementType($settlement_type)
    {
        $this->container['settlement_type'] = $settlement_type;

        return $this;
    }

    /**
     * Gets settled_price
     *
     * @return double
     */
    public function getSettledPrice()
    {
        return $this->container['settled_price'];
    }

    /**
     * Sets settled_price
     *
     * @param double $settled_price settled_price
     *
     * @return $this
     */
    public function setSettledPrice($settled_price)
    {
        $this->container['settled_price'] = $settled_price;

        return $this;
    }

    /**
     * Gets option_strike_price
     *
     * @return double
     */
    public function getOptionStrikePrice()
    {
        return $this->container['option_strike_price'];
    }

    /**
     * Sets option_strike_price
     *
     * @param double $option_strike_price option_strike_price
     *
     * @return $this
     */
    public function setOptionStrikePrice($option_strike_price)
    {
        $this->container['option_strike_price'] = $option_strike_price;

        return $this;
    }

    /**
     * Gets option_underlying_price
     *
     * @return double
     */
    public function getOptionUnderlyingPrice()
    {
        return $this->container['option_underlying_price'];
    }

    /**
     * Sets option_underlying_price
     *
     * @param double $option_underlying_price option_underlying_price
     *
     * @return $this
     */
    public function setOptionUnderlyingPrice($option_underlying_price)
    {
        $this->container['option_underlying_price'] = $option_underlying_price;

        return $this;
    }

    /**
     * Gets bankrupt
     *
     * @return float
     */
    public function getBankrupt()
    {
        return $this->container['bankrupt'];
    }

    /**
     * Sets bankrupt
     *
     * @param float $bankrupt bankrupt
     *
     * @return $this
     */
    public function setBankrupt($bankrupt)
    {
        $this->container['bankrupt'] = $bankrupt;

        return $this;
    }

    /**
     * Gets tax_base
     *
     * @return float
     */
    public function getTaxBase()
    {
        return $this->container['tax_base'];
    }

    /**
     * Sets tax_base
     *
     * @param float $tax_base tax_base
     *
     * @return $this
     */
    public function setTaxBase($tax_base)
    {
        $this->container['tax_base'] = $tax_base;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return double
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param double $tax_rate tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


