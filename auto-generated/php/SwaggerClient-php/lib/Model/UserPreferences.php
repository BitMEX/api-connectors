<?php
/**
 * UserPreferences
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserPreferences Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserPreferences implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserPreferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_on_liquidations' => 'bool',
        'animations_enabled' => 'bool',
        'announcements_last_seen' => '\DateTime',
        'chat_channel_id' => 'double',
        'color_theme' => 'string',
        'currency' => 'string',
        'debug' => 'bool',
        'disable_emails' => 'string[]',
        'hide_confirm_dialogs' => 'string[]',
        'hide_connection_modal' => 'bool',
        'hide_from_leaderboard' => 'bool',
        'hide_name_from_leaderboard' => 'bool',
        'hide_notifications' => 'string[]',
        'locale' => 'string',
        'msgs_seen' => 'string[]',
        'order_book_binning' => 'object',
        'order_book_type' => 'string',
        'order_clear_immediate' => 'bool',
        'order_controls_plus_minus' => 'bool',
        'show_locale_numbers' => 'bool',
        'sounds' => 'string[]',
        'strict_ip_check' => 'bool',
        'strict_timeout' => 'bool',
        'ticker_group' => 'string',
        'ticker_pinned' => 'bool',
        'trade_layout' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_on_liquidations' => null,
        'animations_enabled' => null,
        'announcements_last_seen' => 'date-time',
        'chat_channel_id' => 'double',
        'color_theme' => null,
        'currency' => null,
        'debug' => null,
        'disable_emails' => null,
        'hide_confirm_dialogs' => null,
        'hide_connection_modal' => null,
        'hide_from_leaderboard' => null,
        'hide_name_from_leaderboard' => null,
        'hide_notifications' => null,
        'locale' => null,
        'msgs_seen' => null,
        'order_book_binning' => null,
        'order_book_type' => null,
        'order_clear_immediate' => null,
        'order_controls_plus_minus' => null,
        'show_locale_numbers' => null,
        'sounds' => null,
        'strict_ip_check' => null,
        'strict_timeout' => null,
        'ticker_group' => null,
        'ticker_pinned' => null,
        'trade_layout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_on_liquidations' => 'alertOnLiquidations',
        'animations_enabled' => 'animationsEnabled',
        'announcements_last_seen' => 'announcementsLastSeen',
        'chat_channel_id' => 'chatChannelID',
        'color_theme' => 'colorTheme',
        'currency' => 'currency',
        'debug' => 'debug',
        'disable_emails' => 'disableEmails',
        'hide_confirm_dialogs' => 'hideConfirmDialogs',
        'hide_connection_modal' => 'hideConnectionModal',
        'hide_from_leaderboard' => 'hideFromLeaderboard',
        'hide_name_from_leaderboard' => 'hideNameFromLeaderboard',
        'hide_notifications' => 'hideNotifications',
        'locale' => 'locale',
        'msgs_seen' => 'msgsSeen',
        'order_book_binning' => 'orderBookBinning',
        'order_book_type' => 'orderBookType',
        'order_clear_immediate' => 'orderClearImmediate',
        'order_controls_plus_minus' => 'orderControlsPlusMinus',
        'show_locale_numbers' => 'showLocaleNumbers',
        'sounds' => 'sounds',
        'strict_ip_check' => 'strictIPCheck',
        'strict_timeout' => 'strictTimeout',
        'ticker_group' => 'tickerGroup',
        'ticker_pinned' => 'tickerPinned',
        'trade_layout' => 'tradeLayout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_on_liquidations' => 'setAlertOnLiquidations',
        'animations_enabled' => 'setAnimationsEnabled',
        'announcements_last_seen' => 'setAnnouncementsLastSeen',
        'chat_channel_id' => 'setChatChannelId',
        'color_theme' => 'setColorTheme',
        'currency' => 'setCurrency',
        'debug' => 'setDebug',
        'disable_emails' => 'setDisableEmails',
        'hide_confirm_dialogs' => 'setHideConfirmDialogs',
        'hide_connection_modal' => 'setHideConnectionModal',
        'hide_from_leaderboard' => 'setHideFromLeaderboard',
        'hide_name_from_leaderboard' => 'setHideNameFromLeaderboard',
        'hide_notifications' => 'setHideNotifications',
        'locale' => 'setLocale',
        'msgs_seen' => 'setMsgsSeen',
        'order_book_binning' => 'setOrderBookBinning',
        'order_book_type' => 'setOrderBookType',
        'order_clear_immediate' => 'setOrderClearImmediate',
        'order_controls_plus_minus' => 'setOrderControlsPlusMinus',
        'show_locale_numbers' => 'setShowLocaleNumbers',
        'sounds' => 'setSounds',
        'strict_ip_check' => 'setStrictIpCheck',
        'strict_timeout' => 'setStrictTimeout',
        'ticker_group' => 'setTickerGroup',
        'ticker_pinned' => 'setTickerPinned',
        'trade_layout' => 'setTradeLayout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_on_liquidations' => 'getAlertOnLiquidations',
        'animations_enabled' => 'getAnimationsEnabled',
        'announcements_last_seen' => 'getAnnouncementsLastSeen',
        'chat_channel_id' => 'getChatChannelId',
        'color_theme' => 'getColorTheme',
        'currency' => 'getCurrency',
        'debug' => 'getDebug',
        'disable_emails' => 'getDisableEmails',
        'hide_confirm_dialogs' => 'getHideConfirmDialogs',
        'hide_connection_modal' => 'getHideConnectionModal',
        'hide_from_leaderboard' => 'getHideFromLeaderboard',
        'hide_name_from_leaderboard' => 'getHideNameFromLeaderboard',
        'hide_notifications' => 'getHideNotifications',
        'locale' => 'getLocale',
        'msgs_seen' => 'getMsgsSeen',
        'order_book_binning' => 'getOrderBookBinning',
        'order_book_type' => 'getOrderBookType',
        'order_clear_immediate' => 'getOrderClearImmediate',
        'order_controls_plus_minus' => 'getOrderControlsPlusMinus',
        'show_locale_numbers' => 'getShowLocaleNumbers',
        'sounds' => 'getSounds',
        'strict_ip_check' => 'getStrictIpCheck',
        'strict_timeout' => 'getStrictTimeout',
        'ticker_group' => 'getTickerGroup',
        'ticker_pinned' => 'getTickerPinned',
        'trade_layout' => 'getTradeLayout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_on_liquidations'] = isset($data['alert_on_liquidations']) ? $data['alert_on_liquidations'] : null;
        $this->container['animations_enabled'] = isset($data['animations_enabled']) ? $data['animations_enabled'] : null;
        $this->container['announcements_last_seen'] = isset($data['announcements_last_seen']) ? $data['announcements_last_seen'] : null;
        $this->container['chat_channel_id'] = isset($data['chat_channel_id']) ? $data['chat_channel_id'] : null;
        $this->container['color_theme'] = isset($data['color_theme']) ? $data['color_theme'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['debug'] = isset($data['debug']) ? $data['debug'] : null;
        $this->container['disable_emails'] = isset($data['disable_emails']) ? $data['disable_emails'] : null;
        $this->container['hide_confirm_dialogs'] = isset($data['hide_confirm_dialogs']) ? $data['hide_confirm_dialogs'] : null;
        $this->container['hide_connection_modal'] = isset($data['hide_connection_modal']) ? $data['hide_connection_modal'] : null;
        $this->container['hide_from_leaderboard'] = isset($data['hide_from_leaderboard']) ? $data['hide_from_leaderboard'] : false;
        $this->container['hide_name_from_leaderboard'] = isset($data['hide_name_from_leaderboard']) ? $data['hide_name_from_leaderboard'] : true;
        $this->container['hide_notifications'] = isset($data['hide_notifications']) ? $data['hide_notifications'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : 'en-US';
        $this->container['msgs_seen'] = isset($data['msgs_seen']) ? $data['msgs_seen'] : null;
        $this->container['order_book_binning'] = isset($data['order_book_binning']) ? $data['order_book_binning'] : null;
        $this->container['order_book_type'] = isset($data['order_book_type']) ? $data['order_book_type'] : null;
        $this->container['order_clear_immediate'] = isset($data['order_clear_immediate']) ? $data['order_clear_immediate'] : false;
        $this->container['order_controls_plus_minus'] = isset($data['order_controls_plus_minus']) ? $data['order_controls_plus_minus'] : null;
        $this->container['show_locale_numbers'] = isset($data['show_locale_numbers']) ? $data['show_locale_numbers'] : true;
        $this->container['sounds'] = isset($data['sounds']) ? $data['sounds'] : null;
        $this->container['strict_ip_check'] = isset($data['strict_ip_check']) ? $data['strict_ip_check'] : false;
        $this->container['strict_timeout'] = isset($data['strict_timeout']) ? $data['strict_timeout'] : true;
        $this->container['ticker_group'] = isset($data['ticker_group']) ? $data['ticker_group'] : null;
        $this->container['ticker_pinned'] = isset($data['ticker_pinned']) ? $data['ticker_pinned'] : null;
        $this->container['trade_layout'] = isset($data['trade_layout']) ? $data['trade_layout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_on_liquidations
     *
     * @return bool
     */
    public function getAlertOnLiquidations()
    {
        return $this->container['alert_on_liquidations'];
    }

    /**
     * Sets alert_on_liquidations
     *
     * @param bool $alert_on_liquidations alert_on_liquidations
     *
     * @return $this
     */
    public function setAlertOnLiquidations($alert_on_liquidations)
    {
        $this->container['alert_on_liquidations'] = $alert_on_liquidations;

        return $this;
    }

    /**
     * Gets animations_enabled
     *
     * @return bool
     */
    public function getAnimationsEnabled()
    {
        return $this->container['animations_enabled'];
    }

    /**
     * Sets animations_enabled
     *
     * @param bool $animations_enabled animations_enabled
     *
     * @return $this
     */
    public function setAnimationsEnabled($animations_enabled)
    {
        $this->container['animations_enabled'] = $animations_enabled;

        return $this;
    }

    /**
     * Gets announcements_last_seen
     *
     * @return \DateTime
     */
    public function getAnnouncementsLastSeen()
    {
        return $this->container['announcements_last_seen'];
    }

    /**
     * Sets announcements_last_seen
     *
     * @param \DateTime $announcements_last_seen announcements_last_seen
     *
     * @return $this
     */
    public function setAnnouncementsLastSeen($announcements_last_seen)
    {
        $this->container['announcements_last_seen'] = $announcements_last_seen;

        return $this;
    }

    /**
     * Gets chat_channel_id
     *
     * @return double
     */
    public function getChatChannelId()
    {
        return $this->container['chat_channel_id'];
    }

    /**
     * Sets chat_channel_id
     *
     * @param double $chat_channel_id chat_channel_id
     *
     * @return $this
     */
    public function setChatChannelId($chat_channel_id)
    {
        $this->container['chat_channel_id'] = $chat_channel_id;

        return $this;
    }

    /**
     * Gets color_theme
     *
     * @return string
     */
    public function getColorTheme()
    {
        return $this->container['color_theme'];
    }

    /**
     * Sets color_theme
     *
     * @param string $color_theme color_theme
     *
     * @return $this
     */
    public function setColorTheme($color_theme)
    {
        $this->container['color_theme'] = $color_theme;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets debug
     *
     * @return bool
     */
    public function getDebug()
    {
        return $this->container['debug'];
    }

    /**
     * Sets debug
     *
     * @param bool $debug debug
     *
     * @return $this
     */
    public function setDebug($debug)
    {
        $this->container['debug'] = $debug;

        return $this;
    }

    /**
     * Gets disable_emails
     *
     * @return string[]
     */
    public function getDisableEmails()
    {
        return $this->container['disable_emails'];
    }

    /**
     * Sets disable_emails
     *
     * @param string[] $disable_emails disable_emails
     *
     * @return $this
     */
    public function setDisableEmails($disable_emails)
    {
        $this->container['disable_emails'] = $disable_emails;

        return $this;
    }

    /**
     * Gets hide_confirm_dialogs
     *
     * @return string[]
     */
    public function getHideConfirmDialogs()
    {
        return $this->container['hide_confirm_dialogs'];
    }

    /**
     * Sets hide_confirm_dialogs
     *
     * @param string[] $hide_confirm_dialogs hide_confirm_dialogs
     *
     * @return $this
     */
    public function setHideConfirmDialogs($hide_confirm_dialogs)
    {
        $this->container['hide_confirm_dialogs'] = $hide_confirm_dialogs;

        return $this;
    }

    /**
     * Gets hide_connection_modal
     *
     * @return bool
     */
    public function getHideConnectionModal()
    {
        return $this->container['hide_connection_modal'];
    }

    /**
     * Sets hide_connection_modal
     *
     * @param bool $hide_connection_modal hide_connection_modal
     *
     * @return $this
     */
    public function setHideConnectionModal($hide_connection_modal)
    {
        $this->container['hide_connection_modal'] = $hide_connection_modal;

        return $this;
    }

    /**
     * Gets hide_from_leaderboard
     *
     * @return bool
     */
    public function getHideFromLeaderboard()
    {
        return $this->container['hide_from_leaderboard'];
    }

    /**
     * Sets hide_from_leaderboard
     *
     * @param bool $hide_from_leaderboard hide_from_leaderboard
     *
     * @return $this
     */
    public function setHideFromLeaderboard($hide_from_leaderboard)
    {
        $this->container['hide_from_leaderboard'] = $hide_from_leaderboard;

        return $this;
    }

    /**
     * Gets hide_name_from_leaderboard
     *
     * @return bool
     */
    public function getHideNameFromLeaderboard()
    {
        return $this->container['hide_name_from_leaderboard'];
    }

    /**
     * Sets hide_name_from_leaderboard
     *
     * @param bool $hide_name_from_leaderboard hide_name_from_leaderboard
     *
     * @return $this
     */
    public function setHideNameFromLeaderboard($hide_name_from_leaderboard)
    {
        $this->container['hide_name_from_leaderboard'] = $hide_name_from_leaderboard;

        return $this;
    }

    /**
     * Gets hide_notifications
     *
     * @return string[]
     */
    public function getHideNotifications()
    {
        return $this->container['hide_notifications'];
    }

    /**
     * Sets hide_notifications
     *
     * @param string[] $hide_notifications hide_notifications
     *
     * @return $this
     */
    public function setHideNotifications($hide_notifications)
    {
        $this->container['hide_notifications'] = $hide_notifications;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets msgs_seen
     *
     * @return string[]
     */
    public function getMsgsSeen()
    {
        return $this->container['msgs_seen'];
    }

    /**
     * Sets msgs_seen
     *
     * @param string[] $msgs_seen msgs_seen
     *
     * @return $this
     */
    public function setMsgsSeen($msgs_seen)
    {
        $this->container['msgs_seen'] = $msgs_seen;

        return $this;
    }

    /**
     * Gets order_book_binning
     *
     * @return object
     */
    public function getOrderBookBinning()
    {
        return $this->container['order_book_binning'];
    }

    /**
     * Sets order_book_binning
     *
     * @param object $order_book_binning order_book_binning
     *
     * @return $this
     */
    public function setOrderBookBinning($order_book_binning)
    {
        $this->container['order_book_binning'] = $order_book_binning;

        return $this;
    }

    /**
     * Gets order_book_type
     *
     * @return string
     */
    public function getOrderBookType()
    {
        return $this->container['order_book_type'];
    }

    /**
     * Sets order_book_type
     *
     * @param string $order_book_type order_book_type
     *
     * @return $this
     */
    public function setOrderBookType($order_book_type)
    {
        $this->container['order_book_type'] = $order_book_type;

        return $this;
    }

    /**
     * Gets order_clear_immediate
     *
     * @return bool
     */
    public function getOrderClearImmediate()
    {
        return $this->container['order_clear_immediate'];
    }

    /**
     * Sets order_clear_immediate
     *
     * @param bool $order_clear_immediate order_clear_immediate
     *
     * @return $this
     */
    public function setOrderClearImmediate($order_clear_immediate)
    {
        $this->container['order_clear_immediate'] = $order_clear_immediate;

        return $this;
    }

    /**
     * Gets order_controls_plus_minus
     *
     * @return bool
     */
    public function getOrderControlsPlusMinus()
    {
        return $this->container['order_controls_plus_minus'];
    }

    /**
     * Sets order_controls_plus_minus
     *
     * @param bool $order_controls_plus_minus order_controls_plus_minus
     *
     * @return $this
     */
    public function setOrderControlsPlusMinus($order_controls_plus_minus)
    {
        $this->container['order_controls_plus_minus'] = $order_controls_plus_minus;

        return $this;
    }

    /**
     * Gets show_locale_numbers
     *
     * @return bool
     */
    public function getShowLocaleNumbers()
    {
        return $this->container['show_locale_numbers'];
    }

    /**
     * Sets show_locale_numbers
     *
     * @param bool $show_locale_numbers show_locale_numbers
     *
     * @return $this
     */
    public function setShowLocaleNumbers($show_locale_numbers)
    {
        $this->container['show_locale_numbers'] = $show_locale_numbers;

        return $this;
    }

    /**
     * Gets sounds
     *
     * @return string[]
     */
    public function getSounds()
    {
        return $this->container['sounds'];
    }

    /**
     * Sets sounds
     *
     * @param string[] $sounds sounds
     *
     * @return $this
     */
    public function setSounds($sounds)
    {
        $this->container['sounds'] = $sounds;

        return $this;
    }

    /**
     * Gets strict_ip_check
     *
     * @return bool
     */
    public function getStrictIpCheck()
    {
        return $this->container['strict_ip_check'];
    }

    /**
     * Sets strict_ip_check
     *
     * @param bool $strict_ip_check strict_ip_check
     *
     * @return $this
     */
    public function setStrictIpCheck($strict_ip_check)
    {
        $this->container['strict_ip_check'] = $strict_ip_check;

        return $this;
    }

    /**
     * Gets strict_timeout
     *
     * @return bool
     */
    public function getStrictTimeout()
    {
        return $this->container['strict_timeout'];
    }

    /**
     * Sets strict_timeout
     *
     * @param bool $strict_timeout strict_timeout
     *
     * @return $this
     */
    public function setStrictTimeout($strict_timeout)
    {
        $this->container['strict_timeout'] = $strict_timeout;

        return $this;
    }

    /**
     * Gets ticker_group
     *
     * @return string
     */
    public function getTickerGroup()
    {
        return $this->container['ticker_group'];
    }

    /**
     * Sets ticker_group
     *
     * @param string $ticker_group ticker_group
     *
     * @return $this
     */
    public function setTickerGroup($ticker_group)
    {
        $this->container['ticker_group'] = $ticker_group;

        return $this;
    }

    /**
     * Gets ticker_pinned
     *
     * @return bool
     */
    public function getTickerPinned()
    {
        return $this->container['ticker_pinned'];
    }

    /**
     * Sets ticker_pinned
     *
     * @param bool $ticker_pinned ticker_pinned
     *
     * @return $this
     */
    public function setTickerPinned($ticker_pinned)
    {
        $this->container['ticker_pinned'] = $ticker_pinned;

        return $this;
    }

    /**
     * Gets trade_layout
     *
     * @return string
     */
    public function getTradeLayout()
    {
        return $this->container['trade_layout'];
    }

    /**
     * Sets trade_layout
     *
     * @param string $trade_layout trade_layout
     *
     * @return $this
     */
    public function setTradeLayout($trade_layout)
    {
        $this->container['trade_layout'] = $trade_layout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


