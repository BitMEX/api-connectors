# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Affiliate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'referrer_account': 'float',
        'referral_discount': 'float',
        'affiliate_payout': 'float',
        'id': 'float'
    }

    attribute_map = {
        'referrer_account': 'referrerAccount',
        'referral_discount': 'referralDiscount',
        'affiliate_payout': 'affiliatePayout',
        'id': 'id'
    }

    def __init__(self, referrer_account=None, referral_discount=None, affiliate_payout=None, id=None, _configuration=None):  # noqa: E501
        """Affiliate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._referrer_account = None
        self._referral_discount = None
        self._affiliate_payout = None
        self._id = None
        self.discriminator = None

        if referrer_account is not None:
            self.referrer_account = referrer_account
        if referral_discount is not None:
            self.referral_discount = referral_discount
        if affiliate_payout is not None:
            self.affiliate_payout = affiliate_payout
        if id is not None:
            self.id = id

    @property
    def referrer_account(self):
        """Gets the referrer_account of this Affiliate.  # noqa: E501


        :return: The referrer_account of this Affiliate.  # noqa: E501
        :rtype: float
        """
        return self._referrer_account

    @referrer_account.setter
    def referrer_account(self, referrer_account):
        """Sets the referrer_account of this Affiliate.


        :param referrer_account: The referrer_account of this Affiliate.  # noqa: E501
        :type: float
        """

        self._referrer_account = referrer_account

    @property
    def referral_discount(self):
        """Gets the referral_discount of this Affiliate.  # noqa: E501


        :return: The referral_discount of this Affiliate.  # noqa: E501
        :rtype: float
        """
        return self._referral_discount

    @referral_discount.setter
    def referral_discount(self, referral_discount):
        """Sets the referral_discount of this Affiliate.


        :param referral_discount: The referral_discount of this Affiliate.  # noqa: E501
        :type: float
        """

        self._referral_discount = referral_discount

    @property
    def affiliate_payout(self):
        """Gets the affiliate_payout of this Affiliate.  # noqa: E501


        :return: The affiliate_payout of this Affiliate.  # noqa: E501
        :rtype: float
        """
        return self._affiliate_payout

    @affiliate_payout.setter
    def affiliate_payout(self, affiliate_payout):
        """Sets the affiliate_payout of this Affiliate.


        :param affiliate_payout: The affiliate_payout of this Affiliate.  # noqa: E501
        :type: float
        """

        self._affiliate_payout = affiliate_payout

    @property
    def id(self):
        """Gets the id of this Affiliate.  # noqa: E501


        :return: The id of this Affiliate.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Affiliate.


        :param id: The id of this Affiliate.  # noqa: E501
        :type: float
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Affiliate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Affiliate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Affiliate):
            return True

        return self.to_dict() != other.to_dict()
