# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IndexComposite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'symbol': 'str',
        'index_symbol': 'str',
        'index_multiplier': 'float',
        'reference': 'str',
        'last_price': 'float',
        'source_price': 'float',
        'conversion_index': 'str',
        'conversion_index_price': 'float',
        'weight': 'float',
        'logged': 'datetime'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'symbol': 'symbol',
        'index_symbol': 'indexSymbol',
        'index_multiplier': 'indexMultiplier',
        'reference': 'reference',
        'last_price': 'lastPrice',
        'source_price': 'sourcePrice',
        'conversion_index': 'conversionIndex',
        'conversion_index_price': 'conversionIndexPrice',
        'weight': 'weight',
        'logged': 'logged'
    }

    def __init__(self, timestamp=None, symbol=None, index_symbol=None, index_multiplier=None, reference=None, last_price=None, source_price=None, conversion_index=None, conversion_index_price=None, weight=None, logged=None, _configuration=None):  # noqa: E501
        """IndexComposite - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._timestamp = None
        self._symbol = None
        self._index_symbol = None
        self._index_multiplier = None
        self._reference = None
        self._last_price = None
        self._source_price = None
        self._conversion_index = None
        self._conversion_index_price = None
        self._weight = None
        self._logged = None
        self.discriminator = None

        self.timestamp = timestamp
        if symbol is not None:
            self.symbol = symbol
        if index_symbol is not None:
            self.index_symbol = index_symbol
        if index_multiplier is not None:
            self.index_multiplier = index_multiplier
        if reference is not None:
            self.reference = reference
        if last_price is not None:
            self.last_price = last_price
        if source_price is not None:
            self.source_price = source_price
        if conversion_index is not None:
            self.conversion_index = conversion_index
        if conversion_index_price is not None:
            self.conversion_index_price = conversion_index_price
        if weight is not None:
            self.weight = weight
        if logged is not None:
            self.logged = logged

    @property
    def timestamp(self):
        """Gets the timestamp of this IndexComposite.  # noqa: E501


        :return: The timestamp of this IndexComposite.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this IndexComposite.


        :param timestamp: The timestamp of this IndexComposite.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def symbol(self):
        """Gets the symbol of this IndexComposite.  # noqa: E501


        :return: The symbol of this IndexComposite.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this IndexComposite.


        :param symbol: The symbol of this IndexComposite.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def index_symbol(self):
        """Gets the index_symbol of this IndexComposite.  # noqa: E501


        :return: The index_symbol of this IndexComposite.  # noqa: E501
        :rtype: str
        """
        return self._index_symbol

    @index_symbol.setter
    def index_symbol(self, index_symbol):
        """Sets the index_symbol of this IndexComposite.


        :param index_symbol: The index_symbol of this IndexComposite.  # noqa: E501
        :type: str
        """

        self._index_symbol = index_symbol

    @property
    def index_multiplier(self):
        """Gets the index_multiplier of this IndexComposite.  # noqa: E501


        :return: The index_multiplier of this IndexComposite.  # noqa: E501
        :rtype: float
        """
        return self._index_multiplier

    @index_multiplier.setter
    def index_multiplier(self, index_multiplier):
        """Sets the index_multiplier of this IndexComposite.


        :param index_multiplier: The index_multiplier of this IndexComposite.  # noqa: E501
        :type: float
        """

        self._index_multiplier = index_multiplier

    @property
    def reference(self):
        """Gets the reference of this IndexComposite.  # noqa: E501


        :return: The reference of this IndexComposite.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this IndexComposite.


        :param reference: The reference of this IndexComposite.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def last_price(self):
        """Gets the last_price of this IndexComposite.  # noqa: E501


        :return: The last_price of this IndexComposite.  # noqa: E501
        :rtype: float
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this IndexComposite.


        :param last_price: The last_price of this IndexComposite.  # noqa: E501
        :type: float
        """

        self._last_price = last_price

    @property
    def source_price(self):
        """Gets the source_price of this IndexComposite.  # noqa: E501


        :return: The source_price of this IndexComposite.  # noqa: E501
        :rtype: float
        """
        return self._source_price

    @source_price.setter
    def source_price(self, source_price):
        """Sets the source_price of this IndexComposite.


        :param source_price: The source_price of this IndexComposite.  # noqa: E501
        :type: float
        """

        self._source_price = source_price

    @property
    def conversion_index(self):
        """Gets the conversion_index of this IndexComposite.  # noqa: E501


        :return: The conversion_index of this IndexComposite.  # noqa: E501
        :rtype: str
        """
        return self._conversion_index

    @conversion_index.setter
    def conversion_index(self, conversion_index):
        """Sets the conversion_index of this IndexComposite.


        :param conversion_index: The conversion_index of this IndexComposite.  # noqa: E501
        :type: str
        """

        self._conversion_index = conversion_index

    @property
    def conversion_index_price(self):
        """Gets the conversion_index_price of this IndexComposite.  # noqa: E501


        :return: The conversion_index_price of this IndexComposite.  # noqa: E501
        :rtype: float
        """
        return self._conversion_index_price

    @conversion_index_price.setter
    def conversion_index_price(self, conversion_index_price):
        """Sets the conversion_index_price of this IndexComposite.


        :param conversion_index_price: The conversion_index_price of this IndexComposite.  # noqa: E501
        :type: float
        """

        self._conversion_index_price = conversion_index_price

    @property
    def weight(self):
        """Gets the weight of this IndexComposite.  # noqa: E501


        :return: The weight of this IndexComposite.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this IndexComposite.


        :param weight: The weight of this IndexComposite.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def logged(self):
        """Gets the logged of this IndexComposite.  # noqa: E501


        :return: The logged of this IndexComposite.  # noqa: E501
        :rtype: datetime
        """
        return self._logged

    @logged.setter
    def logged(self, logged):
        """Sets the logged of this IndexComposite.


        :param logged: The logged of this IndexComposite.  # noqa: E501
        :type: datetime
        """

        self._logged = logged

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndexComposite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexComposite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndexComposite):
            return True

        return self.to_dict() != other.to_dict()
