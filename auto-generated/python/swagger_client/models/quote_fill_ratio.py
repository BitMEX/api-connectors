# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuoteFillRatio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'account': 'float',
        'quote_count': 'float',
        'dealt_count': 'float',
        'quotes_mavg7': 'float',
        'dealt_mavg7': 'float',
        'quote_fill_ratio_mavg7': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'account': 'account',
        'quote_count': 'quoteCount',
        'dealt_count': 'dealtCount',
        'quotes_mavg7': 'quotesMavg7',
        'dealt_mavg7': 'dealtMavg7',
        'quote_fill_ratio_mavg7': 'quoteFillRatioMavg7'
    }

    def __init__(self, _date=None, account=None, quote_count=None, dealt_count=None, quotes_mavg7=None, dealt_mavg7=None, quote_fill_ratio_mavg7=None, _configuration=None):  # noqa: E501
        """QuoteFillRatio - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._account = None
        self._quote_count = None
        self._dealt_count = None
        self._quotes_mavg7 = None
        self._dealt_mavg7 = None
        self._quote_fill_ratio_mavg7 = None
        self.discriminator = None

        self._date = _date
        if account is not None:
            self.account = account
        if quote_count is not None:
            self.quote_count = quote_count
        if dealt_count is not None:
            self.dealt_count = dealt_count
        if quotes_mavg7 is not None:
            self.quotes_mavg7 = quotes_mavg7
        if dealt_mavg7 is not None:
            self.dealt_mavg7 = dealt_mavg7
        if quote_fill_ratio_mavg7 is not None:
            self.quote_fill_ratio_mavg7 = quote_fill_ratio_mavg7

    @property
    def _date(self):
        """Gets the _date of this QuoteFillRatio.  # noqa: E501


        :return: The _date of this QuoteFillRatio.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this QuoteFillRatio.


        :param _date: The _date of this QuoteFillRatio.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def account(self):
        """Gets the account of this QuoteFillRatio.  # noqa: E501


        :return: The account of this QuoteFillRatio.  # noqa: E501
        :rtype: float
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this QuoteFillRatio.


        :param account: The account of this QuoteFillRatio.  # noqa: E501
        :type: float
        """

        self._account = account

    @property
    def quote_count(self):
        """Gets the quote_count of this QuoteFillRatio.  # noqa: E501


        :return: The quote_count of this QuoteFillRatio.  # noqa: E501
        :rtype: float
        """
        return self._quote_count

    @quote_count.setter
    def quote_count(self, quote_count):
        """Sets the quote_count of this QuoteFillRatio.


        :param quote_count: The quote_count of this QuoteFillRatio.  # noqa: E501
        :type: float
        """

        self._quote_count = quote_count

    @property
    def dealt_count(self):
        """Gets the dealt_count of this QuoteFillRatio.  # noqa: E501


        :return: The dealt_count of this QuoteFillRatio.  # noqa: E501
        :rtype: float
        """
        return self._dealt_count

    @dealt_count.setter
    def dealt_count(self, dealt_count):
        """Sets the dealt_count of this QuoteFillRatio.


        :param dealt_count: The dealt_count of this QuoteFillRatio.  # noqa: E501
        :type: float
        """

        self._dealt_count = dealt_count

    @property
    def quotes_mavg7(self):
        """Gets the quotes_mavg7 of this QuoteFillRatio.  # noqa: E501


        :return: The quotes_mavg7 of this QuoteFillRatio.  # noqa: E501
        :rtype: float
        """
        return self._quotes_mavg7

    @quotes_mavg7.setter
    def quotes_mavg7(self, quotes_mavg7):
        """Sets the quotes_mavg7 of this QuoteFillRatio.


        :param quotes_mavg7: The quotes_mavg7 of this QuoteFillRatio.  # noqa: E501
        :type: float
        """

        self._quotes_mavg7 = quotes_mavg7

    @property
    def dealt_mavg7(self):
        """Gets the dealt_mavg7 of this QuoteFillRatio.  # noqa: E501


        :return: The dealt_mavg7 of this QuoteFillRatio.  # noqa: E501
        :rtype: float
        """
        return self._dealt_mavg7

    @dealt_mavg7.setter
    def dealt_mavg7(self, dealt_mavg7):
        """Sets the dealt_mavg7 of this QuoteFillRatio.


        :param dealt_mavg7: The dealt_mavg7 of this QuoteFillRatio.  # noqa: E501
        :type: float
        """

        self._dealt_mavg7 = dealt_mavg7

    @property
    def quote_fill_ratio_mavg7(self):
        """Gets the quote_fill_ratio_mavg7 of this QuoteFillRatio.  # noqa: E501


        :return: The quote_fill_ratio_mavg7 of this QuoteFillRatio.  # noqa: E501
        :rtype: float
        """
        return self._quote_fill_ratio_mavg7

    @quote_fill_ratio_mavg7.setter
    def quote_fill_ratio_mavg7(self, quote_fill_ratio_mavg7):
        """Sets the quote_fill_ratio_mavg7 of this QuoteFillRatio.


        :param quote_fill_ratio_mavg7: The quote_fill_ratio_mavg7 of this QuoteFillRatio.  # noqa: E501
        :type: float
        """

        self._quote_fill_ratio_mavg7 = quote_fill_ratio_mavg7

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteFillRatio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteFillRatio):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuoteFillRatio):
            return True

        return self.to_dict() != other.to_dict()
