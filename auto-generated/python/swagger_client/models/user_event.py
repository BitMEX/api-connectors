# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'type': 'str',
        'status': 'str',
        'user_id': 'float',
        'created_by_id': 'float',
        'ip': 'str',
        'geoip_country': 'str',
        'geoip_region': 'str',
        'geoip_sub_region': 'str',
        'event_meta': 'object',
        'created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'status': 'status',
        'user_id': 'userId',
        'created_by_id': 'createdById',
        'ip': 'ip',
        'geoip_country': 'geoipCountry',
        'geoip_region': 'geoipRegion',
        'geoip_sub_region': 'geoipSubRegion',
        'event_meta': 'eventMeta',
        'created': 'created'
    }

    def __init__(self, id=None, type=None, status=None, user_id=None, created_by_id=None, ip=None, geoip_country=None, geoip_region=None, geoip_sub_region=None, event_meta=None, created=None, _configuration=None):  # noqa: E501
        """UserEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._status = None
        self._user_id = None
        self._created_by_id = None
        self._ip = None
        self._geoip_country = None
        self._geoip_region = None
        self._geoip_sub_region = None
        self._event_meta = None
        self._created = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.type = type
        self.status = status
        self.user_id = user_id
        self.created_by_id = created_by_id
        if ip is not None:
            self.ip = ip
        if geoip_country is not None:
            self.geoip_country = geoip_country
        if geoip_region is not None:
            self.geoip_region = geoip_region
        if geoip_sub_region is not None:
            self.geoip_sub_region = geoip_sub_region
        if event_meta is not None:
            self.event_meta = event_meta
        self.created = created

    @property
    def id(self):
        """Gets the id of this UserEvent.  # noqa: E501


        :return: The id of this UserEvent.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserEvent.


        :param id: The id of this UserEvent.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this UserEvent.  # noqa: E501


        :return: The type of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserEvent.


        :param type: The type of this UserEvent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["apiKeyCreated", "deleverageExecution", "depositConfirmed", "depositPending", "banZeroVolumeApiUser", "liquidationOrderPlaced", "login", "pgpMaskedEmail", "pgpTestEmail", "passwordChanged", "positionStateLiquidated", "positionStateWarning", "resetPasswordConfirmed", "resetPasswordRequest", "transferCanceled", "transferCompleted", "transferReceived", "transferRequested", "twoFactorDisabled", "twoFactorEnabled", "withdrawalCanceled", "withdrawalCompleted", "withdrawalConfirmed", "withdrawalRequested", "addressSkipConfirmRequested", "addressSkipConfirmVerified", "verify"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this UserEvent.  # noqa: E501


        :return: The status of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserEvent.


        :param status: The status of this UserEvent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["success", "failure"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this UserEvent.  # noqa: E501


        :return: The user_id of this UserEvent.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserEvent.


        :param user_id: The user_id of this UserEvent.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def created_by_id(self):
        """Gets the created_by_id of this UserEvent.  # noqa: E501


        :return: The created_by_id of this UserEvent.  # noqa: E501
        :rtype: float
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this UserEvent.


        :param created_by_id: The created_by_id of this UserEvent.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and created_by_id is None:
            raise ValueError("Invalid value for `created_by_id`, must not be `None`")  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def ip(self):
        """Gets the ip of this UserEvent.  # noqa: E501


        :return: The ip of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this UserEvent.


        :param ip: The ip of this UserEvent.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def geoip_country(self):
        """Gets the geoip_country of this UserEvent.  # noqa: E501


        :return: The geoip_country of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._geoip_country

    @geoip_country.setter
    def geoip_country(self, geoip_country):
        """Sets the geoip_country of this UserEvent.


        :param geoip_country: The geoip_country of this UserEvent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                geoip_country is not None and len(geoip_country) > 2):
            raise ValueError("Invalid value for `geoip_country`, length must be less than or equal to `2`")  # noqa: E501

        self._geoip_country = geoip_country

    @property
    def geoip_region(self):
        """Gets the geoip_region of this UserEvent.  # noqa: E501


        :return: The geoip_region of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._geoip_region

    @geoip_region.setter
    def geoip_region(self, geoip_region):
        """Sets the geoip_region of this UserEvent.


        :param geoip_region: The geoip_region of this UserEvent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                geoip_region is not None and len(geoip_region) > 3):
            raise ValueError("Invalid value for `geoip_region`, length must be less than or equal to `3`")  # noqa: E501

        self._geoip_region = geoip_region

    @property
    def geoip_sub_region(self):
        """Gets the geoip_sub_region of this UserEvent.  # noqa: E501


        :return: The geoip_sub_region of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._geoip_sub_region

    @geoip_sub_region.setter
    def geoip_sub_region(self, geoip_sub_region):
        """Sets the geoip_sub_region of this UserEvent.


        :param geoip_sub_region: The geoip_sub_region of this UserEvent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                geoip_sub_region is not None and len(geoip_sub_region) > 3):
            raise ValueError("Invalid value for `geoip_sub_region`, length must be less than or equal to `3`")  # noqa: E501

        self._geoip_sub_region = geoip_sub_region

    @property
    def event_meta(self):
        """Gets the event_meta of this UserEvent.  # noqa: E501


        :return: The event_meta of this UserEvent.  # noqa: E501
        :rtype: object
        """
        return self._event_meta

    @event_meta.setter
    def event_meta(self, event_meta):
        """Sets the event_meta of this UserEvent.


        :param event_meta: The event_meta of this UserEvent.  # noqa: E501
        :type: object
        """

        self._event_meta = event_meta

    @property
    def created(self):
        """Gets the created of this UserEvent.  # noqa: E501


        :return: The created of this UserEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserEvent.


        :param created: The created of this UserEvent.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserEvent):
            return True

        return self.to_dict() != other.to_dict()
