/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGAPIKey.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGAPIKey::SWGAPIKey(QString json) {
    init();
    this->fromJson(json);
}

SWGAPIKey::SWGAPIKey() {
    init();
}

SWGAPIKey::~SWGAPIKey() {
    this->cleanup();
}

void
SWGAPIKey::init() {
    id = new QString("");
    m_id_isSet = false;
    secret = new QString("");
    m_secret_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    nonce = 0.0;
    m_nonce_isSet = false;
    cidr = new QString("");
    m_cidr_isSet = false;
    permissions = new QList<SWGX-any*>();
    m_permissions_isSet = false;
    enabled = false;
    m_enabled_isSet = false;
    user_id = 0.0;
    m_user_id_isSet = false;
    created = NULL;
    m_created_isSet = false;
}

void
SWGAPIKey::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(secret != nullptr) { 
        delete secret;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(nonce != nullptr) { 
        delete nonce;
    }
    if(cidr != nullptr) { 
        delete cidr;
    }
    if(permissions != nullptr) { 
        auto arr = permissions;
        for(auto o: *arr) { 
            delete o;
        }
        delete permissions;
    }

    if(user_id != nullptr) { 
        delete user_id;
    }
    if(created != nullptr) { 
        delete created;
    }
}

SWGAPIKey*
SWGAPIKey::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGAPIKey::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    
    ::Swagger::setValue(&secret, pJson["secret"], "QString", "QString");
    
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&nonce, pJson["nonce"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&cidr, pJson["cidr"], "QString", "QString");
    
    
    ::Swagger::setValue(&permissions, pJson["permissions"], "QList", "SWGX-any");
    ::Swagger::setValue(&enabled, pJson["enabled"], "bool", "");
    
    ::Swagger::setValue(&user_id, pJson["userId"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&created, pJson["created"], "QDateTime", "QDateTime");
    
}

QString
SWGAPIKey::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGAPIKey::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(secret != nullptr && *secret != QString("")){
        toJsonValue(QString("secret"), secret, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if((nonce != nullptr) && (nonce->isSet())){
        toJsonValue(QString("nonce"), nonce, obj, QString("SWGNumber"));
    }
    if(cidr != nullptr && *cidr != QString("")){
        toJsonValue(QString("cidr"), cidr, obj, QString("QString"));
    }
    if(permissions->size() > 0){
        toJsonArray((QList<void*>*)permissions, obj, "permissions", "SWGX-any");
    }
    if(m_enabled_isSet){
        obj.insert("enabled", QJsonValue(enabled));
    }
    if((user_id != nullptr) && (user_id->isSet())){
        toJsonValue(QString("userId"), user_id, obj, QString("SWGNumber"));
    }
    if(created != nullptr) { 
        toJsonValue(QString("created"), created, obj, QString("QDateTime"));
    }

    return obj;
}

QString*
SWGAPIKey::getId() {
    return id;
}
void
SWGAPIKey::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
SWGAPIKey::getSecret() {
    return secret;
}
void
SWGAPIKey::setSecret(QString* secret) {
    this->secret = secret;
    this->m_secret_isSet = true;
}

QString*
SWGAPIKey::getName() {
    return name;
}
void
SWGAPIKey::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

SWGNumber*
SWGAPIKey::getNonce() {
    return nonce;
}
void
SWGAPIKey::setNonce(SWGNumber* nonce) {
    this->nonce = nonce;
    this->m_nonce_isSet = true;
}

QString*
SWGAPIKey::getCidr() {
    return cidr;
}
void
SWGAPIKey::setCidr(QString* cidr) {
    this->cidr = cidr;
    this->m_cidr_isSet = true;
}

QList<SWGX-any*>*
SWGAPIKey::getPermissions() {
    return permissions;
}
void
SWGAPIKey::setPermissions(QList<SWGX-any*>* permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

bool
SWGAPIKey::isEnabled() {
    return enabled;
}
void
SWGAPIKey::setEnabled(bool enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

SWGNumber*
SWGAPIKey::getUserId() {
    return user_id;
}
void
SWGAPIKey::setUserId(SWGNumber* user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

QDateTime*
SWGAPIKey::getCreated() {
    return created;
}
void
SWGAPIKey::setCreated(QDateTime* created) {
    this->created = created;
    this->m_created_isSet = true;
}


bool
SWGAPIKey::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(secret != nullptr && *secret != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(nonce != nullptr && nonce->isSet()){ isObjectUpdated = true; break;}
        if(cidr != nullptr && *cidr != QString("")){ isObjectUpdated = true; break;}
        if(permissions->size() > 0){ isObjectUpdated = true; break;}
        if(m_enabled_isSet){ isObjectUpdated = true; break;}
        if(user_id != nullptr && user_id->isSet()){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

