/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGAPIKey.h
 *
 * Persistent API Keys for Developers
 */

#ifndef SWGAPIKey_H_
#define SWGAPIKey_H_

#include <QJsonObject>


#include "SWGNumber.h"
#include "SWGX-any.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGAPIKey: public SWGObject {
public:
    SWGAPIKey();
    SWGAPIKey(QString json);
    ~SWGAPIKey();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGAPIKey* fromJson(QString jsonString) override;

    QString* getId();
    void setId(QString* id);

    QString* getSecret();
    void setSecret(QString* secret);

    QString* getName();
    void setName(QString* name);

    SWGNumber* getNonce();
    void setNonce(SWGNumber* nonce);

    QString* getCidr();
    void setCidr(QString* cidr);

    QList<SWGX-any*>* getPermissions();
    void setPermissions(QList<SWGX-any*>* permissions);

    bool isEnabled();
    void setEnabled(bool enabled);

    SWGNumber* getUserId();
    void setUserId(SWGNumber* user_id);

    QDateTime* getCreated();
    void setCreated(QDateTime* created);


    virtual bool isSet() override;

private:
    QString* id;
    bool m_id_isSet;

    QString* secret;
    bool m_secret_isSet;

    QString* name;
    bool m_name_isSet;

    SWGNumber* nonce;
    bool m_nonce_isSet;

    QString* cidr;
    bool m_cidr_isSet;

    QList<SWGX-any*>* permissions;
    bool m_permissions_isSet;

    bool enabled;
    bool m_enabled_isSet;

    SWGNumber* user_id;
    bool m_user_id_isSet;

    QDateTime* created;
    bool m_created_isSet;

};

}

#endif /* SWGAPIKey_H_ */
