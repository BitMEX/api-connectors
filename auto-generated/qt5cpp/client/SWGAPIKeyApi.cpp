/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAPIKeyApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGAPIKeyApi::SWGAPIKeyApi() {}

SWGAPIKeyApi::~SWGAPIKeyApi() {}

SWGAPIKeyApi::SWGAPIKeyApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAPIKeyApi::aPIKey_disable(QString* api_key_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apiKey/disable");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (api_key_id != nullptr) {
        input.add_var("apiKeyID", *api_key_id);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAPIKeyApi::aPIKey_disableCallback);

    worker->execute(&input);
}

void
SWGAPIKeyApi::aPIKey_disableCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGAPIKey* output = static_cast<SWGAPIKey*>(create(json, QString("SWGAPIKey")));
    auto wrapper = new SWGQObjectWrapper<SWGAPIKey*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit aPIKey_disableSignal(output);
    } else {
        emit aPIKey_disableSignalE(output, error_type, error_str);
        emit aPIKey_disableSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAPIKeyApi::aPIKey_enable(QString* api_key_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apiKey/enable");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (api_key_id != nullptr) {
        input.add_var("apiKeyID", *api_key_id);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAPIKeyApi::aPIKey_enableCallback);

    worker->execute(&input);
}

void
SWGAPIKeyApi::aPIKey_enableCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGAPIKey* output = static_cast<SWGAPIKey*>(create(json, QString("SWGAPIKey")));
    auto wrapper = new SWGQObjectWrapper<SWGAPIKey*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit aPIKey_enableSignal(output);
    } else {
        emit aPIKey_enableSignalE(output, error_type, error_str);
        emit aPIKey_enableSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAPIKeyApi::aPIKey_get(bool reverse) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apiKey");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("reverse"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(reverse)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAPIKeyApi::aPIKey_getCallback);

    worker->execute(&input);
}

void
SWGAPIKeyApi::aPIKey_getCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGAPIKey*>* output = new QList<SWGAPIKey*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGAPIKey*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGAPIKey* o = new SWGAPIKey();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGAPIKey*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit aPIKey_getSignal(output);
    } else {
        emit aPIKey_getSignalE(output, error_type, error_str);
        emit aPIKey_getSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAPIKeyApi::aPIKey_new(QString* name, QString* cidr, QString* permissions, bool enabled, QString* token) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apiKey");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (name != nullptr) {
        input.add_var("name", *name);
    }
    if (cidr != nullptr) {
        input.add_var("cidr", *cidr);
    }
    if (permissions != nullptr) {
        input.add_var("permissions", *permissions);
    }
    if (enabled != nullptr) {
        input.add_var("enabled", *enabled);
    }
    if (token != nullptr) {
        input.add_var("token", *token);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAPIKeyApi::aPIKey_newCallback);

    worker->execute(&input);
}

void
SWGAPIKeyApi::aPIKey_newCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGAPIKey* output = static_cast<SWGAPIKey*>(create(json, QString("SWGAPIKey")));
    auto wrapper = new SWGQObjectWrapper<SWGAPIKey*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit aPIKey_newSignal(output);
    } else {
        emit aPIKey_newSignalE(output, error_type, error_str);
        emit aPIKey_newSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAPIKeyApi::aPIKey_remove(QString* api_key_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apiKey");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");

    if (api_key_id != nullptr) {
        input.add_var("apiKeyID", *api_key_id);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAPIKeyApi::aPIKey_removeCallback);

    worker->execute(&input);
}

void
SWGAPIKeyApi::aPIKey_removeCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGInline_response_200* output = static_cast<SWGInline_response_200*>(create(json, QString("SWGInline_response_200")));
    auto wrapper = new SWGQObjectWrapper<SWGInline_response_200*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit aPIKey_removeSignal(output);
    } else {
        emit aPIKey_removeSignalE(output, error_type, error_str);
        emit aPIKey_removeSignalEFull(worker, error_type, error_str);
    }
}


}
