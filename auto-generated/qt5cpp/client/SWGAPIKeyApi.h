/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGAPIKeyApi_H_
#define _SWG_SWGAPIKeyApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGAPIKey.h"
#include "SWGError.h"
#include "SWGInline_response_200.h"

#include <QObject>

namespace Swagger {

class SWGAPIKeyApi: public QObject {
    Q_OBJECT

public:
    SWGAPIKeyApi();
    SWGAPIKeyApi(QString host, QString basePath);
    ~SWGAPIKeyApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void aPIKey_disable(QString* api_key_id);
    void aPIKey_enable(QString* api_key_id);
    void aPIKey_get(bool reverse);
    void aPIKey_new(QString* name, QString* cidr, QString* permissions, bool enabled, QString* token);
    void aPIKey_remove(QString* api_key_id);
    
private:
    void aPIKey_disableCallback (SWGHttpRequestWorker * worker);
    void aPIKey_enableCallback (SWGHttpRequestWorker * worker);
    void aPIKey_getCallback (SWGHttpRequestWorker * worker);
    void aPIKey_newCallback (SWGHttpRequestWorker * worker);
    void aPIKey_removeCallback (SWGHttpRequestWorker * worker);
    
signals:
    void aPIKey_disableSignal(SWGAPIKey* summary);
    void aPIKey_enableSignal(SWGAPIKey* summary);
    void aPIKey_getSignal(QList<SWGAPIKey*>* summary);
    void aPIKey_newSignal(SWGAPIKey* summary);
    void aPIKey_removeSignal(SWGInline_response_200* summary);
    
    void aPIKey_disableSignalE(SWGAPIKey* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_enableSignalE(SWGAPIKey* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_getSignalE(QList<SWGAPIKey*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_newSignalE(SWGAPIKey* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_removeSignalE(SWGInline_response_200* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void aPIKey_disableSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_enableSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_getSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_newSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void aPIKey_removeSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
