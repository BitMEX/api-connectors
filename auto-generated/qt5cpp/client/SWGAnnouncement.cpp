/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGAnnouncement.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGAnnouncement::SWGAnnouncement(QString json) {
    init();
    this->fromJson(json);
}

SWGAnnouncement::SWGAnnouncement() {
    init();
}

SWGAnnouncement::~SWGAnnouncement() {
    this->cleanup();
}

void
SWGAnnouncement::init() {
    id = 0.0;
    m_id_isSet = false;
    link = new QString("");
    m_link_isSet = false;
    title = new QString("");
    m_title_isSet = false;
    content = new QString("");
    m_content_isSet = false;
    date = NULL;
    m_date_isSet = false;
}

void
SWGAnnouncement::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(link != nullptr) { 
        delete link;
    }
    if(title != nullptr) { 
        delete title;
    }
    if(content != nullptr) { 
        delete content;
    }
    if(date != nullptr) { 
        delete date;
    }
}

SWGAnnouncement*
SWGAnnouncement::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGAnnouncement::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&link, pJson["link"], "QString", "QString");
    
    ::Swagger::setValue(&title, pJson["title"], "QString", "QString");
    
    ::Swagger::setValue(&content, pJson["content"], "QString", "QString");
    
    ::Swagger::setValue(&date, pJson["date"], "QDateTime", "QDateTime");
    
}

QString
SWGAnnouncement::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGAnnouncement::asJsonObject() {
    QJsonObject obj;
    if((id != nullptr) && (id->isSet())){
        toJsonValue(QString("id"), id, obj, QString("SWGNumber"));
    }
    if(link != nullptr && *link != QString("")){
        toJsonValue(QString("link"), link, obj, QString("QString"));
    }
    if(title != nullptr && *title != QString("")){
        toJsonValue(QString("title"), title, obj, QString("QString"));
    }
    if(content != nullptr && *content != QString("")){
        toJsonValue(QString("content"), content, obj, QString("QString"));
    }
    if(date != nullptr) { 
        toJsonValue(QString("date"), date, obj, QString("QDateTime"));
    }

    return obj;
}

SWGNumber*
SWGAnnouncement::getId() {
    return id;
}
void
SWGAnnouncement::setId(SWGNumber* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
SWGAnnouncement::getLink() {
    return link;
}
void
SWGAnnouncement::setLink(QString* link) {
    this->link = link;
    this->m_link_isSet = true;
}

QString*
SWGAnnouncement::getTitle() {
    return title;
}
void
SWGAnnouncement::setTitle(QString* title) {
    this->title = title;
    this->m_title_isSet = true;
}

QString*
SWGAnnouncement::getContent() {
    return content;
}
void
SWGAnnouncement::setContent(QString* content) {
    this->content = content;
    this->m_content_isSet = true;
}

QDateTime*
SWGAnnouncement::getDate() {
    return date;
}
void
SWGAnnouncement::setDate(QDateTime* date) {
    this->date = date;
    this->m_date_isSet = true;
}


bool
SWGAnnouncement::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && id->isSet()){ isObjectUpdated = true; break;}
        if(link != nullptr && *link != QString("")){ isObjectUpdated = true; break;}
        if(title != nullptr && *title != QString("")){ isObjectUpdated = true; break;}
        if(content != nullptr && *content != QString("")){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

