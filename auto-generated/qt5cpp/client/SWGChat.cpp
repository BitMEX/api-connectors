/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGChat.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGChat::SWGChat(QString json) {
    init();
    this->fromJson(json);
}

SWGChat::SWGChat() {
    init();
}

SWGChat::~SWGChat() {
    this->cleanup();
}

void
SWGChat::init() {
    id = 0.0;
    m_id_isSet = false;
    date = NULL;
    m_date_isSet = false;
    user = new QString("");
    m_user_isSet = false;
    message = new QString("");
    m_message_isSet = false;
    html = new QString("");
    m_html_isSet = false;
    from_bot = false;
    m_from_bot_isSet = false;
    channel_id = 0.0;
    m_channel_id_isSet = false;
}

void
SWGChat::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(date != nullptr) { 
        delete date;
    }
    if(user != nullptr) { 
        delete user;
    }
    if(message != nullptr) { 
        delete message;
    }
    if(html != nullptr) { 
        delete html;
    }


}

SWGChat*
SWGChat::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGChat::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&date, pJson["date"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&user, pJson["user"], "QString", "QString");
    
    ::Swagger::setValue(&message, pJson["message"], "QString", "QString");
    
    ::Swagger::setValue(&html, pJson["html"], "QString", "QString");
    
    ::Swagger::setValue(&from_bot, pJson["fromBot"], "bool", "");
    
    ::Swagger::setValue(&channel_id, pJson["channelID"], "double", "");
    
}

QString
SWGChat::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGChat::asJsonObject() {
    QJsonObject obj;
    if((id != nullptr) && (id->isSet())){
        toJsonValue(QString("id"), id, obj, QString("SWGNumber"));
    }
    if(date != nullptr) { 
        toJsonValue(QString("date"), date, obj, QString("QDateTime"));
    }
    if(user != nullptr && *user != QString("")){
        toJsonValue(QString("user"), user, obj, QString("QString"));
    }
    if(message != nullptr && *message != QString("")){
        toJsonValue(QString("message"), message, obj, QString("QString"));
    }
    if(html != nullptr && *html != QString("")){
        toJsonValue(QString("html"), html, obj, QString("QString"));
    }
    if(m_from_bot_isSet){
        obj.insert("fromBot", QJsonValue(from_bot));
    }
    if(m_channel_id_isSet){
        obj.insert("channelID", QJsonValue(channel_id));
    }

    return obj;
}

SWGNumber*
SWGChat::getId() {
    return id;
}
void
SWGChat::setId(SWGNumber* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QDateTime*
SWGChat::getDate() {
    return date;
}
void
SWGChat::setDate(QDateTime* date) {
    this->date = date;
    this->m_date_isSet = true;
}

QString*
SWGChat::getUser() {
    return user;
}
void
SWGChat::setUser(QString* user) {
    this->user = user;
    this->m_user_isSet = true;
}

QString*
SWGChat::getMessage() {
    return message;
}
void
SWGChat::setMessage(QString* message) {
    this->message = message;
    this->m_message_isSet = true;
}

QString*
SWGChat::getHtml() {
    return html;
}
void
SWGChat::setHtml(QString* html) {
    this->html = html;
    this->m_html_isSet = true;
}

bool
SWGChat::isFromBot() {
    return from_bot;
}
void
SWGChat::setFromBot(bool from_bot) {
    this->from_bot = from_bot;
    this->m_from_bot_isSet = true;
}

double
SWGChat::getChannelId() {
    return channel_id;
}
void
SWGChat::setChannelId(double channel_id) {
    this->channel_id = channel_id;
    this->m_channel_id_isSet = true;
}


bool
SWGChat::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && id->isSet()){ isObjectUpdated = true; break;}
        
        if(user != nullptr && *user != QString("")){ isObjectUpdated = true; break;}
        if(message != nullptr && *message != QString("")){ isObjectUpdated = true; break;}
        if(html != nullptr && *html != QString("")){ isObjectUpdated = true; break;}
        if(m_from_bot_isSet){ isObjectUpdated = true; break;}
        if(m_channel_id_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

