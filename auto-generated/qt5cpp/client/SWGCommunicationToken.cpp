/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCommunicationToken.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGCommunicationToken::SWGCommunicationToken(QString json) {
    init();
    this->fromJson(json);
}

SWGCommunicationToken::SWGCommunicationToken() {
    init();
}

SWGCommunicationToken::~SWGCommunicationToken() {
    this->cleanup();
}

void
SWGCommunicationToken::init() {
    id = new QString("");
    m_id_isSet = false;
    user_id = 0.0;
    m_user_id_isSet = false;
    device_token = new QString("");
    m_device_token_isSet = false;
    channel = new QString("");
    m_channel_isSet = false;
}

void
SWGCommunicationToken::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(user_id != nullptr) { 
        delete user_id;
    }
    if(device_token != nullptr) { 
        delete device_token;
    }
    if(channel != nullptr) { 
        delete channel;
    }
}

SWGCommunicationToken*
SWGCommunicationToken::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCommunicationToken::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    
    ::Swagger::setValue(&user_id, pJson["userId"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&device_token, pJson["deviceToken"], "QString", "QString");
    
    ::Swagger::setValue(&channel, pJson["channel"], "QString", "QString");
    
}

QString
SWGCommunicationToken::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGCommunicationToken::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if((user_id != nullptr) && (user_id->isSet())){
        toJsonValue(QString("userId"), user_id, obj, QString("SWGNumber"));
    }
    if(device_token != nullptr && *device_token != QString("")){
        toJsonValue(QString("deviceToken"), device_token, obj, QString("QString"));
    }
    if(channel != nullptr && *channel != QString("")){
        toJsonValue(QString("channel"), channel, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGCommunicationToken::getId() {
    return id;
}
void
SWGCommunicationToken::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

SWGNumber*
SWGCommunicationToken::getUserId() {
    return user_id;
}
void
SWGCommunicationToken::setUserId(SWGNumber* user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

QString*
SWGCommunicationToken::getDeviceToken() {
    return device_token;
}
void
SWGCommunicationToken::setDeviceToken(QString* device_token) {
    this->device_token = device_token;
    this->m_device_token_isSet = true;
}

QString*
SWGCommunicationToken::getChannel() {
    return channel;
}
void
SWGCommunicationToken::setChannel(QString* channel) {
    this->channel = channel;
    this->m_channel_isSet = true;
}


bool
SWGCommunicationToken::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(user_id != nullptr && user_id->isSet()){ isObjectUpdated = true; break;}
        if(device_token != nullptr && *device_token != QString("")){ isObjectUpdated = true; break;}
        if(channel != nullptr && *channel != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

