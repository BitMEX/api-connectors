/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGFunding.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGFunding::SWGFunding(QString json) {
    init();
    this->fromJson(json);
}

SWGFunding::SWGFunding() {
    init();
}

SWGFunding::~SWGFunding() {
    this->cleanup();
}

void
SWGFunding::init() {
    timestamp = NULL;
    m_timestamp_isSet = false;
    symbol = new QString("");
    m_symbol_isSet = false;
    funding_interval = NULL;
    m_funding_interval_isSet = false;
    funding_rate = 0.0;
    m_funding_rate_isSet = false;
    funding_rate_daily = 0.0;
    m_funding_rate_daily_isSet = false;
}

void
SWGFunding::cleanup() {
    if(timestamp != nullptr) { 
        delete timestamp;
    }
    if(symbol != nullptr) { 
        delete symbol;
    }
    if(funding_interval != nullptr) { 
        delete funding_interval;
    }


}

SWGFunding*
SWGFunding::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGFunding::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&funding_interval, pJson["fundingInterval"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&funding_rate, pJson["fundingRate"], "double", "");
    
    ::Swagger::setValue(&funding_rate_daily, pJson["fundingRateDaily"], "double", "");
    
}

QString
SWGFunding::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGFunding::asJsonObject() {
    QJsonObject obj;
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(funding_interval != nullptr) { 
        toJsonValue(QString("fundingInterval"), funding_interval, obj, QString("QDateTime"));
    }
    if(m_funding_rate_isSet){
        obj.insert("fundingRate", QJsonValue(funding_rate));
    }
    if(m_funding_rate_daily_isSet){
        obj.insert("fundingRateDaily", QJsonValue(funding_rate_daily));
    }

    return obj;
}

QDateTime*
SWGFunding::getTimestamp() {
    return timestamp;
}
void
SWGFunding::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

QString*
SWGFunding::getSymbol() {
    return symbol;
}
void
SWGFunding::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

QDateTime*
SWGFunding::getFundingInterval() {
    return funding_interval;
}
void
SWGFunding::setFundingInterval(QDateTime* funding_interval) {
    this->funding_interval = funding_interval;
    this->m_funding_interval_isSet = true;
}

double
SWGFunding::getFundingRate() {
    return funding_rate;
}
void
SWGFunding::setFundingRate(double funding_rate) {
    this->funding_rate = funding_rate;
    this->m_funding_rate_isSet = true;
}

double
SWGFunding::getFundingRateDaily() {
    return funding_rate_daily;
}
void
SWGFunding::setFundingRateDaily(double funding_rate_daily) {
    this->funding_rate_daily = funding_rate_daily;
    this->m_funding_rate_daily_isSet = true;
}


bool
SWGFunding::isSet(){
    bool isObjectUpdated = false;
    do{
        
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        
        if(m_funding_rate_isSet){ isObjectUpdated = true; break;}
        if(m_funding_rate_daily_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

