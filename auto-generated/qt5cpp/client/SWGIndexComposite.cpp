/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGIndexComposite.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGIndexComposite::SWGIndexComposite(QString json) {
    init();
    this->fromJson(json);
}

SWGIndexComposite::SWGIndexComposite() {
    init();
}

SWGIndexComposite::~SWGIndexComposite() {
    this->cleanup();
}

void
SWGIndexComposite::init() {
    timestamp = NULL;
    m_timestamp_isSet = false;
    symbol = new QString("");
    m_symbol_isSet = false;
    index_symbol = new QString("");
    m_index_symbol_isSet = false;
    reference = new QString("");
    m_reference_isSet = false;
    last_price = 0.0;
    m_last_price_isSet = false;
    weight = 0.0;
    m_weight_isSet = false;
    logged = NULL;
    m_logged_isSet = false;
}

void
SWGIndexComposite::cleanup() {
    if(timestamp != nullptr) { 
        delete timestamp;
    }
    if(symbol != nullptr) { 
        delete symbol;
    }
    if(index_symbol != nullptr) { 
        delete index_symbol;
    }
    if(reference != nullptr) { 
        delete reference;
    }


    if(logged != nullptr) { 
        delete logged;
    }
}

SWGIndexComposite*
SWGIndexComposite::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGIndexComposite::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&index_symbol, pJson["indexSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&reference, pJson["reference"], "QString", "QString");
    
    ::Swagger::setValue(&last_price, pJson["lastPrice"], "double", "");
    
    ::Swagger::setValue(&weight, pJson["weight"], "double", "");
    
    ::Swagger::setValue(&logged, pJson["logged"], "QDateTime", "QDateTime");
    
}

QString
SWGIndexComposite::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGIndexComposite::asJsonObject() {
    QJsonObject obj;
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(index_symbol != nullptr && *index_symbol != QString("")){
        toJsonValue(QString("indexSymbol"), index_symbol, obj, QString("QString"));
    }
    if(reference != nullptr && *reference != QString("")){
        toJsonValue(QString("reference"), reference, obj, QString("QString"));
    }
    if(m_last_price_isSet){
        obj.insert("lastPrice", QJsonValue(last_price));
    }
    if(m_weight_isSet){
        obj.insert("weight", QJsonValue(weight));
    }
    if(logged != nullptr) { 
        toJsonValue(QString("logged"), logged, obj, QString("QDateTime"));
    }

    return obj;
}

QDateTime*
SWGIndexComposite::getTimestamp() {
    return timestamp;
}
void
SWGIndexComposite::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

QString*
SWGIndexComposite::getSymbol() {
    return symbol;
}
void
SWGIndexComposite::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

QString*
SWGIndexComposite::getIndexSymbol() {
    return index_symbol;
}
void
SWGIndexComposite::setIndexSymbol(QString* index_symbol) {
    this->index_symbol = index_symbol;
    this->m_index_symbol_isSet = true;
}

QString*
SWGIndexComposite::getReference() {
    return reference;
}
void
SWGIndexComposite::setReference(QString* reference) {
    this->reference = reference;
    this->m_reference_isSet = true;
}

double
SWGIndexComposite::getLastPrice() {
    return last_price;
}
void
SWGIndexComposite::setLastPrice(double last_price) {
    this->last_price = last_price;
    this->m_last_price_isSet = true;
}

double
SWGIndexComposite::getWeight() {
    return weight;
}
void
SWGIndexComposite::setWeight(double weight) {
    this->weight = weight;
    this->m_weight_isSet = true;
}

QDateTime*
SWGIndexComposite::getLogged() {
    return logged;
}
void
SWGIndexComposite::setLogged(QDateTime* logged) {
    this->logged = logged;
    this->m_logged_isSet = true;
}


bool
SWGIndexComposite::isSet(){
    bool isObjectUpdated = false;
    do{
        
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(index_symbol != nullptr && *index_symbol != QString("")){ isObjectUpdated = true; break;}
        if(reference != nullptr && *reference != QString("")){ isObjectUpdated = true; break;}
        if(m_last_price_isSet){ isObjectUpdated = true; break;}
        if(m_weight_isSet){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

