/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGInstrument.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGInstrument::SWGInstrument(QString json) {
    init();
    this->fromJson(json);
}

SWGInstrument::SWGInstrument() {
    init();
}

SWGInstrument::~SWGInstrument() {
    this->cleanup();
}

void
SWGInstrument::init() {
    symbol = new QString("");
    m_symbol_isSet = false;
    root_symbol = new QString("");
    m_root_symbol_isSet = false;
    state = new QString("");
    m_state_isSet = false;
    typ = new QString("");
    m_typ_isSet = false;
    listing = NULL;
    m_listing_isSet = false;
    front = NULL;
    m_front_isSet = false;
    expiry = NULL;
    m_expiry_isSet = false;
    settle = NULL;
    m_settle_isSet = false;
    relist_interval = NULL;
    m_relist_interval_isSet = false;
    inverse_leg = new QString("");
    m_inverse_leg_isSet = false;
    sell_leg = new QString("");
    m_sell_leg_isSet = false;
    buy_leg = new QString("");
    m_buy_leg_isSet = false;
    option_strike_pcnt = 0.0;
    m_option_strike_pcnt_isSet = false;
    option_strike_round = 0.0;
    m_option_strike_round_isSet = false;
    option_strike_price = 0.0;
    m_option_strike_price_isSet = false;
    option_multiplier = 0.0;
    m_option_multiplier_isSet = false;
    position_currency = new QString("");
    m_position_currency_isSet = false;
    underlying = new QString("");
    m_underlying_isSet = false;
    quote_currency = new QString("");
    m_quote_currency_isSet = false;
    underlying_symbol = new QString("");
    m_underlying_symbol_isSet = false;
    reference = new QString("");
    m_reference_isSet = false;
    reference_symbol = new QString("");
    m_reference_symbol_isSet = false;
    calc_interval = NULL;
    m_calc_interval_isSet = false;
    publish_interval = NULL;
    m_publish_interval_isSet = false;
    publish_time = NULL;
    m_publish_time_isSet = false;
    max_order_qty = 0.0;
    m_max_order_qty_isSet = false;
    max_price = 0.0;
    m_max_price_isSet = false;
    lot_size = 0.0;
    m_lot_size_isSet = false;
    tick_size = 0.0;
    m_tick_size_isSet = false;
    multiplier = 0.0;
    m_multiplier_isSet = false;
    settl_currency = new QString("");
    m_settl_currency_isSet = false;
    underlying_to_position_multiplier = 0.0;
    m_underlying_to_position_multiplier_isSet = false;
    underlying_to_settle_multiplier = 0.0;
    m_underlying_to_settle_multiplier_isSet = false;
    quote_to_settle_multiplier = 0.0;
    m_quote_to_settle_multiplier_isSet = false;
    is_quanto = false;
    m_is_quanto_isSet = false;
    is_inverse = false;
    m_is_inverse_isSet = false;
    init_margin = 0.0;
    m_init_margin_isSet = false;
    maint_margin = 0.0;
    m_maint_margin_isSet = false;
    risk_limit = 0.0;
    m_risk_limit_isSet = false;
    risk_step = 0.0;
    m_risk_step_isSet = false;
    limit = 0.0;
    m_limit_isSet = false;
    capped = false;
    m_capped_isSet = false;
    taxed = false;
    m_taxed_isSet = false;
    deleverage = false;
    m_deleverage_isSet = false;
    maker_fee = 0.0;
    m_maker_fee_isSet = false;
    taker_fee = 0.0;
    m_taker_fee_isSet = false;
    settlement_fee = 0.0;
    m_settlement_fee_isSet = false;
    insurance_fee = 0.0;
    m_insurance_fee_isSet = false;
    funding_base_symbol = new QString("");
    m_funding_base_symbol_isSet = false;
    funding_quote_symbol = new QString("");
    m_funding_quote_symbol_isSet = false;
    funding_premium_symbol = new QString("");
    m_funding_premium_symbol_isSet = false;
    funding_timestamp = NULL;
    m_funding_timestamp_isSet = false;
    funding_interval = NULL;
    m_funding_interval_isSet = false;
    funding_rate = 0.0;
    m_funding_rate_isSet = false;
    indicative_funding_rate = 0.0;
    m_indicative_funding_rate_isSet = false;
    rebalance_timestamp = NULL;
    m_rebalance_timestamp_isSet = false;
    rebalance_interval = NULL;
    m_rebalance_interval_isSet = false;
    opening_timestamp = NULL;
    m_opening_timestamp_isSet = false;
    closing_timestamp = NULL;
    m_closing_timestamp_isSet = false;
    session_interval = NULL;
    m_session_interval_isSet = false;
    prev_close_price = 0.0;
    m_prev_close_price_isSet = false;
    limit_down_price = 0.0;
    m_limit_down_price_isSet = false;
    limit_up_price = 0.0;
    m_limit_up_price_isSet = false;
    bankrupt_limit_down_price = 0.0;
    m_bankrupt_limit_down_price_isSet = false;
    bankrupt_limit_up_price = 0.0;
    m_bankrupt_limit_up_price_isSet = false;
    prev_total_volume = 0.0;
    m_prev_total_volume_isSet = false;
    total_volume = 0.0;
    m_total_volume_isSet = false;
    volume = 0.0;
    m_volume_isSet = false;
    volume24h = 0.0;
    m_volume24h_isSet = false;
    prev_total_turnover = 0.0;
    m_prev_total_turnover_isSet = false;
    total_turnover = 0.0;
    m_total_turnover_isSet = false;
    turnover = 0.0;
    m_turnover_isSet = false;
    turnover24h = 0.0;
    m_turnover24h_isSet = false;
    prev_price24h = 0.0;
    m_prev_price24h_isSet = false;
    vwap = 0.0;
    m_vwap_isSet = false;
    high_price = 0.0;
    m_high_price_isSet = false;
    low_price = 0.0;
    m_low_price_isSet = false;
    last_price = 0.0;
    m_last_price_isSet = false;
    last_price_protected = 0.0;
    m_last_price_protected_isSet = false;
    last_tick_direction = new QString("");
    m_last_tick_direction_isSet = false;
    last_change_pcnt = 0.0;
    m_last_change_pcnt_isSet = false;
    bid_price = 0.0;
    m_bid_price_isSet = false;
    mid_price = 0.0;
    m_mid_price_isSet = false;
    ask_price = 0.0;
    m_ask_price_isSet = false;
    impact_bid_price = 0.0;
    m_impact_bid_price_isSet = false;
    impact_mid_price = 0.0;
    m_impact_mid_price_isSet = false;
    impact_ask_price = 0.0;
    m_impact_ask_price_isSet = false;
    has_liquidity = false;
    m_has_liquidity_isSet = false;
    open_interest = 0.0;
    m_open_interest_isSet = false;
    open_value = 0.0;
    m_open_value_isSet = false;
    fair_method = new QString("");
    m_fair_method_isSet = false;
    fair_basis_rate = 0.0;
    m_fair_basis_rate_isSet = false;
    fair_basis = 0.0;
    m_fair_basis_isSet = false;
    fair_price = 0.0;
    m_fair_price_isSet = false;
    mark_method = new QString("");
    m_mark_method_isSet = false;
    mark_price = 0.0;
    m_mark_price_isSet = false;
    indicative_tax_rate = 0.0;
    m_indicative_tax_rate_isSet = false;
    indicative_settle_price = 0.0;
    m_indicative_settle_price_isSet = false;
    option_underlying_price = 0.0;
    m_option_underlying_price_isSet = false;
    settled_price = 0.0;
    m_settled_price_isSet = false;
    timestamp = NULL;
    m_timestamp_isSet = false;
}

void
SWGInstrument::cleanup() {
    if(symbol != nullptr) { 
        delete symbol;
    }
    if(root_symbol != nullptr) { 
        delete root_symbol;
    }
    if(state != nullptr) { 
        delete state;
    }
    if(typ != nullptr) { 
        delete typ;
    }
    if(listing != nullptr) { 
        delete listing;
    }
    if(front != nullptr) { 
        delete front;
    }
    if(expiry != nullptr) { 
        delete expiry;
    }
    if(settle != nullptr) { 
        delete settle;
    }
    if(relist_interval != nullptr) { 
        delete relist_interval;
    }
    if(inverse_leg != nullptr) { 
        delete inverse_leg;
    }
    if(sell_leg != nullptr) { 
        delete sell_leg;
    }
    if(buy_leg != nullptr) { 
        delete buy_leg;
    }




    if(position_currency != nullptr) { 
        delete position_currency;
    }
    if(underlying != nullptr) { 
        delete underlying;
    }
    if(quote_currency != nullptr) { 
        delete quote_currency;
    }
    if(underlying_symbol != nullptr) { 
        delete underlying_symbol;
    }
    if(reference != nullptr) { 
        delete reference;
    }
    if(reference_symbol != nullptr) { 
        delete reference_symbol;
    }
    if(calc_interval != nullptr) { 
        delete calc_interval;
    }
    if(publish_interval != nullptr) { 
        delete publish_interval;
    }
    if(publish_time != nullptr) { 
        delete publish_time;
    }
    if(max_order_qty != nullptr) { 
        delete max_order_qty;
    }

    if(lot_size != nullptr) { 
        delete lot_size;
    }

    if(multiplier != nullptr) { 
        delete multiplier;
    }
    if(settl_currency != nullptr) { 
        delete settl_currency;
    }
    if(underlying_to_position_multiplier != nullptr) { 
        delete underlying_to_position_multiplier;
    }
    if(underlying_to_settle_multiplier != nullptr) { 
        delete underlying_to_settle_multiplier;
    }
    if(quote_to_settle_multiplier != nullptr) { 
        delete quote_to_settle_multiplier;
    }




    if(risk_limit != nullptr) { 
        delete risk_limit;
    }
    if(risk_step != nullptr) { 
        delete risk_step;
    }








    if(funding_base_symbol != nullptr) { 
        delete funding_base_symbol;
    }
    if(funding_quote_symbol != nullptr) { 
        delete funding_quote_symbol;
    }
    if(funding_premium_symbol != nullptr) { 
        delete funding_premium_symbol;
    }
    if(funding_timestamp != nullptr) { 
        delete funding_timestamp;
    }
    if(funding_interval != nullptr) { 
        delete funding_interval;
    }


    if(rebalance_timestamp != nullptr) { 
        delete rebalance_timestamp;
    }
    if(rebalance_interval != nullptr) { 
        delete rebalance_interval;
    }
    if(opening_timestamp != nullptr) { 
        delete opening_timestamp;
    }
    if(closing_timestamp != nullptr) { 
        delete closing_timestamp;
    }
    if(session_interval != nullptr) { 
        delete session_interval;
    }





    if(prev_total_volume != nullptr) { 
        delete prev_total_volume;
    }
    if(total_volume != nullptr) { 
        delete total_volume;
    }
    if(volume != nullptr) { 
        delete volume;
    }
    if(volume24h != nullptr) { 
        delete volume24h;
    }
    if(prev_total_turnover != nullptr) { 
        delete prev_total_turnover;
    }
    if(total_turnover != nullptr) { 
        delete total_turnover;
    }
    if(turnover != nullptr) { 
        delete turnover;
    }
    if(turnover24h != nullptr) { 
        delete turnover24h;
    }






    if(last_tick_direction != nullptr) { 
        delete last_tick_direction;
    }








    if(open_interest != nullptr) { 
        delete open_interest;
    }
    if(open_value != nullptr) { 
        delete open_value;
    }
    if(fair_method != nullptr) { 
        delete fair_method;
    }



    if(mark_method != nullptr) { 
        delete mark_method;
    }





    if(timestamp != nullptr) { 
        delete timestamp;
    }
}

SWGInstrument*
SWGInstrument::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGInstrument::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&root_symbol, pJson["rootSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&state, pJson["state"], "QString", "QString");
    
    ::Swagger::setValue(&typ, pJson["typ"], "QString", "QString");
    
    ::Swagger::setValue(&listing, pJson["listing"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&front, pJson["front"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&expiry, pJson["expiry"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&settle, pJson["settle"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&relist_interval, pJson["relistInterval"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&inverse_leg, pJson["inverseLeg"], "QString", "QString");
    
    ::Swagger::setValue(&sell_leg, pJson["sellLeg"], "QString", "QString");
    
    ::Swagger::setValue(&buy_leg, pJson["buyLeg"], "QString", "QString");
    
    ::Swagger::setValue(&option_strike_pcnt, pJson["optionStrikePcnt"], "double", "");
    
    ::Swagger::setValue(&option_strike_round, pJson["optionStrikeRound"], "double", "");
    
    ::Swagger::setValue(&option_strike_price, pJson["optionStrikePrice"], "double", "");
    
    ::Swagger::setValue(&option_multiplier, pJson["optionMultiplier"], "double", "");
    
    ::Swagger::setValue(&position_currency, pJson["positionCurrency"], "QString", "QString");
    
    ::Swagger::setValue(&underlying, pJson["underlying"], "QString", "QString");
    
    ::Swagger::setValue(&quote_currency, pJson["quoteCurrency"], "QString", "QString");
    
    ::Swagger::setValue(&underlying_symbol, pJson["underlyingSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&reference, pJson["reference"], "QString", "QString");
    
    ::Swagger::setValue(&reference_symbol, pJson["referenceSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&calc_interval, pJson["calcInterval"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&publish_interval, pJson["publishInterval"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&publish_time, pJson["publishTime"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&max_order_qty, pJson["maxOrderQty"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&max_price, pJson["maxPrice"], "double", "");
    
    ::Swagger::setValue(&lot_size, pJson["lotSize"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&tick_size, pJson["tickSize"], "double", "");
    
    ::Swagger::setValue(&multiplier, pJson["multiplier"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&settl_currency, pJson["settlCurrency"], "QString", "QString");
    
    ::Swagger::setValue(&underlying_to_position_multiplier, pJson["underlyingToPositionMultiplier"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&underlying_to_settle_multiplier, pJson["underlyingToSettleMultiplier"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&quote_to_settle_multiplier, pJson["quoteToSettleMultiplier"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&is_quanto, pJson["isQuanto"], "bool", "");
    
    ::Swagger::setValue(&is_inverse, pJson["isInverse"], "bool", "");
    
    ::Swagger::setValue(&init_margin, pJson["initMargin"], "double", "");
    
    ::Swagger::setValue(&maint_margin, pJson["maintMargin"], "double", "");
    
    ::Swagger::setValue(&risk_limit, pJson["riskLimit"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&risk_step, pJson["riskStep"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&limit, pJson["limit"], "double", "");
    
    ::Swagger::setValue(&capped, pJson["capped"], "bool", "");
    
    ::Swagger::setValue(&taxed, pJson["taxed"], "bool", "");
    
    ::Swagger::setValue(&deleverage, pJson["deleverage"], "bool", "");
    
    ::Swagger::setValue(&maker_fee, pJson["makerFee"], "double", "");
    
    ::Swagger::setValue(&taker_fee, pJson["takerFee"], "double", "");
    
    ::Swagger::setValue(&settlement_fee, pJson["settlementFee"], "double", "");
    
    ::Swagger::setValue(&insurance_fee, pJson["insuranceFee"], "double", "");
    
    ::Swagger::setValue(&funding_base_symbol, pJson["fundingBaseSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&funding_quote_symbol, pJson["fundingQuoteSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&funding_premium_symbol, pJson["fundingPremiumSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&funding_timestamp, pJson["fundingTimestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&funding_interval, pJson["fundingInterval"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&funding_rate, pJson["fundingRate"], "double", "");
    
    ::Swagger::setValue(&indicative_funding_rate, pJson["indicativeFundingRate"], "double", "");
    
    ::Swagger::setValue(&rebalance_timestamp, pJson["rebalanceTimestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&rebalance_interval, pJson["rebalanceInterval"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&opening_timestamp, pJson["openingTimestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&closing_timestamp, pJson["closingTimestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&session_interval, pJson["sessionInterval"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&prev_close_price, pJson["prevClosePrice"], "double", "");
    
    ::Swagger::setValue(&limit_down_price, pJson["limitDownPrice"], "double", "");
    
    ::Swagger::setValue(&limit_up_price, pJson["limitUpPrice"], "double", "");
    
    ::Swagger::setValue(&bankrupt_limit_down_price, pJson["bankruptLimitDownPrice"], "double", "");
    
    ::Swagger::setValue(&bankrupt_limit_up_price, pJson["bankruptLimitUpPrice"], "double", "");
    
    ::Swagger::setValue(&prev_total_volume, pJson["prevTotalVolume"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&total_volume, pJson["totalVolume"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&volume, pJson["volume"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&volume24h, pJson["volume24h"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&prev_total_turnover, pJson["prevTotalTurnover"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&total_turnover, pJson["totalTurnover"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&turnover, pJson["turnover"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&turnover24h, pJson["turnover24h"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&prev_price24h, pJson["prevPrice24h"], "double", "");
    
    ::Swagger::setValue(&vwap, pJson["vwap"], "double", "");
    
    ::Swagger::setValue(&high_price, pJson["highPrice"], "double", "");
    
    ::Swagger::setValue(&low_price, pJson["lowPrice"], "double", "");
    
    ::Swagger::setValue(&last_price, pJson["lastPrice"], "double", "");
    
    ::Swagger::setValue(&last_price_protected, pJson["lastPriceProtected"], "double", "");
    
    ::Swagger::setValue(&last_tick_direction, pJson["lastTickDirection"], "QString", "QString");
    
    ::Swagger::setValue(&last_change_pcnt, pJson["lastChangePcnt"], "double", "");
    
    ::Swagger::setValue(&bid_price, pJson["bidPrice"], "double", "");
    
    ::Swagger::setValue(&mid_price, pJson["midPrice"], "double", "");
    
    ::Swagger::setValue(&ask_price, pJson["askPrice"], "double", "");
    
    ::Swagger::setValue(&impact_bid_price, pJson["impactBidPrice"], "double", "");
    
    ::Swagger::setValue(&impact_mid_price, pJson["impactMidPrice"], "double", "");
    
    ::Swagger::setValue(&impact_ask_price, pJson["impactAskPrice"], "double", "");
    
    ::Swagger::setValue(&has_liquidity, pJson["hasLiquidity"], "bool", "");
    
    ::Swagger::setValue(&open_interest, pJson["openInterest"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&open_value, pJson["openValue"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&fair_method, pJson["fairMethod"], "QString", "QString");
    
    ::Swagger::setValue(&fair_basis_rate, pJson["fairBasisRate"], "double", "");
    
    ::Swagger::setValue(&fair_basis, pJson["fairBasis"], "double", "");
    
    ::Swagger::setValue(&fair_price, pJson["fairPrice"], "double", "");
    
    ::Swagger::setValue(&mark_method, pJson["markMethod"], "QString", "QString");
    
    ::Swagger::setValue(&mark_price, pJson["markPrice"], "double", "");
    
    ::Swagger::setValue(&indicative_tax_rate, pJson["indicativeTaxRate"], "double", "");
    
    ::Swagger::setValue(&indicative_settle_price, pJson["indicativeSettlePrice"], "double", "");
    
    ::Swagger::setValue(&option_underlying_price, pJson["optionUnderlyingPrice"], "double", "");
    
    ::Swagger::setValue(&settled_price, pJson["settledPrice"], "double", "");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
}

QString
SWGInstrument::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGInstrument::asJsonObject() {
    QJsonObject obj;
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(root_symbol != nullptr && *root_symbol != QString("")){
        toJsonValue(QString("rootSymbol"), root_symbol, obj, QString("QString"));
    }
    if(state != nullptr && *state != QString("")){
        toJsonValue(QString("state"), state, obj, QString("QString"));
    }
    if(typ != nullptr && *typ != QString("")){
        toJsonValue(QString("typ"), typ, obj, QString("QString"));
    }
    if(listing != nullptr) { 
        toJsonValue(QString("listing"), listing, obj, QString("QDateTime"));
    }
    if(front != nullptr) { 
        toJsonValue(QString("front"), front, obj, QString("QDateTime"));
    }
    if(expiry != nullptr) { 
        toJsonValue(QString("expiry"), expiry, obj, QString("QDateTime"));
    }
    if(settle != nullptr) { 
        toJsonValue(QString("settle"), settle, obj, QString("QDateTime"));
    }
    if(relist_interval != nullptr) { 
        toJsonValue(QString("relistInterval"), relist_interval, obj, QString("QDateTime"));
    }
    if(inverse_leg != nullptr && *inverse_leg != QString("")){
        toJsonValue(QString("inverseLeg"), inverse_leg, obj, QString("QString"));
    }
    if(sell_leg != nullptr && *sell_leg != QString("")){
        toJsonValue(QString("sellLeg"), sell_leg, obj, QString("QString"));
    }
    if(buy_leg != nullptr && *buy_leg != QString("")){
        toJsonValue(QString("buyLeg"), buy_leg, obj, QString("QString"));
    }
    if(m_option_strike_pcnt_isSet){
        obj.insert("optionStrikePcnt", QJsonValue(option_strike_pcnt));
    }
    if(m_option_strike_round_isSet){
        obj.insert("optionStrikeRound", QJsonValue(option_strike_round));
    }
    if(m_option_strike_price_isSet){
        obj.insert("optionStrikePrice", QJsonValue(option_strike_price));
    }
    if(m_option_multiplier_isSet){
        obj.insert("optionMultiplier", QJsonValue(option_multiplier));
    }
    if(position_currency != nullptr && *position_currency != QString("")){
        toJsonValue(QString("positionCurrency"), position_currency, obj, QString("QString"));
    }
    if(underlying != nullptr && *underlying != QString("")){
        toJsonValue(QString("underlying"), underlying, obj, QString("QString"));
    }
    if(quote_currency != nullptr && *quote_currency != QString("")){
        toJsonValue(QString("quoteCurrency"), quote_currency, obj, QString("QString"));
    }
    if(underlying_symbol != nullptr && *underlying_symbol != QString("")){
        toJsonValue(QString("underlyingSymbol"), underlying_symbol, obj, QString("QString"));
    }
    if(reference != nullptr && *reference != QString("")){
        toJsonValue(QString("reference"), reference, obj, QString("QString"));
    }
    if(reference_symbol != nullptr && *reference_symbol != QString("")){
        toJsonValue(QString("referenceSymbol"), reference_symbol, obj, QString("QString"));
    }
    if(calc_interval != nullptr) { 
        toJsonValue(QString("calcInterval"), calc_interval, obj, QString("QDateTime"));
    }
    if(publish_interval != nullptr) { 
        toJsonValue(QString("publishInterval"), publish_interval, obj, QString("QDateTime"));
    }
    if(publish_time != nullptr) { 
        toJsonValue(QString("publishTime"), publish_time, obj, QString("QDateTime"));
    }
    if((max_order_qty != nullptr) && (max_order_qty->isSet())){
        toJsonValue(QString("maxOrderQty"), max_order_qty, obj, QString("SWGNumber"));
    }
    if(m_max_price_isSet){
        obj.insert("maxPrice", QJsonValue(max_price));
    }
    if((lot_size != nullptr) && (lot_size->isSet())){
        toJsonValue(QString("lotSize"), lot_size, obj, QString("SWGNumber"));
    }
    if(m_tick_size_isSet){
        obj.insert("tickSize", QJsonValue(tick_size));
    }
    if((multiplier != nullptr) && (multiplier->isSet())){
        toJsonValue(QString("multiplier"), multiplier, obj, QString("SWGNumber"));
    }
    if(settl_currency != nullptr && *settl_currency != QString("")){
        toJsonValue(QString("settlCurrency"), settl_currency, obj, QString("QString"));
    }
    if((underlying_to_position_multiplier != nullptr) && (underlying_to_position_multiplier->isSet())){
        toJsonValue(QString("underlyingToPositionMultiplier"), underlying_to_position_multiplier, obj, QString("SWGNumber"));
    }
    if((underlying_to_settle_multiplier != nullptr) && (underlying_to_settle_multiplier->isSet())){
        toJsonValue(QString("underlyingToSettleMultiplier"), underlying_to_settle_multiplier, obj, QString("SWGNumber"));
    }
    if((quote_to_settle_multiplier != nullptr) && (quote_to_settle_multiplier->isSet())){
        toJsonValue(QString("quoteToSettleMultiplier"), quote_to_settle_multiplier, obj, QString("SWGNumber"));
    }
    if(m_is_quanto_isSet){
        obj.insert("isQuanto", QJsonValue(is_quanto));
    }
    if(m_is_inverse_isSet){
        obj.insert("isInverse", QJsonValue(is_inverse));
    }
    if(m_init_margin_isSet){
        obj.insert("initMargin", QJsonValue(init_margin));
    }
    if(m_maint_margin_isSet){
        obj.insert("maintMargin", QJsonValue(maint_margin));
    }
    if((risk_limit != nullptr) && (risk_limit->isSet())){
        toJsonValue(QString("riskLimit"), risk_limit, obj, QString("SWGNumber"));
    }
    if((risk_step != nullptr) && (risk_step->isSet())){
        toJsonValue(QString("riskStep"), risk_step, obj, QString("SWGNumber"));
    }
    if(m_limit_isSet){
        obj.insert("limit", QJsonValue(limit));
    }
    if(m_capped_isSet){
        obj.insert("capped", QJsonValue(capped));
    }
    if(m_taxed_isSet){
        obj.insert("taxed", QJsonValue(taxed));
    }
    if(m_deleverage_isSet){
        obj.insert("deleverage", QJsonValue(deleverage));
    }
    if(m_maker_fee_isSet){
        obj.insert("makerFee", QJsonValue(maker_fee));
    }
    if(m_taker_fee_isSet){
        obj.insert("takerFee", QJsonValue(taker_fee));
    }
    if(m_settlement_fee_isSet){
        obj.insert("settlementFee", QJsonValue(settlement_fee));
    }
    if(m_insurance_fee_isSet){
        obj.insert("insuranceFee", QJsonValue(insurance_fee));
    }
    if(funding_base_symbol != nullptr && *funding_base_symbol != QString("")){
        toJsonValue(QString("fundingBaseSymbol"), funding_base_symbol, obj, QString("QString"));
    }
    if(funding_quote_symbol != nullptr && *funding_quote_symbol != QString("")){
        toJsonValue(QString("fundingQuoteSymbol"), funding_quote_symbol, obj, QString("QString"));
    }
    if(funding_premium_symbol != nullptr && *funding_premium_symbol != QString("")){
        toJsonValue(QString("fundingPremiumSymbol"), funding_premium_symbol, obj, QString("QString"));
    }
    if(funding_timestamp != nullptr) { 
        toJsonValue(QString("fundingTimestamp"), funding_timestamp, obj, QString("QDateTime"));
    }
    if(funding_interval != nullptr) { 
        toJsonValue(QString("fundingInterval"), funding_interval, obj, QString("QDateTime"));
    }
    if(m_funding_rate_isSet){
        obj.insert("fundingRate", QJsonValue(funding_rate));
    }
    if(m_indicative_funding_rate_isSet){
        obj.insert("indicativeFundingRate", QJsonValue(indicative_funding_rate));
    }
    if(rebalance_timestamp != nullptr) { 
        toJsonValue(QString("rebalanceTimestamp"), rebalance_timestamp, obj, QString("QDateTime"));
    }
    if(rebalance_interval != nullptr) { 
        toJsonValue(QString("rebalanceInterval"), rebalance_interval, obj, QString("QDateTime"));
    }
    if(opening_timestamp != nullptr) { 
        toJsonValue(QString("openingTimestamp"), opening_timestamp, obj, QString("QDateTime"));
    }
    if(closing_timestamp != nullptr) { 
        toJsonValue(QString("closingTimestamp"), closing_timestamp, obj, QString("QDateTime"));
    }
    if(session_interval != nullptr) { 
        toJsonValue(QString("sessionInterval"), session_interval, obj, QString("QDateTime"));
    }
    if(m_prev_close_price_isSet){
        obj.insert("prevClosePrice", QJsonValue(prev_close_price));
    }
    if(m_limit_down_price_isSet){
        obj.insert("limitDownPrice", QJsonValue(limit_down_price));
    }
    if(m_limit_up_price_isSet){
        obj.insert("limitUpPrice", QJsonValue(limit_up_price));
    }
    if(m_bankrupt_limit_down_price_isSet){
        obj.insert("bankruptLimitDownPrice", QJsonValue(bankrupt_limit_down_price));
    }
    if(m_bankrupt_limit_up_price_isSet){
        obj.insert("bankruptLimitUpPrice", QJsonValue(bankrupt_limit_up_price));
    }
    if((prev_total_volume != nullptr) && (prev_total_volume->isSet())){
        toJsonValue(QString("prevTotalVolume"), prev_total_volume, obj, QString("SWGNumber"));
    }
    if((total_volume != nullptr) && (total_volume->isSet())){
        toJsonValue(QString("totalVolume"), total_volume, obj, QString("SWGNumber"));
    }
    if((volume != nullptr) && (volume->isSet())){
        toJsonValue(QString("volume"), volume, obj, QString("SWGNumber"));
    }
    if((volume24h != nullptr) && (volume24h->isSet())){
        toJsonValue(QString("volume24h"), volume24h, obj, QString("SWGNumber"));
    }
    if((prev_total_turnover != nullptr) && (prev_total_turnover->isSet())){
        toJsonValue(QString("prevTotalTurnover"), prev_total_turnover, obj, QString("SWGNumber"));
    }
    if((total_turnover != nullptr) && (total_turnover->isSet())){
        toJsonValue(QString("totalTurnover"), total_turnover, obj, QString("SWGNumber"));
    }
    if((turnover != nullptr) && (turnover->isSet())){
        toJsonValue(QString("turnover"), turnover, obj, QString("SWGNumber"));
    }
    if((turnover24h != nullptr) && (turnover24h->isSet())){
        toJsonValue(QString("turnover24h"), turnover24h, obj, QString("SWGNumber"));
    }
    if(m_prev_price24h_isSet){
        obj.insert("prevPrice24h", QJsonValue(prev_price24h));
    }
    if(m_vwap_isSet){
        obj.insert("vwap", QJsonValue(vwap));
    }
    if(m_high_price_isSet){
        obj.insert("highPrice", QJsonValue(high_price));
    }
    if(m_low_price_isSet){
        obj.insert("lowPrice", QJsonValue(low_price));
    }
    if(m_last_price_isSet){
        obj.insert("lastPrice", QJsonValue(last_price));
    }
    if(m_last_price_protected_isSet){
        obj.insert("lastPriceProtected", QJsonValue(last_price_protected));
    }
    if(last_tick_direction != nullptr && *last_tick_direction != QString("")){
        toJsonValue(QString("lastTickDirection"), last_tick_direction, obj, QString("QString"));
    }
    if(m_last_change_pcnt_isSet){
        obj.insert("lastChangePcnt", QJsonValue(last_change_pcnt));
    }
    if(m_bid_price_isSet){
        obj.insert("bidPrice", QJsonValue(bid_price));
    }
    if(m_mid_price_isSet){
        obj.insert("midPrice", QJsonValue(mid_price));
    }
    if(m_ask_price_isSet){
        obj.insert("askPrice", QJsonValue(ask_price));
    }
    if(m_impact_bid_price_isSet){
        obj.insert("impactBidPrice", QJsonValue(impact_bid_price));
    }
    if(m_impact_mid_price_isSet){
        obj.insert("impactMidPrice", QJsonValue(impact_mid_price));
    }
    if(m_impact_ask_price_isSet){
        obj.insert("impactAskPrice", QJsonValue(impact_ask_price));
    }
    if(m_has_liquidity_isSet){
        obj.insert("hasLiquidity", QJsonValue(has_liquidity));
    }
    if((open_interest != nullptr) && (open_interest->isSet())){
        toJsonValue(QString("openInterest"), open_interest, obj, QString("SWGNumber"));
    }
    if((open_value != nullptr) && (open_value->isSet())){
        toJsonValue(QString("openValue"), open_value, obj, QString("SWGNumber"));
    }
    if(fair_method != nullptr && *fair_method != QString("")){
        toJsonValue(QString("fairMethod"), fair_method, obj, QString("QString"));
    }
    if(m_fair_basis_rate_isSet){
        obj.insert("fairBasisRate", QJsonValue(fair_basis_rate));
    }
    if(m_fair_basis_isSet){
        obj.insert("fairBasis", QJsonValue(fair_basis));
    }
    if(m_fair_price_isSet){
        obj.insert("fairPrice", QJsonValue(fair_price));
    }
    if(mark_method != nullptr && *mark_method != QString("")){
        toJsonValue(QString("markMethod"), mark_method, obj, QString("QString"));
    }
    if(m_mark_price_isSet){
        obj.insert("markPrice", QJsonValue(mark_price));
    }
    if(m_indicative_tax_rate_isSet){
        obj.insert("indicativeTaxRate", QJsonValue(indicative_tax_rate));
    }
    if(m_indicative_settle_price_isSet){
        obj.insert("indicativeSettlePrice", QJsonValue(indicative_settle_price));
    }
    if(m_option_underlying_price_isSet){
        obj.insert("optionUnderlyingPrice", QJsonValue(option_underlying_price));
    }
    if(m_settled_price_isSet){
        obj.insert("settledPrice", QJsonValue(settled_price));
    }
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }

    return obj;
}

QString*
SWGInstrument::getSymbol() {
    return symbol;
}
void
SWGInstrument::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

QString*
SWGInstrument::getRootSymbol() {
    return root_symbol;
}
void
SWGInstrument::setRootSymbol(QString* root_symbol) {
    this->root_symbol = root_symbol;
    this->m_root_symbol_isSet = true;
}

QString*
SWGInstrument::getState() {
    return state;
}
void
SWGInstrument::setState(QString* state) {
    this->state = state;
    this->m_state_isSet = true;
}

QString*
SWGInstrument::getTyp() {
    return typ;
}
void
SWGInstrument::setTyp(QString* typ) {
    this->typ = typ;
    this->m_typ_isSet = true;
}

QDateTime*
SWGInstrument::getListing() {
    return listing;
}
void
SWGInstrument::setListing(QDateTime* listing) {
    this->listing = listing;
    this->m_listing_isSet = true;
}

QDateTime*
SWGInstrument::getFront() {
    return front;
}
void
SWGInstrument::setFront(QDateTime* front) {
    this->front = front;
    this->m_front_isSet = true;
}

QDateTime*
SWGInstrument::getExpiry() {
    return expiry;
}
void
SWGInstrument::setExpiry(QDateTime* expiry) {
    this->expiry = expiry;
    this->m_expiry_isSet = true;
}

QDateTime*
SWGInstrument::getSettle() {
    return settle;
}
void
SWGInstrument::setSettle(QDateTime* settle) {
    this->settle = settle;
    this->m_settle_isSet = true;
}

QDateTime*
SWGInstrument::getRelistInterval() {
    return relist_interval;
}
void
SWGInstrument::setRelistInterval(QDateTime* relist_interval) {
    this->relist_interval = relist_interval;
    this->m_relist_interval_isSet = true;
}

QString*
SWGInstrument::getInverseLeg() {
    return inverse_leg;
}
void
SWGInstrument::setInverseLeg(QString* inverse_leg) {
    this->inverse_leg = inverse_leg;
    this->m_inverse_leg_isSet = true;
}

QString*
SWGInstrument::getSellLeg() {
    return sell_leg;
}
void
SWGInstrument::setSellLeg(QString* sell_leg) {
    this->sell_leg = sell_leg;
    this->m_sell_leg_isSet = true;
}

QString*
SWGInstrument::getBuyLeg() {
    return buy_leg;
}
void
SWGInstrument::setBuyLeg(QString* buy_leg) {
    this->buy_leg = buy_leg;
    this->m_buy_leg_isSet = true;
}

double
SWGInstrument::getOptionStrikePcnt() {
    return option_strike_pcnt;
}
void
SWGInstrument::setOptionStrikePcnt(double option_strike_pcnt) {
    this->option_strike_pcnt = option_strike_pcnt;
    this->m_option_strike_pcnt_isSet = true;
}

double
SWGInstrument::getOptionStrikeRound() {
    return option_strike_round;
}
void
SWGInstrument::setOptionStrikeRound(double option_strike_round) {
    this->option_strike_round = option_strike_round;
    this->m_option_strike_round_isSet = true;
}

double
SWGInstrument::getOptionStrikePrice() {
    return option_strike_price;
}
void
SWGInstrument::setOptionStrikePrice(double option_strike_price) {
    this->option_strike_price = option_strike_price;
    this->m_option_strike_price_isSet = true;
}

double
SWGInstrument::getOptionMultiplier() {
    return option_multiplier;
}
void
SWGInstrument::setOptionMultiplier(double option_multiplier) {
    this->option_multiplier = option_multiplier;
    this->m_option_multiplier_isSet = true;
}

QString*
SWGInstrument::getPositionCurrency() {
    return position_currency;
}
void
SWGInstrument::setPositionCurrency(QString* position_currency) {
    this->position_currency = position_currency;
    this->m_position_currency_isSet = true;
}

QString*
SWGInstrument::getUnderlying() {
    return underlying;
}
void
SWGInstrument::setUnderlying(QString* underlying) {
    this->underlying = underlying;
    this->m_underlying_isSet = true;
}

QString*
SWGInstrument::getQuoteCurrency() {
    return quote_currency;
}
void
SWGInstrument::setQuoteCurrency(QString* quote_currency) {
    this->quote_currency = quote_currency;
    this->m_quote_currency_isSet = true;
}

QString*
SWGInstrument::getUnderlyingSymbol() {
    return underlying_symbol;
}
void
SWGInstrument::setUnderlyingSymbol(QString* underlying_symbol) {
    this->underlying_symbol = underlying_symbol;
    this->m_underlying_symbol_isSet = true;
}

QString*
SWGInstrument::getReference() {
    return reference;
}
void
SWGInstrument::setReference(QString* reference) {
    this->reference = reference;
    this->m_reference_isSet = true;
}

QString*
SWGInstrument::getReferenceSymbol() {
    return reference_symbol;
}
void
SWGInstrument::setReferenceSymbol(QString* reference_symbol) {
    this->reference_symbol = reference_symbol;
    this->m_reference_symbol_isSet = true;
}

QDateTime*
SWGInstrument::getCalcInterval() {
    return calc_interval;
}
void
SWGInstrument::setCalcInterval(QDateTime* calc_interval) {
    this->calc_interval = calc_interval;
    this->m_calc_interval_isSet = true;
}

QDateTime*
SWGInstrument::getPublishInterval() {
    return publish_interval;
}
void
SWGInstrument::setPublishInterval(QDateTime* publish_interval) {
    this->publish_interval = publish_interval;
    this->m_publish_interval_isSet = true;
}

QDateTime*
SWGInstrument::getPublishTime() {
    return publish_time;
}
void
SWGInstrument::setPublishTime(QDateTime* publish_time) {
    this->publish_time = publish_time;
    this->m_publish_time_isSet = true;
}

SWGNumber*
SWGInstrument::getMaxOrderQty() {
    return max_order_qty;
}
void
SWGInstrument::setMaxOrderQty(SWGNumber* max_order_qty) {
    this->max_order_qty = max_order_qty;
    this->m_max_order_qty_isSet = true;
}

double
SWGInstrument::getMaxPrice() {
    return max_price;
}
void
SWGInstrument::setMaxPrice(double max_price) {
    this->max_price = max_price;
    this->m_max_price_isSet = true;
}

SWGNumber*
SWGInstrument::getLotSize() {
    return lot_size;
}
void
SWGInstrument::setLotSize(SWGNumber* lot_size) {
    this->lot_size = lot_size;
    this->m_lot_size_isSet = true;
}

double
SWGInstrument::getTickSize() {
    return tick_size;
}
void
SWGInstrument::setTickSize(double tick_size) {
    this->tick_size = tick_size;
    this->m_tick_size_isSet = true;
}

SWGNumber*
SWGInstrument::getMultiplier() {
    return multiplier;
}
void
SWGInstrument::setMultiplier(SWGNumber* multiplier) {
    this->multiplier = multiplier;
    this->m_multiplier_isSet = true;
}

QString*
SWGInstrument::getSettlCurrency() {
    return settl_currency;
}
void
SWGInstrument::setSettlCurrency(QString* settl_currency) {
    this->settl_currency = settl_currency;
    this->m_settl_currency_isSet = true;
}

SWGNumber*
SWGInstrument::getUnderlyingToPositionMultiplier() {
    return underlying_to_position_multiplier;
}
void
SWGInstrument::setUnderlyingToPositionMultiplier(SWGNumber* underlying_to_position_multiplier) {
    this->underlying_to_position_multiplier = underlying_to_position_multiplier;
    this->m_underlying_to_position_multiplier_isSet = true;
}

SWGNumber*
SWGInstrument::getUnderlyingToSettleMultiplier() {
    return underlying_to_settle_multiplier;
}
void
SWGInstrument::setUnderlyingToSettleMultiplier(SWGNumber* underlying_to_settle_multiplier) {
    this->underlying_to_settle_multiplier = underlying_to_settle_multiplier;
    this->m_underlying_to_settle_multiplier_isSet = true;
}

SWGNumber*
SWGInstrument::getQuoteToSettleMultiplier() {
    return quote_to_settle_multiplier;
}
void
SWGInstrument::setQuoteToSettleMultiplier(SWGNumber* quote_to_settle_multiplier) {
    this->quote_to_settle_multiplier = quote_to_settle_multiplier;
    this->m_quote_to_settle_multiplier_isSet = true;
}

bool
SWGInstrument::isIsQuanto() {
    return is_quanto;
}
void
SWGInstrument::setIsQuanto(bool is_quanto) {
    this->is_quanto = is_quanto;
    this->m_is_quanto_isSet = true;
}

bool
SWGInstrument::isIsInverse() {
    return is_inverse;
}
void
SWGInstrument::setIsInverse(bool is_inverse) {
    this->is_inverse = is_inverse;
    this->m_is_inverse_isSet = true;
}

double
SWGInstrument::getInitMargin() {
    return init_margin;
}
void
SWGInstrument::setInitMargin(double init_margin) {
    this->init_margin = init_margin;
    this->m_init_margin_isSet = true;
}

double
SWGInstrument::getMaintMargin() {
    return maint_margin;
}
void
SWGInstrument::setMaintMargin(double maint_margin) {
    this->maint_margin = maint_margin;
    this->m_maint_margin_isSet = true;
}

SWGNumber*
SWGInstrument::getRiskLimit() {
    return risk_limit;
}
void
SWGInstrument::setRiskLimit(SWGNumber* risk_limit) {
    this->risk_limit = risk_limit;
    this->m_risk_limit_isSet = true;
}

SWGNumber*
SWGInstrument::getRiskStep() {
    return risk_step;
}
void
SWGInstrument::setRiskStep(SWGNumber* risk_step) {
    this->risk_step = risk_step;
    this->m_risk_step_isSet = true;
}

double
SWGInstrument::getLimit() {
    return limit;
}
void
SWGInstrument::setLimit(double limit) {
    this->limit = limit;
    this->m_limit_isSet = true;
}

bool
SWGInstrument::isCapped() {
    return capped;
}
void
SWGInstrument::setCapped(bool capped) {
    this->capped = capped;
    this->m_capped_isSet = true;
}

bool
SWGInstrument::isTaxed() {
    return taxed;
}
void
SWGInstrument::setTaxed(bool taxed) {
    this->taxed = taxed;
    this->m_taxed_isSet = true;
}

bool
SWGInstrument::isDeleverage() {
    return deleverage;
}
void
SWGInstrument::setDeleverage(bool deleverage) {
    this->deleverage = deleverage;
    this->m_deleverage_isSet = true;
}

double
SWGInstrument::getMakerFee() {
    return maker_fee;
}
void
SWGInstrument::setMakerFee(double maker_fee) {
    this->maker_fee = maker_fee;
    this->m_maker_fee_isSet = true;
}

double
SWGInstrument::getTakerFee() {
    return taker_fee;
}
void
SWGInstrument::setTakerFee(double taker_fee) {
    this->taker_fee = taker_fee;
    this->m_taker_fee_isSet = true;
}

double
SWGInstrument::getSettlementFee() {
    return settlement_fee;
}
void
SWGInstrument::setSettlementFee(double settlement_fee) {
    this->settlement_fee = settlement_fee;
    this->m_settlement_fee_isSet = true;
}

double
SWGInstrument::getInsuranceFee() {
    return insurance_fee;
}
void
SWGInstrument::setInsuranceFee(double insurance_fee) {
    this->insurance_fee = insurance_fee;
    this->m_insurance_fee_isSet = true;
}

QString*
SWGInstrument::getFundingBaseSymbol() {
    return funding_base_symbol;
}
void
SWGInstrument::setFundingBaseSymbol(QString* funding_base_symbol) {
    this->funding_base_symbol = funding_base_symbol;
    this->m_funding_base_symbol_isSet = true;
}

QString*
SWGInstrument::getFundingQuoteSymbol() {
    return funding_quote_symbol;
}
void
SWGInstrument::setFundingQuoteSymbol(QString* funding_quote_symbol) {
    this->funding_quote_symbol = funding_quote_symbol;
    this->m_funding_quote_symbol_isSet = true;
}

QString*
SWGInstrument::getFundingPremiumSymbol() {
    return funding_premium_symbol;
}
void
SWGInstrument::setFundingPremiumSymbol(QString* funding_premium_symbol) {
    this->funding_premium_symbol = funding_premium_symbol;
    this->m_funding_premium_symbol_isSet = true;
}

QDateTime*
SWGInstrument::getFundingTimestamp() {
    return funding_timestamp;
}
void
SWGInstrument::setFundingTimestamp(QDateTime* funding_timestamp) {
    this->funding_timestamp = funding_timestamp;
    this->m_funding_timestamp_isSet = true;
}

QDateTime*
SWGInstrument::getFundingInterval() {
    return funding_interval;
}
void
SWGInstrument::setFundingInterval(QDateTime* funding_interval) {
    this->funding_interval = funding_interval;
    this->m_funding_interval_isSet = true;
}

double
SWGInstrument::getFundingRate() {
    return funding_rate;
}
void
SWGInstrument::setFundingRate(double funding_rate) {
    this->funding_rate = funding_rate;
    this->m_funding_rate_isSet = true;
}

double
SWGInstrument::getIndicativeFundingRate() {
    return indicative_funding_rate;
}
void
SWGInstrument::setIndicativeFundingRate(double indicative_funding_rate) {
    this->indicative_funding_rate = indicative_funding_rate;
    this->m_indicative_funding_rate_isSet = true;
}

QDateTime*
SWGInstrument::getRebalanceTimestamp() {
    return rebalance_timestamp;
}
void
SWGInstrument::setRebalanceTimestamp(QDateTime* rebalance_timestamp) {
    this->rebalance_timestamp = rebalance_timestamp;
    this->m_rebalance_timestamp_isSet = true;
}

QDateTime*
SWGInstrument::getRebalanceInterval() {
    return rebalance_interval;
}
void
SWGInstrument::setRebalanceInterval(QDateTime* rebalance_interval) {
    this->rebalance_interval = rebalance_interval;
    this->m_rebalance_interval_isSet = true;
}

QDateTime*
SWGInstrument::getOpeningTimestamp() {
    return opening_timestamp;
}
void
SWGInstrument::setOpeningTimestamp(QDateTime* opening_timestamp) {
    this->opening_timestamp = opening_timestamp;
    this->m_opening_timestamp_isSet = true;
}

QDateTime*
SWGInstrument::getClosingTimestamp() {
    return closing_timestamp;
}
void
SWGInstrument::setClosingTimestamp(QDateTime* closing_timestamp) {
    this->closing_timestamp = closing_timestamp;
    this->m_closing_timestamp_isSet = true;
}

QDateTime*
SWGInstrument::getSessionInterval() {
    return session_interval;
}
void
SWGInstrument::setSessionInterval(QDateTime* session_interval) {
    this->session_interval = session_interval;
    this->m_session_interval_isSet = true;
}

double
SWGInstrument::getPrevClosePrice() {
    return prev_close_price;
}
void
SWGInstrument::setPrevClosePrice(double prev_close_price) {
    this->prev_close_price = prev_close_price;
    this->m_prev_close_price_isSet = true;
}

double
SWGInstrument::getLimitDownPrice() {
    return limit_down_price;
}
void
SWGInstrument::setLimitDownPrice(double limit_down_price) {
    this->limit_down_price = limit_down_price;
    this->m_limit_down_price_isSet = true;
}

double
SWGInstrument::getLimitUpPrice() {
    return limit_up_price;
}
void
SWGInstrument::setLimitUpPrice(double limit_up_price) {
    this->limit_up_price = limit_up_price;
    this->m_limit_up_price_isSet = true;
}

double
SWGInstrument::getBankruptLimitDownPrice() {
    return bankrupt_limit_down_price;
}
void
SWGInstrument::setBankruptLimitDownPrice(double bankrupt_limit_down_price) {
    this->bankrupt_limit_down_price = bankrupt_limit_down_price;
    this->m_bankrupt_limit_down_price_isSet = true;
}

double
SWGInstrument::getBankruptLimitUpPrice() {
    return bankrupt_limit_up_price;
}
void
SWGInstrument::setBankruptLimitUpPrice(double bankrupt_limit_up_price) {
    this->bankrupt_limit_up_price = bankrupt_limit_up_price;
    this->m_bankrupt_limit_up_price_isSet = true;
}

SWGNumber*
SWGInstrument::getPrevTotalVolume() {
    return prev_total_volume;
}
void
SWGInstrument::setPrevTotalVolume(SWGNumber* prev_total_volume) {
    this->prev_total_volume = prev_total_volume;
    this->m_prev_total_volume_isSet = true;
}

SWGNumber*
SWGInstrument::getTotalVolume() {
    return total_volume;
}
void
SWGInstrument::setTotalVolume(SWGNumber* total_volume) {
    this->total_volume = total_volume;
    this->m_total_volume_isSet = true;
}

SWGNumber*
SWGInstrument::getVolume() {
    return volume;
}
void
SWGInstrument::setVolume(SWGNumber* volume) {
    this->volume = volume;
    this->m_volume_isSet = true;
}

SWGNumber*
SWGInstrument::getVolume24h() {
    return volume24h;
}
void
SWGInstrument::setVolume24h(SWGNumber* volume24h) {
    this->volume24h = volume24h;
    this->m_volume24h_isSet = true;
}

SWGNumber*
SWGInstrument::getPrevTotalTurnover() {
    return prev_total_turnover;
}
void
SWGInstrument::setPrevTotalTurnover(SWGNumber* prev_total_turnover) {
    this->prev_total_turnover = prev_total_turnover;
    this->m_prev_total_turnover_isSet = true;
}

SWGNumber*
SWGInstrument::getTotalTurnover() {
    return total_turnover;
}
void
SWGInstrument::setTotalTurnover(SWGNumber* total_turnover) {
    this->total_turnover = total_turnover;
    this->m_total_turnover_isSet = true;
}

SWGNumber*
SWGInstrument::getTurnover() {
    return turnover;
}
void
SWGInstrument::setTurnover(SWGNumber* turnover) {
    this->turnover = turnover;
    this->m_turnover_isSet = true;
}

SWGNumber*
SWGInstrument::getTurnover24h() {
    return turnover24h;
}
void
SWGInstrument::setTurnover24h(SWGNumber* turnover24h) {
    this->turnover24h = turnover24h;
    this->m_turnover24h_isSet = true;
}

double
SWGInstrument::getPrevPrice24h() {
    return prev_price24h;
}
void
SWGInstrument::setPrevPrice24h(double prev_price24h) {
    this->prev_price24h = prev_price24h;
    this->m_prev_price24h_isSet = true;
}

double
SWGInstrument::getVwap() {
    return vwap;
}
void
SWGInstrument::setVwap(double vwap) {
    this->vwap = vwap;
    this->m_vwap_isSet = true;
}

double
SWGInstrument::getHighPrice() {
    return high_price;
}
void
SWGInstrument::setHighPrice(double high_price) {
    this->high_price = high_price;
    this->m_high_price_isSet = true;
}

double
SWGInstrument::getLowPrice() {
    return low_price;
}
void
SWGInstrument::setLowPrice(double low_price) {
    this->low_price = low_price;
    this->m_low_price_isSet = true;
}

double
SWGInstrument::getLastPrice() {
    return last_price;
}
void
SWGInstrument::setLastPrice(double last_price) {
    this->last_price = last_price;
    this->m_last_price_isSet = true;
}

double
SWGInstrument::getLastPriceProtected() {
    return last_price_protected;
}
void
SWGInstrument::setLastPriceProtected(double last_price_protected) {
    this->last_price_protected = last_price_protected;
    this->m_last_price_protected_isSet = true;
}

QString*
SWGInstrument::getLastTickDirection() {
    return last_tick_direction;
}
void
SWGInstrument::setLastTickDirection(QString* last_tick_direction) {
    this->last_tick_direction = last_tick_direction;
    this->m_last_tick_direction_isSet = true;
}

double
SWGInstrument::getLastChangePcnt() {
    return last_change_pcnt;
}
void
SWGInstrument::setLastChangePcnt(double last_change_pcnt) {
    this->last_change_pcnt = last_change_pcnt;
    this->m_last_change_pcnt_isSet = true;
}

double
SWGInstrument::getBidPrice() {
    return bid_price;
}
void
SWGInstrument::setBidPrice(double bid_price) {
    this->bid_price = bid_price;
    this->m_bid_price_isSet = true;
}

double
SWGInstrument::getMidPrice() {
    return mid_price;
}
void
SWGInstrument::setMidPrice(double mid_price) {
    this->mid_price = mid_price;
    this->m_mid_price_isSet = true;
}

double
SWGInstrument::getAskPrice() {
    return ask_price;
}
void
SWGInstrument::setAskPrice(double ask_price) {
    this->ask_price = ask_price;
    this->m_ask_price_isSet = true;
}

double
SWGInstrument::getImpactBidPrice() {
    return impact_bid_price;
}
void
SWGInstrument::setImpactBidPrice(double impact_bid_price) {
    this->impact_bid_price = impact_bid_price;
    this->m_impact_bid_price_isSet = true;
}

double
SWGInstrument::getImpactMidPrice() {
    return impact_mid_price;
}
void
SWGInstrument::setImpactMidPrice(double impact_mid_price) {
    this->impact_mid_price = impact_mid_price;
    this->m_impact_mid_price_isSet = true;
}

double
SWGInstrument::getImpactAskPrice() {
    return impact_ask_price;
}
void
SWGInstrument::setImpactAskPrice(double impact_ask_price) {
    this->impact_ask_price = impact_ask_price;
    this->m_impact_ask_price_isSet = true;
}

bool
SWGInstrument::isHasLiquidity() {
    return has_liquidity;
}
void
SWGInstrument::setHasLiquidity(bool has_liquidity) {
    this->has_liquidity = has_liquidity;
    this->m_has_liquidity_isSet = true;
}

SWGNumber*
SWGInstrument::getOpenInterest() {
    return open_interest;
}
void
SWGInstrument::setOpenInterest(SWGNumber* open_interest) {
    this->open_interest = open_interest;
    this->m_open_interest_isSet = true;
}

SWGNumber*
SWGInstrument::getOpenValue() {
    return open_value;
}
void
SWGInstrument::setOpenValue(SWGNumber* open_value) {
    this->open_value = open_value;
    this->m_open_value_isSet = true;
}

QString*
SWGInstrument::getFairMethod() {
    return fair_method;
}
void
SWGInstrument::setFairMethod(QString* fair_method) {
    this->fair_method = fair_method;
    this->m_fair_method_isSet = true;
}

double
SWGInstrument::getFairBasisRate() {
    return fair_basis_rate;
}
void
SWGInstrument::setFairBasisRate(double fair_basis_rate) {
    this->fair_basis_rate = fair_basis_rate;
    this->m_fair_basis_rate_isSet = true;
}

double
SWGInstrument::getFairBasis() {
    return fair_basis;
}
void
SWGInstrument::setFairBasis(double fair_basis) {
    this->fair_basis = fair_basis;
    this->m_fair_basis_isSet = true;
}

double
SWGInstrument::getFairPrice() {
    return fair_price;
}
void
SWGInstrument::setFairPrice(double fair_price) {
    this->fair_price = fair_price;
    this->m_fair_price_isSet = true;
}

QString*
SWGInstrument::getMarkMethod() {
    return mark_method;
}
void
SWGInstrument::setMarkMethod(QString* mark_method) {
    this->mark_method = mark_method;
    this->m_mark_method_isSet = true;
}

double
SWGInstrument::getMarkPrice() {
    return mark_price;
}
void
SWGInstrument::setMarkPrice(double mark_price) {
    this->mark_price = mark_price;
    this->m_mark_price_isSet = true;
}

double
SWGInstrument::getIndicativeTaxRate() {
    return indicative_tax_rate;
}
void
SWGInstrument::setIndicativeTaxRate(double indicative_tax_rate) {
    this->indicative_tax_rate = indicative_tax_rate;
    this->m_indicative_tax_rate_isSet = true;
}

double
SWGInstrument::getIndicativeSettlePrice() {
    return indicative_settle_price;
}
void
SWGInstrument::setIndicativeSettlePrice(double indicative_settle_price) {
    this->indicative_settle_price = indicative_settle_price;
    this->m_indicative_settle_price_isSet = true;
}

double
SWGInstrument::getOptionUnderlyingPrice() {
    return option_underlying_price;
}
void
SWGInstrument::setOptionUnderlyingPrice(double option_underlying_price) {
    this->option_underlying_price = option_underlying_price;
    this->m_option_underlying_price_isSet = true;
}

double
SWGInstrument::getSettledPrice() {
    return settled_price;
}
void
SWGInstrument::setSettledPrice(double settled_price) {
    this->settled_price = settled_price;
    this->m_settled_price_isSet = true;
}

QDateTime*
SWGInstrument::getTimestamp() {
    return timestamp;
}
void
SWGInstrument::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}


bool
SWGInstrument::isSet(){
    bool isObjectUpdated = false;
    do{
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(root_symbol != nullptr && *root_symbol != QString("")){ isObjectUpdated = true; break;}
        if(state != nullptr && *state != QString("")){ isObjectUpdated = true; break;}
        if(typ != nullptr && *typ != QString("")){ isObjectUpdated = true; break;}
        
        
        
        
        
        if(inverse_leg != nullptr && *inverse_leg != QString("")){ isObjectUpdated = true; break;}
        if(sell_leg != nullptr && *sell_leg != QString("")){ isObjectUpdated = true; break;}
        if(buy_leg != nullptr && *buy_leg != QString("")){ isObjectUpdated = true; break;}
        if(m_option_strike_pcnt_isSet){ isObjectUpdated = true; break;}
        if(m_option_strike_round_isSet){ isObjectUpdated = true; break;}
        if(m_option_strike_price_isSet){ isObjectUpdated = true; break;}
        if(m_option_multiplier_isSet){ isObjectUpdated = true; break;}
        if(position_currency != nullptr && *position_currency != QString("")){ isObjectUpdated = true; break;}
        if(underlying != nullptr && *underlying != QString("")){ isObjectUpdated = true; break;}
        if(quote_currency != nullptr && *quote_currency != QString("")){ isObjectUpdated = true; break;}
        if(underlying_symbol != nullptr && *underlying_symbol != QString("")){ isObjectUpdated = true; break;}
        if(reference != nullptr && *reference != QString("")){ isObjectUpdated = true; break;}
        if(reference_symbol != nullptr && *reference_symbol != QString("")){ isObjectUpdated = true; break;}
        
        
        
        if(max_order_qty != nullptr && max_order_qty->isSet()){ isObjectUpdated = true; break;}
        if(m_max_price_isSet){ isObjectUpdated = true; break;}
        if(lot_size != nullptr && lot_size->isSet()){ isObjectUpdated = true; break;}
        if(m_tick_size_isSet){ isObjectUpdated = true; break;}
        if(multiplier != nullptr && multiplier->isSet()){ isObjectUpdated = true; break;}
        if(settl_currency != nullptr && *settl_currency != QString("")){ isObjectUpdated = true; break;}
        if(underlying_to_position_multiplier != nullptr && underlying_to_position_multiplier->isSet()){ isObjectUpdated = true; break;}
        if(underlying_to_settle_multiplier != nullptr && underlying_to_settle_multiplier->isSet()){ isObjectUpdated = true; break;}
        if(quote_to_settle_multiplier != nullptr && quote_to_settle_multiplier->isSet()){ isObjectUpdated = true; break;}
        if(m_is_quanto_isSet){ isObjectUpdated = true; break;}
        if(m_is_inverse_isSet){ isObjectUpdated = true; break;}
        if(m_init_margin_isSet){ isObjectUpdated = true; break;}
        if(m_maint_margin_isSet){ isObjectUpdated = true; break;}
        if(risk_limit != nullptr && risk_limit->isSet()){ isObjectUpdated = true; break;}
        if(risk_step != nullptr && risk_step->isSet()){ isObjectUpdated = true; break;}
        if(m_limit_isSet){ isObjectUpdated = true; break;}
        if(m_capped_isSet){ isObjectUpdated = true; break;}
        if(m_taxed_isSet){ isObjectUpdated = true; break;}
        if(m_deleverage_isSet){ isObjectUpdated = true; break;}
        if(m_maker_fee_isSet){ isObjectUpdated = true; break;}
        if(m_taker_fee_isSet){ isObjectUpdated = true; break;}
        if(m_settlement_fee_isSet){ isObjectUpdated = true; break;}
        if(m_insurance_fee_isSet){ isObjectUpdated = true; break;}
        if(funding_base_symbol != nullptr && *funding_base_symbol != QString("")){ isObjectUpdated = true; break;}
        if(funding_quote_symbol != nullptr && *funding_quote_symbol != QString("")){ isObjectUpdated = true; break;}
        if(funding_premium_symbol != nullptr && *funding_premium_symbol != QString("")){ isObjectUpdated = true; break;}
        
        
        if(m_funding_rate_isSet){ isObjectUpdated = true; break;}
        if(m_indicative_funding_rate_isSet){ isObjectUpdated = true; break;}
        
        
        
        
        
        if(m_prev_close_price_isSet){ isObjectUpdated = true; break;}
        if(m_limit_down_price_isSet){ isObjectUpdated = true; break;}
        if(m_limit_up_price_isSet){ isObjectUpdated = true; break;}
        if(m_bankrupt_limit_down_price_isSet){ isObjectUpdated = true; break;}
        if(m_bankrupt_limit_up_price_isSet){ isObjectUpdated = true; break;}
        if(prev_total_volume != nullptr && prev_total_volume->isSet()){ isObjectUpdated = true; break;}
        if(total_volume != nullptr && total_volume->isSet()){ isObjectUpdated = true; break;}
        if(volume != nullptr && volume->isSet()){ isObjectUpdated = true; break;}
        if(volume24h != nullptr && volume24h->isSet()){ isObjectUpdated = true; break;}
        if(prev_total_turnover != nullptr && prev_total_turnover->isSet()){ isObjectUpdated = true; break;}
        if(total_turnover != nullptr && total_turnover->isSet()){ isObjectUpdated = true; break;}
        if(turnover != nullptr && turnover->isSet()){ isObjectUpdated = true; break;}
        if(turnover24h != nullptr && turnover24h->isSet()){ isObjectUpdated = true; break;}
        if(m_prev_price24h_isSet){ isObjectUpdated = true; break;}
        if(m_vwap_isSet){ isObjectUpdated = true; break;}
        if(m_high_price_isSet){ isObjectUpdated = true; break;}
        if(m_low_price_isSet){ isObjectUpdated = true; break;}
        if(m_last_price_isSet){ isObjectUpdated = true; break;}
        if(m_last_price_protected_isSet){ isObjectUpdated = true; break;}
        if(last_tick_direction != nullptr && *last_tick_direction != QString("")){ isObjectUpdated = true; break;}
        if(m_last_change_pcnt_isSet){ isObjectUpdated = true; break;}
        if(m_bid_price_isSet){ isObjectUpdated = true; break;}
        if(m_mid_price_isSet){ isObjectUpdated = true; break;}
        if(m_ask_price_isSet){ isObjectUpdated = true; break;}
        if(m_impact_bid_price_isSet){ isObjectUpdated = true; break;}
        if(m_impact_mid_price_isSet){ isObjectUpdated = true; break;}
        if(m_impact_ask_price_isSet){ isObjectUpdated = true; break;}
        if(m_has_liquidity_isSet){ isObjectUpdated = true; break;}
        if(open_interest != nullptr && open_interest->isSet()){ isObjectUpdated = true; break;}
        if(open_value != nullptr && open_value->isSet()){ isObjectUpdated = true; break;}
        if(fair_method != nullptr && *fair_method != QString("")){ isObjectUpdated = true; break;}
        if(m_fair_basis_rate_isSet){ isObjectUpdated = true; break;}
        if(m_fair_basis_isSet){ isObjectUpdated = true; break;}
        if(m_fair_price_isSet){ isObjectUpdated = true; break;}
        if(mark_method != nullptr && *mark_method != QString("")){ isObjectUpdated = true; break;}
        if(m_mark_price_isSet){ isObjectUpdated = true; break;}
        if(m_indicative_tax_rate_isSet){ isObjectUpdated = true; break;}
        if(m_indicative_settle_price_isSet){ isObjectUpdated = true; break;}
        if(m_option_underlying_price_isSet){ isObjectUpdated = true; break;}
        if(m_settled_price_isSet){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

