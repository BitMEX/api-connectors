/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGInstrument.h
 *
 * Tradeable Contracts, Indices, and History
 */

#ifndef SWGInstrument_H_
#define SWGInstrument_H_

#include <QJsonObject>


#include "SWGNumber.h"
#include <QDateTime>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGInstrument: public SWGObject {
public:
    SWGInstrument();
    SWGInstrument(QString json);
    ~SWGInstrument();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGInstrument* fromJson(QString jsonString) override;

    QString* getSymbol();
    void setSymbol(QString* symbol);

    QString* getRootSymbol();
    void setRootSymbol(QString* root_symbol);

    QString* getState();
    void setState(QString* state);

    QString* getTyp();
    void setTyp(QString* typ);

    QDateTime* getListing();
    void setListing(QDateTime* listing);

    QDateTime* getFront();
    void setFront(QDateTime* front);

    QDateTime* getExpiry();
    void setExpiry(QDateTime* expiry);

    QDateTime* getSettle();
    void setSettle(QDateTime* settle);

    QDateTime* getRelistInterval();
    void setRelistInterval(QDateTime* relist_interval);

    QString* getInverseLeg();
    void setInverseLeg(QString* inverse_leg);

    QString* getSellLeg();
    void setSellLeg(QString* sell_leg);

    QString* getBuyLeg();
    void setBuyLeg(QString* buy_leg);

    double getOptionStrikePcnt();
    void setOptionStrikePcnt(double option_strike_pcnt);

    double getOptionStrikeRound();
    void setOptionStrikeRound(double option_strike_round);

    double getOptionStrikePrice();
    void setOptionStrikePrice(double option_strike_price);

    double getOptionMultiplier();
    void setOptionMultiplier(double option_multiplier);

    QString* getPositionCurrency();
    void setPositionCurrency(QString* position_currency);

    QString* getUnderlying();
    void setUnderlying(QString* underlying);

    QString* getQuoteCurrency();
    void setQuoteCurrency(QString* quote_currency);

    QString* getUnderlyingSymbol();
    void setUnderlyingSymbol(QString* underlying_symbol);

    QString* getReference();
    void setReference(QString* reference);

    QString* getReferenceSymbol();
    void setReferenceSymbol(QString* reference_symbol);

    QDateTime* getCalcInterval();
    void setCalcInterval(QDateTime* calc_interval);

    QDateTime* getPublishInterval();
    void setPublishInterval(QDateTime* publish_interval);

    QDateTime* getPublishTime();
    void setPublishTime(QDateTime* publish_time);

    SWGNumber* getMaxOrderQty();
    void setMaxOrderQty(SWGNumber* max_order_qty);

    double getMaxPrice();
    void setMaxPrice(double max_price);

    SWGNumber* getLotSize();
    void setLotSize(SWGNumber* lot_size);

    double getTickSize();
    void setTickSize(double tick_size);

    SWGNumber* getMultiplier();
    void setMultiplier(SWGNumber* multiplier);

    QString* getSettlCurrency();
    void setSettlCurrency(QString* settl_currency);

    SWGNumber* getUnderlyingToPositionMultiplier();
    void setUnderlyingToPositionMultiplier(SWGNumber* underlying_to_position_multiplier);

    SWGNumber* getUnderlyingToSettleMultiplier();
    void setUnderlyingToSettleMultiplier(SWGNumber* underlying_to_settle_multiplier);

    SWGNumber* getQuoteToSettleMultiplier();
    void setQuoteToSettleMultiplier(SWGNumber* quote_to_settle_multiplier);

    bool isIsQuanto();
    void setIsQuanto(bool is_quanto);

    bool isIsInverse();
    void setIsInverse(bool is_inverse);

    double getInitMargin();
    void setInitMargin(double init_margin);

    double getMaintMargin();
    void setMaintMargin(double maint_margin);

    SWGNumber* getRiskLimit();
    void setRiskLimit(SWGNumber* risk_limit);

    SWGNumber* getRiskStep();
    void setRiskStep(SWGNumber* risk_step);

    double getLimit();
    void setLimit(double limit);

    bool isCapped();
    void setCapped(bool capped);

    bool isTaxed();
    void setTaxed(bool taxed);

    bool isDeleverage();
    void setDeleverage(bool deleverage);

    double getMakerFee();
    void setMakerFee(double maker_fee);

    double getTakerFee();
    void setTakerFee(double taker_fee);

    double getSettlementFee();
    void setSettlementFee(double settlement_fee);

    double getInsuranceFee();
    void setInsuranceFee(double insurance_fee);

    QString* getFundingBaseSymbol();
    void setFundingBaseSymbol(QString* funding_base_symbol);

    QString* getFundingQuoteSymbol();
    void setFundingQuoteSymbol(QString* funding_quote_symbol);

    QString* getFundingPremiumSymbol();
    void setFundingPremiumSymbol(QString* funding_premium_symbol);

    QDateTime* getFundingTimestamp();
    void setFundingTimestamp(QDateTime* funding_timestamp);

    QDateTime* getFundingInterval();
    void setFundingInterval(QDateTime* funding_interval);

    double getFundingRate();
    void setFundingRate(double funding_rate);

    double getIndicativeFundingRate();
    void setIndicativeFundingRate(double indicative_funding_rate);

    QDateTime* getRebalanceTimestamp();
    void setRebalanceTimestamp(QDateTime* rebalance_timestamp);

    QDateTime* getRebalanceInterval();
    void setRebalanceInterval(QDateTime* rebalance_interval);

    QDateTime* getOpeningTimestamp();
    void setOpeningTimestamp(QDateTime* opening_timestamp);

    QDateTime* getClosingTimestamp();
    void setClosingTimestamp(QDateTime* closing_timestamp);

    QDateTime* getSessionInterval();
    void setSessionInterval(QDateTime* session_interval);

    double getPrevClosePrice();
    void setPrevClosePrice(double prev_close_price);

    double getLimitDownPrice();
    void setLimitDownPrice(double limit_down_price);

    double getLimitUpPrice();
    void setLimitUpPrice(double limit_up_price);

    double getBankruptLimitDownPrice();
    void setBankruptLimitDownPrice(double bankrupt_limit_down_price);

    double getBankruptLimitUpPrice();
    void setBankruptLimitUpPrice(double bankrupt_limit_up_price);

    SWGNumber* getPrevTotalVolume();
    void setPrevTotalVolume(SWGNumber* prev_total_volume);

    SWGNumber* getTotalVolume();
    void setTotalVolume(SWGNumber* total_volume);

    SWGNumber* getVolume();
    void setVolume(SWGNumber* volume);

    SWGNumber* getVolume24h();
    void setVolume24h(SWGNumber* volume24h);

    SWGNumber* getPrevTotalTurnover();
    void setPrevTotalTurnover(SWGNumber* prev_total_turnover);

    SWGNumber* getTotalTurnover();
    void setTotalTurnover(SWGNumber* total_turnover);

    SWGNumber* getTurnover();
    void setTurnover(SWGNumber* turnover);

    SWGNumber* getTurnover24h();
    void setTurnover24h(SWGNumber* turnover24h);

    double getPrevPrice24h();
    void setPrevPrice24h(double prev_price24h);

    double getVwap();
    void setVwap(double vwap);

    double getHighPrice();
    void setHighPrice(double high_price);

    double getLowPrice();
    void setLowPrice(double low_price);

    double getLastPrice();
    void setLastPrice(double last_price);

    double getLastPriceProtected();
    void setLastPriceProtected(double last_price_protected);

    QString* getLastTickDirection();
    void setLastTickDirection(QString* last_tick_direction);

    double getLastChangePcnt();
    void setLastChangePcnt(double last_change_pcnt);

    double getBidPrice();
    void setBidPrice(double bid_price);

    double getMidPrice();
    void setMidPrice(double mid_price);

    double getAskPrice();
    void setAskPrice(double ask_price);

    double getImpactBidPrice();
    void setImpactBidPrice(double impact_bid_price);

    double getImpactMidPrice();
    void setImpactMidPrice(double impact_mid_price);

    double getImpactAskPrice();
    void setImpactAskPrice(double impact_ask_price);

    bool isHasLiquidity();
    void setHasLiquidity(bool has_liquidity);

    SWGNumber* getOpenInterest();
    void setOpenInterest(SWGNumber* open_interest);

    SWGNumber* getOpenValue();
    void setOpenValue(SWGNumber* open_value);

    QString* getFairMethod();
    void setFairMethod(QString* fair_method);

    double getFairBasisRate();
    void setFairBasisRate(double fair_basis_rate);

    double getFairBasis();
    void setFairBasis(double fair_basis);

    double getFairPrice();
    void setFairPrice(double fair_price);

    QString* getMarkMethod();
    void setMarkMethod(QString* mark_method);

    double getMarkPrice();
    void setMarkPrice(double mark_price);

    double getIndicativeTaxRate();
    void setIndicativeTaxRate(double indicative_tax_rate);

    double getIndicativeSettlePrice();
    void setIndicativeSettlePrice(double indicative_settle_price);

    double getOptionUnderlyingPrice();
    void setOptionUnderlyingPrice(double option_underlying_price);

    double getSettledPrice();
    void setSettledPrice(double settled_price);

    QDateTime* getTimestamp();
    void setTimestamp(QDateTime* timestamp);


    virtual bool isSet() override;

private:
    QString* symbol;
    bool m_symbol_isSet;

    QString* root_symbol;
    bool m_root_symbol_isSet;

    QString* state;
    bool m_state_isSet;

    QString* typ;
    bool m_typ_isSet;

    QDateTime* listing;
    bool m_listing_isSet;

    QDateTime* front;
    bool m_front_isSet;

    QDateTime* expiry;
    bool m_expiry_isSet;

    QDateTime* settle;
    bool m_settle_isSet;

    QDateTime* relist_interval;
    bool m_relist_interval_isSet;

    QString* inverse_leg;
    bool m_inverse_leg_isSet;

    QString* sell_leg;
    bool m_sell_leg_isSet;

    QString* buy_leg;
    bool m_buy_leg_isSet;

    double option_strike_pcnt;
    bool m_option_strike_pcnt_isSet;

    double option_strike_round;
    bool m_option_strike_round_isSet;

    double option_strike_price;
    bool m_option_strike_price_isSet;

    double option_multiplier;
    bool m_option_multiplier_isSet;

    QString* position_currency;
    bool m_position_currency_isSet;

    QString* underlying;
    bool m_underlying_isSet;

    QString* quote_currency;
    bool m_quote_currency_isSet;

    QString* underlying_symbol;
    bool m_underlying_symbol_isSet;

    QString* reference;
    bool m_reference_isSet;

    QString* reference_symbol;
    bool m_reference_symbol_isSet;

    QDateTime* calc_interval;
    bool m_calc_interval_isSet;

    QDateTime* publish_interval;
    bool m_publish_interval_isSet;

    QDateTime* publish_time;
    bool m_publish_time_isSet;

    SWGNumber* max_order_qty;
    bool m_max_order_qty_isSet;

    double max_price;
    bool m_max_price_isSet;

    SWGNumber* lot_size;
    bool m_lot_size_isSet;

    double tick_size;
    bool m_tick_size_isSet;

    SWGNumber* multiplier;
    bool m_multiplier_isSet;

    QString* settl_currency;
    bool m_settl_currency_isSet;

    SWGNumber* underlying_to_position_multiplier;
    bool m_underlying_to_position_multiplier_isSet;

    SWGNumber* underlying_to_settle_multiplier;
    bool m_underlying_to_settle_multiplier_isSet;

    SWGNumber* quote_to_settle_multiplier;
    bool m_quote_to_settle_multiplier_isSet;

    bool is_quanto;
    bool m_is_quanto_isSet;

    bool is_inverse;
    bool m_is_inverse_isSet;

    double init_margin;
    bool m_init_margin_isSet;

    double maint_margin;
    bool m_maint_margin_isSet;

    SWGNumber* risk_limit;
    bool m_risk_limit_isSet;

    SWGNumber* risk_step;
    bool m_risk_step_isSet;

    double limit;
    bool m_limit_isSet;

    bool capped;
    bool m_capped_isSet;

    bool taxed;
    bool m_taxed_isSet;

    bool deleverage;
    bool m_deleverage_isSet;

    double maker_fee;
    bool m_maker_fee_isSet;

    double taker_fee;
    bool m_taker_fee_isSet;

    double settlement_fee;
    bool m_settlement_fee_isSet;

    double insurance_fee;
    bool m_insurance_fee_isSet;

    QString* funding_base_symbol;
    bool m_funding_base_symbol_isSet;

    QString* funding_quote_symbol;
    bool m_funding_quote_symbol_isSet;

    QString* funding_premium_symbol;
    bool m_funding_premium_symbol_isSet;

    QDateTime* funding_timestamp;
    bool m_funding_timestamp_isSet;

    QDateTime* funding_interval;
    bool m_funding_interval_isSet;

    double funding_rate;
    bool m_funding_rate_isSet;

    double indicative_funding_rate;
    bool m_indicative_funding_rate_isSet;

    QDateTime* rebalance_timestamp;
    bool m_rebalance_timestamp_isSet;

    QDateTime* rebalance_interval;
    bool m_rebalance_interval_isSet;

    QDateTime* opening_timestamp;
    bool m_opening_timestamp_isSet;

    QDateTime* closing_timestamp;
    bool m_closing_timestamp_isSet;

    QDateTime* session_interval;
    bool m_session_interval_isSet;

    double prev_close_price;
    bool m_prev_close_price_isSet;

    double limit_down_price;
    bool m_limit_down_price_isSet;

    double limit_up_price;
    bool m_limit_up_price_isSet;

    double bankrupt_limit_down_price;
    bool m_bankrupt_limit_down_price_isSet;

    double bankrupt_limit_up_price;
    bool m_bankrupt_limit_up_price_isSet;

    SWGNumber* prev_total_volume;
    bool m_prev_total_volume_isSet;

    SWGNumber* total_volume;
    bool m_total_volume_isSet;

    SWGNumber* volume;
    bool m_volume_isSet;

    SWGNumber* volume24h;
    bool m_volume24h_isSet;

    SWGNumber* prev_total_turnover;
    bool m_prev_total_turnover_isSet;

    SWGNumber* total_turnover;
    bool m_total_turnover_isSet;

    SWGNumber* turnover;
    bool m_turnover_isSet;

    SWGNumber* turnover24h;
    bool m_turnover24h_isSet;

    double prev_price24h;
    bool m_prev_price24h_isSet;

    double vwap;
    bool m_vwap_isSet;

    double high_price;
    bool m_high_price_isSet;

    double low_price;
    bool m_low_price_isSet;

    double last_price;
    bool m_last_price_isSet;

    double last_price_protected;
    bool m_last_price_protected_isSet;

    QString* last_tick_direction;
    bool m_last_tick_direction_isSet;

    double last_change_pcnt;
    bool m_last_change_pcnt_isSet;

    double bid_price;
    bool m_bid_price_isSet;

    double mid_price;
    bool m_mid_price_isSet;

    double ask_price;
    bool m_ask_price_isSet;

    double impact_bid_price;
    bool m_impact_bid_price_isSet;

    double impact_mid_price;
    bool m_impact_mid_price_isSet;

    double impact_ask_price;
    bool m_impact_ask_price_isSet;

    bool has_liquidity;
    bool m_has_liquidity_isSet;

    SWGNumber* open_interest;
    bool m_open_interest_isSet;

    SWGNumber* open_value;
    bool m_open_value_isSet;

    QString* fair_method;
    bool m_fair_method_isSet;

    double fair_basis_rate;
    bool m_fair_basis_rate_isSet;

    double fair_basis;
    bool m_fair_basis_isSet;

    double fair_price;
    bool m_fair_price_isSet;

    QString* mark_method;
    bool m_mark_method_isSet;

    double mark_price;
    bool m_mark_price_isSet;

    double indicative_tax_rate;
    bool m_indicative_tax_rate_isSet;

    double indicative_settle_price;
    bool m_indicative_settle_price_isSet;

    double option_underlying_price;
    bool m_option_underlying_price_isSet;

    double settled_price;
    bool m_settled_price_isSet;

    QDateTime* timestamp;
    bool m_timestamp_isSet;

};

}

#endif /* SWGInstrument_H_ */
