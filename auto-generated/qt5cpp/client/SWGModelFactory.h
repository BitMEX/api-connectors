/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef ModelFactory_H_
#define ModelFactory_H_

#include "SWGObject.h"

#include "SWGAPIKey.h"
#include "SWGAccessToken.h"
#include "SWGAffiliate.h"
#include "SWGAnnouncement.h"
#include "SWGChat.h"
#include "SWGChatChannel.h"
#include "SWGConnectedUsers.h"
#include "SWGError.h"
#include "SWGError_error.h"
#include "SWGExecution.h"
#include "SWGFunding.h"
#include "SWGIndexComposite.h"
#include "SWGInline_response_200.h"
#include "SWGInline_response_200_1.h"
#include "SWGInstrument.h"
#include "SWGInstrumentInterval.h"
#include "SWGInsurance.h"
#include "SWGLeaderboard.h"
#include "SWGLiquidation.h"
#include "SWGMargin.h"
#include "SWGNotification.h"
#include "SWGOrder.h"
#include "SWGOrderBookL2.h"
#include "SWGPosition.h"
#include "SWGQuote.h"
#include "SWGSettlement.h"
#include "SWGStats.h"
#include "SWGStatsHistory.h"
#include "SWGStatsUSD.h"
#include "SWGTrade.h"
#include "SWGTradeBin.h"
#include "SWGTransaction.h"
#include "SWGUser.h"
#include "SWGUserCommission.h"
#include "SWGUserPreferences.h"
#include "SWGWallet.h"
#include "SWGX-any.h"

namespace Swagger {

  inline void* create(QString type) {
    if(QString("SWGAPIKey").compare(type) == 0) {
      return new SWGAPIKey();
    }
    if(QString("SWGAccessToken").compare(type) == 0) {
      return new SWGAccessToken();
    }
    if(QString("SWGAffiliate").compare(type) == 0) {
      return new SWGAffiliate();
    }
    if(QString("SWGAnnouncement").compare(type) == 0) {
      return new SWGAnnouncement();
    }
    if(QString("SWGChat").compare(type) == 0) {
      return new SWGChat();
    }
    if(QString("SWGChatChannel").compare(type) == 0) {
      return new SWGChatChannel();
    }
    if(QString("SWGConnectedUsers").compare(type) == 0) {
      return new SWGConnectedUsers();
    }
    if(QString("SWGError").compare(type) == 0) {
      return new SWGError();
    }
    if(QString("SWGError_error").compare(type) == 0) {
      return new SWGError_error();
    }
    if(QString("SWGExecution").compare(type) == 0) {
      return new SWGExecution();
    }
    if(QString("SWGFunding").compare(type) == 0) {
      return new SWGFunding();
    }
    if(QString("SWGIndexComposite").compare(type) == 0) {
      return new SWGIndexComposite();
    }
    if(QString("SWGInline_response_200").compare(type) == 0) {
      return new SWGInline_response_200();
    }
    if(QString("SWGInline_response_200_1").compare(type) == 0) {
      return new SWGInline_response_200_1();
    }
    if(QString("SWGInstrument").compare(type) == 0) {
      return new SWGInstrument();
    }
    if(QString("SWGInstrumentInterval").compare(type) == 0) {
      return new SWGInstrumentInterval();
    }
    if(QString("SWGInsurance").compare(type) == 0) {
      return new SWGInsurance();
    }
    if(QString("SWGLeaderboard").compare(type) == 0) {
      return new SWGLeaderboard();
    }
    if(QString("SWGLiquidation").compare(type) == 0) {
      return new SWGLiquidation();
    }
    if(QString("SWGMargin").compare(type) == 0) {
      return new SWGMargin();
    }
    if(QString("SWGNotification").compare(type) == 0) {
      return new SWGNotification();
    }
    if(QString("SWGOrder").compare(type) == 0) {
      return new SWGOrder();
    }
    if(QString("SWGOrderBookL2").compare(type) == 0) {
      return new SWGOrderBookL2();
    }
    if(QString("SWGPosition").compare(type) == 0) {
      return new SWGPosition();
    }
    if(QString("SWGQuote").compare(type) == 0) {
      return new SWGQuote();
    }
    if(QString("SWGSettlement").compare(type) == 0) {
      return new SWGSettlement();
    }
    if(QString("SWGStats").compare(type) == 0) {
      return new SWGStats();
    }
    if(QString("SWGStatsHistory").compare(type) == 0) {
      return new SWGStatsHistory();
    }
    if(QString("SWGStatsUSD").compare(type) == 0) {
      return new SWGStatsUSD();
    }
    if(QString("SWGTrade").compare(type) == 0) {
      return new SWGTrade();
    }
    if(QString("SWGTradeBin").compare(type) == 0) {
      return new SWGTradeBin();
    }
    if(QString("SWGTransaction").compare(type) == 0) {
      return new SWGTransaction();
    }
    if(QString("SWGUser").compare(type) == 0) {
      return new SWGUser();
    }
    if(QString("SWGUserCommission").compare(type) == 0) {
      return new SWGUserCommission();
    }
    if(QString("SWGUserPreferences").compare(type) == 0) {
      return new SWGUserPreferences();
    }
    if(QString("SWGWallet").compare(type) == 0) {
      return new SWGWallet();
    }
    if(QString("SWGX-any").compare(type) == 0) {
      return new SWGX-any();
    }
    
    return nullptr;
  }

  inline void* create(QString json, QString type) {
    if(type.startsWith("QString")) {
      return new QString();
    }    
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      return val->fromJson(json);
    }
    return nullptr;
  }

}

#endif /* ModelFactory_H_ */
