/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGNotification.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGNotification::SWGNotification(QString json) {
    init();
    this->fromJson(json);
}

SWGNotification::SWGNotification() {
    init();
}

SWGNotification::~SWGNotification() {
    this->cleanup();
}

void
SWGNotification::init() {
    id = 0.0;
    m_id_isSet = false;
    date = NULL;
    m_date_isSet = false;
    title = new QString("");
    m_title_isSet = false;
    body = new QString("");
    m_body_isSet = false;
    ttl = 0.0;
    m_ttl_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    closable = false;
    m_closable_isSet = false;
    persist = false;
    m_persist_isSet = false;
    wait_for_visibility = false;
    m_wait_for_visibility_isSet = false;
    sound = new QString("");
    m_sound_isSet = false;
}

void
SWGNotification::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(date != nullptr) { 
        delete date;
    }
    if(title != nullptr) { 
        delete title;
    }
    if(body != nullptr) { 
        delete body;
    }
    if(ttl != nullptr) { 
        delete ttl;
    }
    if(type != nullptr) { 
        delete type;
    }



    if(sound != nullptr) { 
        delete sound;
    }
}

SWGNotification*
SWGNotification::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGNotification::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&date, pJson["date"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&title, pJson["title"], "QString", "QString");
    
    ::Swagger::setValue(&body, pJson["body"], "QString", "QString");
    
    ::Swagger::setValue(&ttl, pJson["ttl"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&type, pJson["type"], "QString", "QString");
    
    ::Swagger::setValue(&closable, pJson["closable"], "bool", "");
    
    ::Swagger::setValue(&persist, pJson["persist"], "bool", "");
    
    ::Swagger::setValue(&wait_for_visibility, pJson["waitForVisibility"], "bool", "");
    
    ::Swagger::setValue(&sound, pJson["sound"], "QString", "QString");
    
}

QString
SWGNotification::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGNotification::asJsonObject() {
    QJsonObject obj;
    if((id != nullptr) && (id->isSet())){
        toJsonValue(QString("id"), id, obj, QString("SWGNumber"));
    }
    if(date != nullptr) { 
        toJsonValue(QString("date"), date, obj, QString("QDateTime"));
    }
    if(title != nullptr && *title != QString("")){
        toJsonValue(QString("title"), title, obj, QString("QString"));
    }
    if(body != nullptr && *body != QString("")){
        toJsonValue(QString("body"), body, obj, QString("QString"));
    }
    if((ttl != nullptr) && (ttl->isSet())){
        toJsonValue(QString("ttl"), ttl, obj, QString("SWGNumber"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(m_closable_isSet){
        obj.insert("closable", QJsonValue(closable));
    }
    if(m_persist_isSet){
        obj.insert("persist", QJsonValue(persist));
    }
    if(m_wait_for_visibility_isSet){
        obj.insert("waitForVisibility", QJsonValue(wait_for_visibility));
    }
    if(sound != nullptr && *sound != QString("")){
        toJsonValue(QString("sound"), sound, obj, QString("QString"));
    }

    return obj;
}

SWGNumber*
SWGNotification::getId() {
    return id;
}
void
SWGNotification::setId(SWGNumber* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QDateTime*
SWGNotification::getDate() {
    return date;
}
void
SWGNotification::setDate(QDateTime* date) {
    this->date = date;
    this->m_date_isSet = true;
}

QString*
SWGNotification::getTitle() {
    return title;
}
void
SWGNotification::setTitle(QString* title) {
    this->title = title;
    this->m_title_isSet = true;
}

QString*
SWGNotification::getBody() {
    return body;
}
void
SWGNotification::setBody(QString* body) {
    this->body = body;
    this->m_body_isSet = true;
}

SWGNumber*
SWGNotification::getTtl() {
    return ttl;
}
void
SWGNotification::setTtl(SWGNumber* ttl) {
    this->ttl = ttl;
    this->m_ttl_isSet = true;
}

QString*
SWGNotification::getType() {
    return type;
}
void
SWGNotification::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool
SWGNotification::isClosable() {
    return closable;
}
void
SWGNotification::setClosable(bool closable) {
    this->closable = closable;
    this->m_closable_isSet = true;
}

bool
SWGNotification::isPersist() {
    return persist;
}
void
SWGNotification::setPersist(bool persist) {
    this->persist = persist;
    this->m_persist_isSet = true;
}

bool
SWGNotification::isWaitForVisibility() {
    return wait_for_visibility;
}
void
SWGNotification::setWaitForVisibility(bool wait_for_visibility) {
    this->wait_for_visibility = wait_for_visibility;
    this->m_wait_for_visibility_isSet = true;
}

QString*
SWGNotification::getSound() {
    return sound;
}
void
SWGNotification::setSound(QString* sound) {
    this->sound = sound;
    this->m_sound_isSet = true;
}


bool
SWGNotification::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && id->isSet()){ isObjectUpdated = true; break;}
        
        if(title != nullptr && *title != QString("")){ isObjectUpdated = true; break;}
        if(body != nullptr && *body != QString("")){ isObjectUpdated = true; break;}
        if(ttl != nullptr && ttl->isSet()){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(m_closable_isSet){ isObjectUpdated = true; break;}
        if(m_persist_isSet){ isObjectUpdated = true; break;}
        if(m_wait_for_visibility_isSet){ isObjectUpdated = true; break;}
        if(sound != nullptr && *sound != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

