/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGQuote.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGQuote::SWGQuote(QString json) {
    init();
    this->fromJson(json);
}

SWGQuote::SWGQuote() {
    init();
}

SWGQuote::~SWGQuote() {
    this->cleanup();
}

void
SWGQuote::init() {
    timestamp = NULL;
    m_timestamp_isSet = false;
    symbol = new QString("");
    m_symbol_isSet = false;
    bid_size = 0.0;
    m_bid_size_isSet = false;
    bid_price = 0.0;
    m_bid_price_isSet = false;
    ask_price = 0.0;
    m_ask_price_isSet = false;
    ask_size = 0.0;
    m_ask_size_isSet = false;
}

void
SWGQuote::cleanup() {
    if(timestamp != nullptr) { 
        delete timestamp;
    }
    if(symbol != nullptr) { 
        delete symbol;
    }
    if(bid_size != nullptr) { 
        delete bid_size;
    }


    if(ask_size != nullptr) { 
        delete ask_size;
    }
}

SWGQuote*
SWGQuote::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGQuote::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&bid_size, pJson["bidSize"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&bid_price, pJson["bidPrice"], "double", "");
    
    ::Swagger::setValue(&ask_price, pJson["askPrice"], "double", "");
    
    ::Swagger::setValue(&ask_size, pJson["askSize"], "SWGNumber", "SWGNumber");
    
}

QString
SWGQuote::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGQuote::asJsonObject() {
    QJsonObject obj;
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if((bid_size != nullptr) && (bid_size->isSet())){
        toJsonValue(QString("bidSize"), bid_size, obj, QString("SWGNumber"));
    }
    if(m_bid_price_isSet){
        obj.insert("bidPrice", QJsonValue(bid_price));
    }
    if(m_ask_price_isSet){
        obj.insert("askPrice", QJsonValue(ask_price));
    }
    if((ask_size != nullptr) && (ask_size->isSet())){
        toJsonValue(QString("askSize"), ask_size, obj, QString("SWGNumber"));
    }

    return obj;
}

QDateTime*
SWGQuote::getTimestamp() {
    return timestamp;
}
void
SWGQuote::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

QString*
SWGQuote::getSymbol() {
    return symbol;
}
void
SWGQuote::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

SWGNumber*
SWGQuote::getBidSize() {
    return bid_size;
}
void
SWGQuote::setBidSize(SWGNumber* bid_size) {
    this->bid_size = bid_size;
    this->m_bid_size_isSet = true;
}

double
SWGQuote::getBidPrice() {
    return bid_price;
}
void
SWGQuote::setBidPrice(double bid_price) {
    this->bid_price = bid_price;
    this->m_bid_price_isSet = true;
}

double
SWGQuote::getAskPrice() {
    return ask_price;
}
void
SWGQuote::setAskPrice(double ask_price) {
    this->ask_price = ask_price;
    this->m_ask_price_isSet = true;
}

SWGNumber*
SWGQuote::getAskSize() {
    return ask_size;
}
void
SWGQuote::setAskSize(SWGNumber* ask_size) {
    this->ask_size = ask_size;
    this->m_ask_size_isSet = true;
}


bool
SWGQuote::isSet(){
    bool isObjectUpdated = false;
    do{
        
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(bid_size != nullptr && bid_size->isSet()){ isObjectUpdated = true; break;}
        if(m_bid_price_isSet){ isObjectUpdated = true; break;}
        if(m_ask_price_isSet){ isObjectUpdated = true; break;}
        if(ask_size != nullptr && ask_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

