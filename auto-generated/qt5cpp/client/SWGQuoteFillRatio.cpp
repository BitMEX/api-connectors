/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGQuoteFillRatio.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGQuoteFillRatio::SWGQuoteFillRatio(QString json) {
    init();
    this->fromJson(json);
}

SWGQuoteFillRatio::SWGQuoteFillRatio() {
    init();
}

SWGQuoteFillRatio::~SWGQuoteFillRatio() {
    this->cleanup();
}

void
SWGQuoteFillRatio::init() {
    date = NULL;
    m_date_isSet = false;
    account = 0.0;
    m_account_isSet = false;
    quote_count = 0.0;
    m_quote_count_isSet = false;
    dealt_count = 0.0;
    m_dealt_count_isSet = false;
    quotes_mavg7 = 0.0;
    m_quotes_mavg7_isSet = false;
    dealt_mavg7 = 0.0;
    m_dealt_mavg7_isSet = false;
    quote_fill_ratio_mavg7 = 0.0;
    m_quote_fill_ratio_mavg7_isSet = false;
}

void
SWGQuoteFillRatio::cleanup() {
    if(date != nullptr) { 
        delete date;
    }






}

SWGQuoteFillRatio*
SWGQuoteFillRatio::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGQuoteFillRatio::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&date, pJson["date"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&account, pJson["account"], "double", "");
    
    ::Swagger::setValue(&quote_count, pJson["quoteCount"], "double", "");
    
    ::Swagger::setValue(&dealt_count, pJson["dealtCount"], "double", "");
    
    ::Swagger::setValue(&quotes_mavg7, pJson["quotesMavg7"], "double", "");
    
    ::Swagger::setValue(&dealt_mavg7, pJson["dealtMavg7"], "double", "");
    
    ::Swagger::setValue(&quote_fill_ratio_mavg7, pJson["quoteFillRatioMavg7"], "double", "");
    
}

QString
SWGQuoteFillRatio::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGQuoteFillRatio::asJsonObject() {
    QJsonObject obj;
    if(date != nullptr) { 
        toJsonValue(QString("date"), date, obj, QString("QDateTime"));
    }
    if(m_account_isSet){
        obj.insert("account", QJsonValue(account));
    }
    if(m_quote_count_isSet){
        obj.insert("quoteCount", QJsonValue(quote_count));
    }
    if(m_dealt_count_isSet){
        obj.insert("dealtCount", QJsonValue(dealt_count));
    }
    if(m_quotes_mavg7_isSet){
        obj.insert("quotesMavg7", QJsonValue(quotes_mavg7));
    }
    if(m_dealt_mavg7_isSet){
        obj.insert("dealtMavg7", QJsonValue(dealt_mavg7));
    }
    if(m_quote_fill_ratio_mavg7_isSet){
        obj.insert("quoteFillRatioMavg7", QJsonValue(quote_fill_ratio_mavg7));
    }

    return obj;
}

QDateTime*
SWGQuoteFillRatio::getDate() {
    return date;
}
void
SWGQuoteFillRatio::setDate(QDateTime* date) {
    this->date = date;
    this->m_date_isSet = true;
}

double
SWGQuoteFillRatio::getAccount() {
    return account;
}
void
SWGQuoteFillRatio::setAccount(double account) {
    this->account = account;
    this->m_account_isSet = true;
}

double
SWGQuoteFillRatio::getQuoteCount() {
    return quote_count;
}
void
SWGQuoteFillRatio::setQuoteCount(double quote_count) {
    this->quote_count = quote_count;
    this->m_quote_count_isSet = true;
}

double
SWGQuoteFillRatio::getDealtCount() {
    return dealt_count;
}
void
SWGQuoteFillRatio::setDealtCount(double dealt_count) {
    this->dealt_count = dealt_count;
    this->m_dealt_count_isSet = true;
}

double
SWGQuoteFillRatio::getQuotesMavg7() {
    return quotes_mavg7;
}
void
SWGQuoteFillRatio::setQuotesMavg7(double quotes_mavg7) {
    this->quotes_mavg7 = quotes_mavg7;
    this->m_quotes_mavg7_isSet = true;
}

double
SWGQuoteFillRatio::getDealtMavg7() {
    return dealt_mavg7;
}
void
SWGQuoteFillRatio::setDealtMavg7(double dealt_mavg7) {
    this->dealt_mavg7 = dealt_mavg7;
    this->m_dealt_mavg7_isSet = true;
}

double
SWGQuoteFillRatio::getQuoteFillRatioMavg7() {
    return quote_fill_ratio_mavg7;
}
void
SWGQuoteFillRatio::setQuoteFillRatioMavg7(double quote_fill_ratio_mavg7) {
    this->quote_fill_ratio_mavg7 = quote_fill_ratio_mavg7;
    this->m_quote_fill_ratio_mavg7_isSet = true;
}


bool
SWGQuoteFillRatio::isSet(){
    bool isObjectUpdated = false;
    do{
        
        if(m_account_isSet){ isObjectUpdated = true; break;}
        if(m_quote_count_isSet){ isObjectUpdated = true; break;}
        if(m_dealt_count_isSet){ isObjectUpdated = true; break;}
        if(m_quotes_mavg7_isSet){ isObjectUpdated = true; break;}
        if(m_dealt_mavg7_isSet){ isObjectUpdated = true; break;}
        if(m_quote_fill_ratio_mavg7_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

