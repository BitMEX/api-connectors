/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGQuoteValueRatio.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGQuoteValueRatio::SWGQuoteValueRatio(QString json) {
    init();
    this->fromJson(json);
}

SWGQuoteValueRatio::SWGQuoteValueRatio() {
    init();
}

SWGQuoteValueRatio::~SWGQuoteValueRatio() {
    this->cleanup();
}

void
SWGQuoteValueRatio::init() {
    timestamp = NULL;
    m_timestamp_isSet = false;
    account = 0.0;
    m_account_isSet = false;
    symbol = new QString("");
    m_symbol_isSet = false;
    quote_count = 0.0;
    m_quote_count_isSet = false;
    volume_xbt = 0.0;
    m_volume_xbt_isSet = false;
    qvr = 0.0;
    m_qvr_isSet = false;
    id = 0.0;
    m_id_isSet = false;
}

void
SWGQuoteValueRatio::cleanup() {
    if(timestamp != nullptr) { 
        delete timestamp;
    }

    if(symbol != nullptr) { 
        delete symbol;
    }




}

SWGQuoteValueRatio*
SWGQuoteValueRatio::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGQuoteValueRatio::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&account, pJson["account"], "double", "");
    
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&quote_count, pJson["quoteCount"], "double", "");
    
    ::Swagger::setValue(&volume_xbt, pJson["volumeXBT"], "double", "");
    
    ::Swagger::setValue(&qvr, pJson["QVR"], "double", "");
    
    ::Swagger::setValue(&id, pJson["id"], "double", "");
    
}

QString
SWGQuoteValueRatio::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGQuoteValueRatio::asJsonObject() {
    QJsonObject obj;
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }
    if(m_account_isSet){
        obj.insert("account", QJsonValue(account));
    }
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(m_quote_count_isSet){
        obj.insert("quoteCount", QJsonValue(quote_count));
    }
    if(m_volume_xbt_isSet){
        obj.insert("volumeXBT", QJsonValue(volume_xbt));
    }
    if(m_qvr_isSet){
        obj.insert("QVR", QJsonValue(qvr));
    }
    if(m_id_isSet){
        obj.insert("id", QJsonValue(id));
    }

    return obj;
}

QDateTime*
SWGQuoteValueRatio::getTimestamp() {
    return timestamp;
}
void
SWGQuoteValueRatio::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

double
SWGQuoteValueRatio::getAccount() {
    return account;
}
void
SWGQuoteValueRatio::setAccount(double account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGQuoteValueRatio::getSymbol() {
    return symbol;
}
void
SWGQuoteValueRatio::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

double
SWGQuoteValueRatio::getQuoteCount() {
    return quote_count;
}
void
SWGQuoteValueRatio::setQuoteCount(double quote_count) {
    this->quote_count = quote_count;
    this->m_quote_count_isSet = true;
}

double
SWGQuoteValueRatio::getVolumeXbt() {
    return volume_xbt;
}
void
SWGQuoteValueRatio::setVolumeXbt(double volume_xbt) {
    this->volume_xbt = volume_xbt;
    this->m_volume_xbt_isSet = true;
}

double
SWGQuoteValueRatio::getQvr() {
    return qvr;
}
void
SWGQuoteValueRatio::setQvr(double qvr) {
    this->qvr = qvr;
    this->m_qvr_isSet = true;
}

double
SWGQuoteValueRatio::getId() {
    return id;
}
void
SWGQuoteValueRatio::setId(double id) {
    this->id = id;
    this->m_id_isSet = true;
}


bool
SWGQuoteValueRatio::isSet(){
    bool isObjectUpdated = false;
    do{
        
        if(m_account_isSet){ isObjectUpdated = true; break;}
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(m_quote_count_isSet){ isObjectUpdated = true; break;}
        if(m_volume_xbt_isSet){ isObjectUpdated = true; break;}
        if(m_qvr_isSet){ isObjectUpdated = true; break;}
        if(m_id_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

