/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSettlement.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGSettlement::SWGSettlement(QString json) {
    init();
    this->fromJson(json);
}

SWGSettlement::SWGSettlement() {
    init();
}

SWGSettlement::~SWGSettlement() {
    this->cleanup();
}

void
SWGSettlement::init() {
    timestamp = NULL;
    m_timestamp_isSet = false;
    symbol = new QString("");
    m_symbol_isSet = false;
    settlement_type = new QString("");
    m_settlement_type_isSet = false;
    settled_price = 0.0;
    m_settled_price_isSet = false;
    option_strike_price = 0.0;
    m_option_strike_price_isSet = false;
    option_underlying_price = 0.0;
    m_option_underlying_price_isSet = false;
    bankrupt = 0.0;
    m_bankrupt_isSet = false;
    tax_base = 0.0;
    m_tax_base_isSet = false;
    tax_rate = 0.0;
    m_tax_rate_isSet = false;
}

void
SWGSettlement::cleanup() {
    if(timestamp != nullptr) { 
        delete timestamp;
    }
    if(symbol != nullptr) { 
        delete symbol;
    }
    if(settlement_type != nullptr) { 
        delete settlement_type;
    }



    if(bankrupt != nullptr) { 
        delete bankrupt;
    }
    if(tax_base != nullptr) { 
        delete tax_base;
    }

}

SWGSettlement*
SWGSettlement::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSettlement::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&settlement_type, pJson["settlementType"], "QString", "QString");
    
    ::Swagger::setValue(&settled_price, pJson["settledPrice"], "double", "");
    
    ::Swagger::setValue(&option_strike_price, pJson["optionStrikePrice"], "double", "");
    
    ::Swagger::setValue(&option_underlying_price, pJson["optionUnderlyingPrice"], "double", "");
    
    ::Swagger::setValue(&bankrupt, pJson["bankrupt"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&tax_base, pJson["taxBase"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&tax_rate, pJson["taxRate"], "double", "");
    
}

QString
SWGSettlement::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGSettlement::asJsonObject() {
    QJsonObject obj;
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(settlement_type != nullptr && *settlement_type != QString("")){
        toJsonValue(QString("settlementType"), settlement_type, obj, QString("QString"));
    }
    if(m_settled_price_isSet){
        obj.insert("settledPrice", QJsonValue(settled_price));
    }
    if(m_option_strike_price_isSet){
        obj.insert("optionStrikePrice", QJsonValue(option_strike_price));
    }
    if(m_option_underlying_price_isSet){
        obj.insert("optionUnderlyingPrice", QJsonValue(option_underlying_price));
    }
    if((bankrupt != nullptr) && (bankrupt->isSet())){
        toJsonValue(QString("bankrupt"), bankrupt, obj, QString("SWGNumber"));
    }
    if((tax_base != nullptr) && (tax_base->isSet())){
        toJsonValue(QString("taxBase"), tax_base, obj, QString("SWGNumber"));
    }
    if(m_tax_rate_isSet){
        obj.insert("taxRate", QJsonValue(tax_rate));
    }

    return obj;
}

QDateTime*
SWGSettlement::getTimestamp() {
    return timestamp;
}
void
SWGSettlement::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

QString*
SWGSettlement::getSymbol() {
    return symbol;
}
void
SWGSettlement::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

QString*
SWGSettlement::getSettlementType() {
    return settlement_type;
}
void
SWGSettlement::setSettlementType(QString* settlement_type) {
    this->settlement_type = settlement_type;
    this->m_settlement_type_isSet = true;
}

double
SWGSettlement::getSettledPrice() {
    return settled_price;
}
void
SWGSettlement::setSettledPrice(double settled_price) {
    this->settled_price = settled_price;
    this->m_settled_price_isSet = true;
}

double
SWGSettlement::getOptionStrikePrice() {
    return option_strike_price;
}
void
SWGSettlement::setOptionStrikePrice(double option_strike_price) {
    this->option_strike_price = option_strike_price;
    this->m_option_strike_price_isSet = true;
}

double
SWGSettlement::getOptionUnderlyingPrice() {
    return option_underlying_price;
}
void
SWGSettlement::setOptionUnderlyingPrice(double option_underlying_price) {
    this->option_underlying_price = option_underlying_price;
    this->m_option_underlying_price_isSet = true;
}

SWGNumber*
SWGSettlement::getBankrupt() {
    return bankrupt;
}
void
SWGSettlement::setBankrupt(SWGNumber* bankrupt) {
    this->bankrupt = bankrupt;
    this->m_bankrupt_isSet = true;
}

SWGNumber*
SWGSettlement::getTaxBase() {
    return tax_base;
}
void
SWGSettlement::setTaxBase(SWGNumber* tax_base) {
    this->tax_base = tax_base;
    this->m_tax_base_isSet = true;
}

double
SWGSettlement::getTaxRate() {
    return tax_rate;
}
void
SWGSettlement::setTaxRate(double tax_rate) {
    this->tax_rate = tax_rate;
    this->m_tax_rate_isSet = true;
}


bool
SWGSettlement::isSet(){
    bool isObjectUpdated = false;
    do{
        
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(settlement_type != nullptr && *settlement_type != QString("")){ isObjectUpdated = true; break;}
        if(m_settled_price_isSet){ isObjectUpdated = true; break;}
        if(m_option_strike_price_isSet){ isObjectUpdated = true; break;}
        if(m_option_underlying_price_isSet){ isObjectUpdated = true; break;}
        if(bankrupt != nullptr && bankrupt->isSet()){ isObjectUpdated = true; break;}
        if(tax_base != nullptr && tax_base->isSet()){ isObjectUpdated = true; break;}
        if(m_tax_rate_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

