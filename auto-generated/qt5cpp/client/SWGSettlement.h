/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGSettlement.h
 *
 * Historical Settlement Data
 */

#ifndef SWGSettlement_H_
#define SWGSettlement_H_

#include <QJsonObject>


#include "SWGNumber.h"
#include <QDateTime>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGSettlement: public SWGObject {
public:
    SWGSettlement();
    SWGSettlement(QString json);
    ~SWGSettlement();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGSettlement* fromJson(QString jsonString) override;

    QDateTime* getTimestamp();
    void setTimestamp(QDateTime* timestamp);

    QString* getSymbol();
    void setSymbol(QString* symbol);

    QString* getSettlementType();
    void setSettlementType(QString* settlement_type);

    double getSettledPrice();
    void setSettledPrice(double settled_price);

    double getOptionStrikePrice();
    void setOptionStrikePrice(double option_strike_price);

    double getOptionUnderlyingPrice();
    void setOptionUnderlyingPrice(double option_underlying_price);

    SWGNumber* getBankrupt();
    void setBankrupt(SWGNumber* bankrupt);

    SWGNumber* getTaxBase();
    void setTaxBase(SWGNumber* tax_base);

    double getTaxRate();
    void setTaxRate(double tax_rate);


    virtual bool isSet() override;

private:
    QDateTime* timestamp;
    bool m_timestamp_isSet;

    QString* symbol;
    bool m_symbol_isSet;

    QString* settlement_type;
    bool m_settlement_type_isSet;

    double settled_price;
    bool m_settled_price_isSet;

    double option_strike_price;
    bool m_option_strike_price_isSet;

    double option_underlying_price;
    bool m_option_underlying_price_isSet;

    SWGNumber* bankrupt;
    bool m_bankrupt_isSet;

    SWGNumber* tax_base;
    bool m_tax_base_isSet;

    double tax_rate;
    bool m_tax_rate_isSet;

};

}

#endif /* SWGSettlement_H_ */
