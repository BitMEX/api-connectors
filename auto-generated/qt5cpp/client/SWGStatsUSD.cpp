/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGStatsUSD.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGStatsUSD::SWGStatsUSD(QString json) {
    init();
    this->fromJson(json);
}

SWGStatsUSD::SWGStatsUSD() {
    init();
}

SWGStatsUSD::~SWGStatsUSD() {
    this->cleanup();
}

void
SWGStatsUSD::init() {
    root_symbol = new QString("");
    m_root_symbol_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    turnover24h = 0.0;
    m_turnover24h_isSet = false;
    turnover30d = 0.0;
    m_turnover30d_isSet = false;
    turnover365d = 0.0;
    m_turnover365d_isSet = false;
    turnover = 0.0;
    m_turnover_isSet = false;
}

void
SWGStatsUSD::cleanup() {
    if(root_symbol != nullptr) { 
        delete root_symbol;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(turnover24h != nullptr) { 
        delete turnover24h;
    }
    if(turnover30d != nullptr) { 
        delete turnover30d;
    }
    if(turnover365d != nullptr) { 
        delete turnover365d;
    }
    if(turnover != nullptr) { 
        delete turnover;
    }
}

SWGStatsUSD*
SWGStatsUSD::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGStatsUSD::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&root_symbol, pJson["rootSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&turnover24h, pJson["turnover24h"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&turnover30d, pJson["turnover30d"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&turnover365d, pJson["turnover365d"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&turnover, pJson["turnover"], "SWGNumber", "SWGNumber");
    
}

QString
SWGStatsUSD::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGStatsUSD::asJsonObject() {
    QJsonObject obj;
    if(root_symbol != nullptr && *root_symbol != QString("")){
        toJsonValue(QString("rootSymbol"), root_symbol, obj, QString("QString"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if((turnover24h != nullptr) && (turnover24h->isSet())){
        toJsonValue(QString("turnover24h"), turnover24h, obj, QString("SWGNumber"));
    }
    if((turnover30d != nullptr) && (turnover30d->isSet())){
        toJsonValue(QString("turnover30d"), turnover30d, obj, QString("SWGNumber"));
    }
    if((turnover365d != nullptr) && (turnover365d->isSet())){
        toJsonValue(QString("turnover365d"), turnover365d, obj, QString("SWGNumber"));
    }
    if((turnover != nullptr) && (turnover->isSet())){
        toJsonValue(QString("turnover"), turnover, obj, QString("SWGNumber"));
    }

    return obj;
}

QString*
SWGStatsUSD::getRootSymbol() {
    return root_symbol;
}
void
SWGStatsUSD::setRootSymbol(QString* root_symbol) {
    this->root_symbol = root_symbol;
    this->m_root_symbol_isSet = true;
}

QString*
SWGStatsUSD::getCurrency() {
    return currency;
}
void
SWGStatsUSD::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

SWGNumber*
SWGStatsUSD::getTurnover24h() {
    return turnover24h;
}
void
SWGStatsUSD::setTurnover24h(SWGNumber* turnover24h) {
    this->turnover24h = turnover24h;
    this->m_turnover24h_isSet = true;
}

SWGNumber*
SWGStatsUSD::getTurnover30d() {
    return turnover30d;
}
void
SWGStatsUSD::setTurnover30d(SWGNumber* turnover30d) {
    this->turnover30d = turnover30d;
    this->m_turnover30d_isSet = true;
}

SWGNumber*
SWGStatsUSD::getTurnover365d() {
    return turnover365d;
}
void
SWGStatsUSD::setTurnover365d(SWGNumber* turnover365d) {
    this->turnover365d = turnover365d;
    this->m_turnover365d_isSet = true;
}

SWGNumber*
SWGStatsUSD::getTurnover() {
    return turnover;
}
void
SWGStatsUSD::setTurnover(SWGNumber* turnover) {
    this->turnover = turnover;
    this->m_turnover_isSet = true;
}


bool
SWGStatsUSD::isSet(){
    bool isObjectUpdated = false;
    do{
        if(root_symbol != nullptr && *root_symbol != QString("")){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(turnover24h != nullptr && turnover24h->isSet()){ isObjectUpdated = true; break;}
        if(turnover30d != nullptr && turnover30d->isSet()){ isObjectUpdated = true; break;}
        if(turnover365d != nullptr && turnover365d->isSet()){ isObjectUpdated = true; break;}
        if(turnover != nullptr && turnover->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

