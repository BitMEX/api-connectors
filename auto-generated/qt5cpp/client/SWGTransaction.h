/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGTransaction.h
 *
 * 
 */

#ifndef SWGTransaction_H_
#define SWGTransaction_H_

#include <QJsonObject>


#include "SWGNumber.h"
#include <QDateTime>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGTransaction: public SWGObject {
public:
    SWGTransaction();
    SWGTransaction(QString json);
    ~SWGTransaction();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGTransaction* fromJson(QString jsonString) override;

    QString* getTransactId();
    void setTransactId(QString* transact_id);

    SWGNumber* getAccount();
    void setAccount(SWGNumber* account);

    QString* getCurrency();
    void setCurrency(QString* currency);

    QString* getTransactType();
    void setTransactType(QString* transact_type);

    SWGNumber* getAmount();
    void setAmount(SWGNumber* amount);

    SWGNumber* getFee();
    void setFee(SWGNumber* fee);

    QString* getTransactStatus();
    void setTransactStatus(QString* transact_status);

    QString* getAddress();
    void setAddress(QString* address);

    QString* getTx();
    void setTx(QString* tx);

    QString* getText();
    void setText(QString* text);

    QDateTime* getTransactTime();
    void setTransactTime(QDateTime* transact_time);

    QDateTime* getTimestamp();
    void setTimestamp(QDateTime* timestamp);


    virtual bool isSet() override;

private:
    QString* transact_id;
    bool m_transact_id_isSet;

    SWGNumber* account;
    bool m_account_isSet;

    QString* currency;
    bool m_currency_isSet;

    QString* transact_type;
    bool m_transact_type_isSet;

    SWGNumber* amount;
    bool m_amount_isSet;

    SWGNumber* fee;
    bool m_fee_isSet;

    QString* transact_status;
    bool m_transact_status_isSet;

    QString* address;
    bool m_address_isSet;

    QString* tx;
    bool m_tx_isSet;

    QString* text;
    bool m_text_isSet;

    QDateTime* transact_time;
    bool m_transact_time_isSet;

    QDateTime* timestamp;
    bool m_timestamp_isSet;

};

}

#endif /* SWGTransaction_H_ */
