/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUser.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGUser::SWGUser(QString json) {
    init();
    this->fromJson(json);
}

SWGUser::SWGUser() {
    init();
}

SWGUser::~SWGUser() {
    this->cleanup();
}

void
SWGUser::init() {
    id = 0.0;
    m_id_isSet = false;
    owner_id = 0.0;
    m_owner_id_isSet = false;
    firstname = new QString("");
    m_firstname_isSet = false;
    lastname = new QString("");
    m_lastname_isSet = false;
    username = new QString("");
    m_username_isSet = false;
    email = new QString("");
    m_email_isSet = false;
    phone = new QString("");
    m_phone_isSet = false;
    created = NULL;
    m_created_isSet = false;
    last_updated = NULL;
    m_last_updated_isSet = false;
    preferences = new SWGUserPreferences();
    m_preferences_isSet = false;
    tfa_enabled = new QString("");
    m_tfa_enabled_isSet = false;
    affiliate_id = new QString("");
    m_affiliate_id_isSet = false;
    pgp_pub_key = new QString("");
    m_pgp_pub_key_isSet = false;
    country = new QString("");
    m_country_isSet = false;
    geoip_country = new QString("");
    m_geoip_country_isSet = false;
    geoip_region = new QString("");
    m_geoip_region_isSet = false;
    typ = new QString("");
    m_typ_isSet = false;
}

void
SWGUser::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(owner_id != nullptr) { 
        delete owner_id;
    }
    if(firstname != nullptr) { 
        delete firstname;
    }
    if(lastname != nullptr) { 
        delete lastname;
    }
    if(username != nullptr) { 
        delete username;
    }
    if(email != nullptr) { 
        delete email;
    }
    if(phone != nullptr) { 
        delete phone;
    }
    if(created != nullptr) { 
        delete created;
    }
    if(last_updated != nullptr) { 
        delete last_updated;
    }
    if(preferences != nullptr) { 
        delete preferences;
    }
    if(tfa_enabled != nullptr) { 
        delete tfa_enabled;
    }
    if(affiliate_id != nullptr) { 
        delete affiliate_id;
    }
    if(pgp_pub_key != nullptr) { 
        delete pgp_pub_key;
    }
    if(country != nullptr) { 
        delete country;
    }
    if(geoip_country != nullptr) { 
        delete geoip_country;
    }
    if(geoip_region != nullptr) { 
        delete geoip_region;
    }
    if(typ != nullptr) { 
        delete typ;
    }
}

SWGUser*
SWGUser::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUser::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&owner_id, pJson["ownerId"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&firstname, pJson["firstname"], "QString", "QString");
    
    ::Swagger::setValue(&lastname, pJson["lastname"], "QString", "QString");
    
    ::Swagger::setValue(&username, pJson["username"], "QString", "QString");
    
    ::Swagger::setValue(&email, pJson["email"], "QString", "QString");
    
    ::Swagger::setValue(&phone, pJson["phone"], "QString", "QString");
    
    ::Swagger::setValue(&created, pJson["created"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&last_updated, pJson["lastUpdated"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&preferences, pJson["preferences"], "SWGUserPreferences", "SWGUserPreferences");
    
    ::Swagger::setValue(&tfa_enabled, pJson["TFAEnabled"], "QString", "QString");
    
    ::Swagger::setValue(&affiliate_id, pJson["affiliateID"], "QString", "QString");
    
    ::Swagger::setValue(&pgp_pub_key, pJson["pgpPubKey"], "QString", "QString");
    
    ::Swagger::setValue(&country, pJson["country"], "QString", "QString");
    
    ::Swagger::setValue(&geoip_country, pJson["geoipCountry"], "QString", "QString");
    
    ::Swagger::setValue(&geoip_region, pJson["geoipRegion"], "QString", "QString");
    
    ::Swagger::setValue(&typ, pJson["typ"], "QString", "QString");
    
}

QString
SWGUser::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGUser::asJsonObject() {
    QJsonObject obj;
    if((id != nullptr) && (id->isSet())){
        toJsonValue(QString("id"), id, obj, QString("SWGNumber"));
    }
    if((owner_id != nullptr) && (owner_id->isSet())){
        toJsonValue(QString("ownerId"), owner_id, obj, QString("SWGNumber"));
    }
    if(firstname != nullptr && *firstname != QString("")){
        toJsonValue(QString("firstname"), firstname, obj, QString("QString"));
    }
    if(lastname != nullptr && *lastname != QString("")){
        toJsonValue(QString("lastname"), lastname, obj, QString("QString"));
    }
    if(username != nullptr && *username != QString("")){
        toJsonValue(QString("username"), username, obj, QString("QString"));
    }
    if(email != nullptr && *email != QString("")){
        toJsonValue(QString("email"), email, obj, QString("QString"));
    }
    if(phone != nullptr && *phone != QString("")){
        toJsonValue(QString("phone"), phone, obj, QString("QString"));
    }
    if(created != nullptr) { 
        toJsonValue(QString("created"), created, obj, QString("QDateTime"));
    }
    if(last_updated != nullptr) { 
        toJsonValue(QString("lastUpdated"), last_updated, obj, QString("QDateTime"));
    }
    if((preferences != nullptr) && (preferences->isSet())){
        toJsonValue(QString("preferences"), preferences, obj, QString("SWGUserPreferences"));
    }
    if(tfa_enabled != nullptr && *tfa_enabled != QString("")){
        toJsonValue(QString("TFAEnabled"), tfa_enabled, obj, QString("QString"));
    }
    if(affiliate_id != nullptr && *affiliate_id != QString("")){
        toJsonValue(QString("affiliateID"), affiliate_id, obj, QString("QString"));
    }
    if(pgp_pub_key != nullptr && *pgp_pub_key != QString("")){
        toJsonValue(QString("pgpPubKey"), pgp_pub_key, obj, QString("QString"));
    }
    if(country != nullptr && *country != QString("")){
        toJsonValue(QString("country"), country, obj, QString("QString"));
    }
    if(geoip_country != nullptr && *geoip_country != QString("")){
        toJsonValue(QString("geoipCountry"), geoip_country, obj, QString("QString"));
    }
    if(geoip_region != nullptr && *geoip_region != QString("")){
        toJsonValue(QString("geoipRegion"), geoip_region, obj, QString("QString"));
    }
    if(typ != nullptr && *typ != QString("")){
        toJsonValue(QString("typ"), typ, obj, QString("QString"));
    }

    return obj;
}

SWGNumber*
SWGUser::getId() {
    return id;
}
void
SWGUser::setId(SWGNumber* id) {
    this->id = id;
    this->m_id_isSet = true;
}

SWGNumber*
SWGUser::getOwnerId() {
    return owner_id;
}
void
SWGUser::setOwnerId(SWGNumber* owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

QString*
SWGUser::getFirstname() {
    return firstname;
}
void
SWGUser::setFirstname(QString* firstname) {
    this->firstname = firstname;
    this->m_firstname_isSet = true;
}

QString*
SWGUser::getLastname() {
    return lastname;
}
void
SWGUser::setLastname(QString* lastname) {
    this->lastname = lastname;
    this->m_lastname_isSet = true;
}

QString*
SWGUser::getUsername() {
    return username;
}
void
SWGUser::setUsername(QString* username) {
    this->username = username;
    this->m_username_isSet = true;
}

QString*
SWGUser::getEmail() {
    return email;
}
void
SWGUser::setEmail(QString* email) {
    this->email = email;
    this->m_email_isSet = true;
}

QString*
SWGUser::getPhone() {
    return phone;
}
void
SWGUser::setPhone(QString* phone) {
    this->phone = phone;
    this->m_phone_isSet = true;
}

QDateTime*
SWGUser::getCreated() {
    return created;
}
void
SWGUser::setCreated(QDateTime* created) {
    this->created = created;
    this->m_created_isSet = true;
}

QDateTime*
SWGUser::getLastUpdated() {
    return last_updated;
}
void
SWGUser::setLastUpdated(QDateTime* last_updated) {
    this->last_updated = last_updated;
    this->m_last_updated_isSet = true;
}

SWGUserPreferences*
SWGUser::getPreferences() {
    return preferences;
}
void
SWGUser::setPreferences(SWGUserPreferences* preferences) {
    this->preferences = preferences;
    this->m_preferences_isSet = true;
}

QString*
SWGUser::getTfaEnabled() {
    return tfa_enabled;
}
void
SWGUser::setTfaEnabled(QString* tfa_enabled) {
    this->tfa_enabled = tfa_enabled;
    this->m_tfa_enabled_isSet = true;
}

QString*
SWGUser::getAffiliateId() {
    return affiliate_id;
}
void
SWGUser::setAffiliateId(QString* affiliate_id) {
    this->affiliate_id = affiliate_id;
    this->m_affiliate_id_isSet = true;
}

QString*
SWGUser::getPgpPubKey() {
    return pgp_pub_key;
}
void
SWGUser::setPgpPubKey(QString* pgp_pub_key) {
    this->pgp_pub_key = pgp_pub_key;
    this->m_pgp_pub_key_isSet = true;
}

QString*
SWGUser::getCountry() {
    return country;
}
void
SWGUser::setCountry(QString* country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString*
SWGUser::getGeoipCountry() {
    return geoip_country;
}
void
SWGUser::setGeoipCountry(QString* geoip_country) {
    this->geoip_country = geoip_country;
    this->m_geoip_country_isSet = true;
}

QString*
SWGUser::getGeoipRegion() {
    return geoip_region;
}
void
SWGUser::setGeoipRegion(QString* geoip_region) {
    this->geoip_region = geoip_region;
    this->m_geoip_region_isSet = true;
}

QString*
SWGUser::getTyp() {
    return typ;
}
void
SWGUser::setTyp(QString* typ) {
    this->typ = typ;
    this->m_typ_isSet = true;
}


bool
SWGUser::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && id->isSet()){ isObjectUpdated = true; break;}
        if(owner_id != nullptr && owner_id->isSet()){ isObjectUpdated = true; break;}
        if(firstname != nullptr && *firstname != QString("")){ isObjectUpdated = true; break;}
        if(lastname != nullptr && *lastname != QString("")){ isObjectUpdated = true; break;}
        if(username != nullptr && *username != QString("")){ isObjectUpdated = true; break;}
        if(email != nullptr && *email != QString("")){ isObjectUpdated = true; break;}
        if(phone != nullptr && *phone != QString("")){ isObjectUpdated = true; break;}
        
        
        if(preferences != nullptr && preferences->isSet()){ isObjectUpdated = true; break;}
        if(tfa_enabled != nullptr && *tfa_enabled != QString("")){ isObjectUpdated = true; break;}
        if(affiliate_id != nullptr && *affiliate_id != QString("")){ isObjectUpdated = true; break;}
        if(pgp_pub_key != nullptr && *pgp_pub_key != QString("")){ isObjectUpdated = true; break;}
        if(country != nullptr && *country != QString("")){ isObjectUpdated = true; break;}
        if(geoip_country != nullptr && *geoip_country != QString("")){ isObjectUpdated = true; break;}
        if(geoip_region != nullptr && *geoip_region != QString("")){ isObjectUpdated = true; break;}
        if(typ != nullptr && *typ != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

