/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUserApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGUserApi::SWGUserApi() {}

SWGUserApi::~SWGUserApi() {}

SWGUserApi::SWGUserApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGUserApi::user_cancelWithdrawal(QString* token) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/cancelWithdrawal");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (token != nullptr) {
        input.add_var("token", *token);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_cancelWithdrawalCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_cancelWithdrawalCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGTransaction* output = static_cast<SWGTransaction*>(create(json, QString("SWGTransaction")));
    auto wrapper = new SWGQObjectWrapper<SWGTransaction*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_cancelWithdrawalSignal(output);
    } else {
        emit user_cancelWithdrawalSignalE(output, error_type, error_str);
        emit user_cancelWithdrawalSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_checkReferralCode(QString* referral_code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/checkReferralCode");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("referralCode"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(referral_code)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_checkReferralCodeCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_checkReferralCodeCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    double output;  // TODO add primitive output support
    
    
    
    
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_checkReferralCodeSignal(output);
    } else {
        emit user_checkReferralCodeSignalE(output, error_type, error_str);
        emit user_checkReferralCodeSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_confirm(QString* token) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/confirmEmail");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (token != nullptr) {
        input.add_var("token", *token);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_confirmCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_confirmCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGAccessToken* output = static_cast<SWGAccessToken*>(create(json, QString("SWGAccessToken")));
    auto wrapper = new SWGQObjectWrapper<SWGAccessToken*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_confirmSignal(output);
    } else {
        emit user_confirmSignalE(output, error_type, error_str);
        emit user_confirmSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_confirmEnableTFA(QString* token, QString* type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/confirmEnableTFA");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (type != nullptr) {
        input.add_var("type", *type);
    }
    if (token != nullptr) {
        input.add_var("token", *token);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_confirmEnableTFACallback);

    worker->execute(&input);
}

void
SWGUserApi::user_confirmEnableTFACallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    bool output;  // TODO add primitive output support
    
    
    
    
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_confirmEnableTFASignal(output);
    } else {
        emit user_confirmEnableTFASignalE(output, error_type, error_str);
        emit user_confirmEnableTFASignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_confirmWithdrawal(QString* token) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/confirmWithdrawal");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (token != nullptr) {
        input.add_var("token", *token);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_confirmWithdrawalCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_confirmWithdrawalCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGTransaction* output = static_cast<SWGTransaction*>(create(json, QString("SWGTransaction")));
    auto wrapper = new SWGQObjectWrapper<SWGTransaction*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_confirmWithdrawalSignal(output);
    } else {
        emit user_confirmWithdrawalSignalE(output, error_type, error_str);
        emit user_confirmWithdrawalSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_disableTFA(QString* token, QString* type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/disableTFA");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (type != nullptr) {
        input.add_var("type", *type);
    }
    if (token != nullptr) {
        input.add_var("token", *token);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_disableTFACallback);

    worker->execute(&input);
}

void
SWGUserApi::user_disableTFACallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    bool output;  // TODO add primitive output support
    
    
    
    
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_disableTFASignal(output);
    } else {
        emit user_disableTFASignalE(output, error_type, error_str);
        emit user_disableTFASignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_get() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGUser* output = static_cast<SWGUser*>(create(json, QString("SWGUser")));
    auto wrapper = new SWGQObjectWrapper<SWGUser*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getSignal(output);
    } else {
        emit user_getSignalE(output, error_type, error_str);
        emit user_getSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_getAffiliateStatus() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/affiliateStatus");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getAffiliateStatusCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getAffiliateStatusCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGAffiliate* output = static_cast<SWGAffiliate*>(create(json, QString("SWGAffiliate")));
    auto wrapper = new SWGQObjectWrapper<SWGAffiliate*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getAffiliateStatusSignal(output);
    } else {
        emit user_getAffiliateStatusSignalE(output, error_type, error_str);
        emit user_getAffiliateStatusSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_getCommission() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/commission");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getCommissionCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getCommissionCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGUserCommission*>* output = new QList<SWGUserCommission*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGUserCommission*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGUserCommission* o = new SWGUserCommission();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGUserCommission*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getCommissionSignal(output);
    } else {
        emit user_getCommissionSignalE(output, error_type, error_str);
        emit user_getCommissionSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_getDepositAddress(QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/depositAddress");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getDepositAddressCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getDepositAddressCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getDepositAddressSignal(output);
    } else {
        emit user_getDepositAddressSignalE(output, error_type, error_str);
        emit user_getDepositAddressSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_getMargin(QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/margin");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getMarginCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getMarginCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGMargin* output = static_cast<SWGMargin*>(create(json, QString("SWGMargin")));
    auto wrapper = new SWGQObjectWrapper<SWGMargin*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getMarginSignal(output);
    } else {
        emit user_getMarginSignalE(output, error_type, error_str);
        emit user_getMarginSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_getWallet(QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/wallet");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getWalletCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getWalletCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGWallet* output = static_cast<SWGWallet*>(create(json, QString("SWGWallet")));
    auto wrapper = new SWGQObjectWrapper<SWGWallet*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getWalletSignal(output);
    } else {
        emit user_getWalletSignalE(output, error_type, error_str);
        emit user_getWalletSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_getWalletHistory(QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/walletHistory");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getWalletHistoryCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getWalletHistoryCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGTransaction*>* output = new QList<SWGTransaction*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGTransaction*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGTransaction* o = new SWGTransaction();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGTransaction*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getWalletHistorySignal(output);
    } else {
        emit user_getWalletHistorySignalE(output, error_type, error_str);
        emit user_getWalletHistorySignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_getWalletSummary(QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/walletSummary");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_getWalletSummaryCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_getWalletSummaryCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGTransaction*>* output = new QList<SWGTransaction*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGTransaction*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGTransaction* o = new SWGTransaction();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGTransaction*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_getWalletSummarySignal(output);
    } else {
        emit user_getWalletSummarySignalE(output, error_type, error_str);
        emit user_getWalletSummarySignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_logout() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/logout");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_logoutCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_logoutCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_logoutSignal();
    } else {
        emit user_logoutSignalE(error_type, error_str);
        emit user_logoutSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_logoutAll() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/logoutAll");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_logoutAllCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_logoutAllCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    double output;  // TODO add primitive output support
    
    
    
    
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_logoutAllSignal(output);
    } else {
        emit user_logoutAllSignalE(output, error_type, error_str);
        emit user_logoutAllSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_minWithdrawalFee(QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/minWithdrawalFee");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_minWithdrawalFeeCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_minWithdrawalFeeCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    auto wrapper = new SWGQObjectWrapper<SWGObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_minWithdrawalFeeSignal(output);
    } else {
        emit user_minWithdrawalFeeSignalE(output, error_type, error_str);
        emit user_minWithdrawalFeeSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_requestEnableTFA(QString* type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/requestEnableTFA");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (type != nullptr) {
        input.add_var("type", *type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_requestEnableTFACallback);

    worker->execute(&input);
}

void
SWGUserApi::user_requestEnableTFACallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    bool output;  // TODO add primitive output support
    
    
    
    
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_requestEnableTFASignal(output);
    } else {
        emit user_requestEnableTFASignalE(output, error_type, error_str);
        emit user_requestEnableTFASignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_requestWithdrawal(QString* currency, SWGNumber* amount, QString* address, QString* otp_token, double fee) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/requestWithdrawal");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (otp_token != nullptr) {
        input.add_var("otpToken", *otp_token);
    }
    if (currency != nullptr) {
        input.add_var("currency", *currency);
    }
    if (amount != nullptr) {
        input.add_var("amount", *amount);
    }
    if (address != nullptr) {
        input.add_var("address", *address);
    }
    if (fee != nullptr) {
        input.add_var("fee", *fee);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_requestWithdrawalCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_requestWithdrawalCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGTransaction* output = static_cast<SWGTransaction*>(create(json, QString("SWGTransaction")));
    auto wrapper = new SWGQObjectWrapper<SWGTransaction*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_requestWithdrawalSignal(output);
    } else {
        emit user_requestWithdrawalSignalE(output, error_type, error_str);
        emit user_requestWithdrawalSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_savePreferences(QString* prefs, bool overwrite) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/preferences");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (prefs != nullptr) {
        input.add_var("prefs", *prefs);
    }
    if (overwrite != nullptr) {
        input.add_var("overwrite", *overwrite);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_savePreferencesCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_savePreferencesCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGUser* output = static_cast<SWGUser*>(create(json, QString("SWGUser")));
    auto wrapper = new SWGQObjectWrapper<SWGUser*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_savePreferencesSignal(output);
    } else {
        emit user_savePreferencesSignalE(output, error_type, error_str);
        emit user_savePreferencesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::user_update(QString* firstname, QString* lastname, QString* old_password, QString* new_password, QString* new_password_confirm, QString* username, QString* country, QString* pgp_pub_key) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");

    if (firstname != nullptr) {
        input.add_var("firstname", *firstname);
    }
    if (lastname != nullptr) {
        input.add_var("lastname", *lastname);
    }
    if (old_password != nullptr) {
        input.add_var("oldPassword", *old_password);
    }
    if (new_password != nullptr) {
        input.add_var("newPassword", *new_password);
    }
    if (new_password_confirm != nullptr) {
        input.add_var("newPasswordConfirm", *new_password_confirm);
    }
    if (username != nullptr) {
        input.add_var("username", *username);
    }
    if (country != nullptr) {
        input.add_var("country", *country);
    }
    if (pgp_pub_key != nullptr) {
        input.add_var("pgpPubKey", *pgp_pub_key);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::user_updateCallback);

    worker->execute(&input);
}

void
SWGUserApi::user_updateCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGUser* output = static_cast<SWGUser*>(create(json, QString("SWGUser")));
    auto wrapper = new SWGQObjectWrapper<SWGUser*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit user_updateSignal(output);
    } else {
        emit user_updateSignalE(output, error_type, error_str);
        emit user_updateSignalEFull(worker, error_type, error_str);
    }
}


}
