/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUserCommission.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGUserCommission::SWGUserCommission(QString json) {
    init();
    this->fromJson(json);
}

SWGUserCommission::SWGUserCommission() {
    init();
}

SWGUserCommission::~SWGUserCommission() {
    this->cleanup();
}

void
SWGUserCommission::init() {
    maker_fee = 0.0;
    m_maker_fee_isSet = false;
    taker_fee = 0.0;
    m_taker_fee_isSet = false;
    settlement_fee = 0.0;
    m_settlement_fee_isSet = false;
    max_fee = 0.0;
    m_max_fee_isSet = false;
}

void
SWGUserCommission::cleanup() {




}

SWGUserCommission*
SWGUserCommission::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUserCommission::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&maker_fee, pJson["makerFee"], "double", "");
    
    ::Swagger::setValue(&taker_fee, pJson["takerFee"], "double", "");
    
    ::Swagger::setValue(&settlement_fee, pJson["settlementFee"], "double", "");
    
    ::Swagger::setValue(&max_fee, pJson["maxFee"], "double", "");
    
}

QString
SWGUserCommission::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGUserCommission::asJsonObject() {
    QJsonObject obj;
    if(m_maker_fee_isSet){
        obj.insert("makerFee", QJsonValue(maker_fee));
    }
    if(m_taker_fee_isSet){
        obj.insert("takerFee", QJsonValue(taker_fee));
    }
    if(m_settlement_fee_isSet){
        obj.insert("settlementFee", QJsonValue(settlement_fee));
    }
    if(m_max_fee_isSet){
        obj.insert("maxFee", QJsonValue(max_fee));
    }

    return obj;
}

double
SWGUserCommission::getMakerFee() {
    return maker_fee;
}
void
SWGUserCommission::setMakerFee(double maker_fee) {
    this->maker_fee = maker_fee;
    this->m_maker_fee_isSet = true;
}

double
SWGUserCommission::getTakerFee() {
    return taker_fee;
}
void
SWGUserCommission::setTakerFee(double taker_fee) {
    this->taker_fee = taker_fee;
    this->m_taker_fee_isSet = true;
}

double
SWGUserCommission::getSettlementFee() {
    return settlement_fee;
}
void
SWGUserCommission::setSettlementFee(double settlement_fee) {
    this->settlement_fee = settlement_fee;
    this->m_settlement_fee_isSet = true;
}

double
SWGUserCommission::getMaxFee() {
    return max_fee;
}
void
SWGUserCommission::setMaxFee(double max_fee) {
    this->max_fee = max_fee;
    this->m_max_fee_isSet = true;
}


bool
SWGUserCommission::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_maker_fee_isSet){ isObjectUpdated = true; break;}
        if(m_taker_fee_isSet){ isObjectUpdated = true; break;}
        if(m_settlement_fee_isSet){ isObjectUpdated = true; break;}
        if(m_max_fee_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

