=begin
#BitMEX API

### REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class APIKeyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Disable an API Key.
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [APIKey]
    def a_pi_key_disable(api_key_id, opts = {})
      data, _status_code, _headers = a_pi_key_disable_with_http_info(api_key_id, opts)
      data
    end

    # Disable an API Key.
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKey, Fixnum, Hash)>] APIKey data, response status code and response headers
    def a_pi_key_disable_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeyApi.a_pi_key_disable ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling APIKeyApi.a_pi_key_disable"
      end
      # resource path
      local_var_path = '/apiKey/disable'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['apiKeyID'] = api_key_id

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeyApi#a_pi_key_disable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable an API Key.
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [APIKey]
    def a_pi_key_enable(api_key_id, opts = {})
      data, _status_code, _headers = a_pi_key_enable_with_http_info(api_key_id, opts)
      data
    end

    # Enable an API Key.
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKey, Fixnum, Hash)>] APIKey data, response status code and response headers
    def a_pi_key_enable_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeyApi.a_pi_key_enable ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling APIKeyApi.a_pi_key_enable"
      end
      # resource path
      local_var_path = '/apiKey/enable'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['apiKeyID'] = api_key_id

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeyApi#a_pi_key_enable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get your API Keys.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :reverse If true, will sort results newest first. (default to false)
    # @return [Array<APIKey>]
    def a_pi_key_get(opts = {})
      data, _status_code, _headers = a_pi_key_get_with_http_info(opts)
      data
    end

    # Get your API Keys.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :reverse If true, will sort results newest first.
    # @return [Array<(Array<APIKey>, Fixnum, Hash)>] Array<APIKey> data, response status code and response headers
    def a_pi_key_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeyApi.a_pi_key_get ...'
      end
      # resource path
      local_var_path = '/apiKey'

      # query parameters
      query_params = {}
      query_params[:'reverse'] = opts[:'reverse'] if !opts[:'reverse'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<APIKey>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeyApi#a_pi_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new API Key.
    # API Keys can only be created via the frontend.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Key name. This name is for reference only.
    # @option opts [String] :cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
    # @option opts [String] :permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;orderCancel\&quot;, \&quot;withdraw\&quot;].
    # @option opts [BOOLEAN] :enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (default to false)
    # @option opts [String] :token OTP Token (YubiKey, Google Authenticator)
    # @return [APIKey]
    def a_pi_key_new(opts = {})
      data, _status_code, _headers = a_pi_key_new_with_http_info(opts)
      data
    end

    # Create a new API Key.
    # API Keys can only be created via the frontend.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Key name. This name is for reference only.
    # @option opts [String] :cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
    # @option opts [String] :permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;orderCancel\&quot;, \&quot;withdraw\&quot;].
    # @option opts [BOOLEAN] :enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.
    # @option opts [String] :token OTP Token (YubiKey, Google Authenticator)
    # @return [Array<(APIKey, Fixnum, Hash)>] APIKey data, response status code and response headers
    def a_pi_key_new_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeyApi.a_pi_key_new ...'
      end
      # resource path
      local_var_path = '/apiKey'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['cidr'] = opts[:'cidr'] if !opts[:'cidr'].nil?
      form_params['permissions'] = opts[:'permissions'] if !opts[:'permissions'].nil?
      form_params['enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeyApi#a_pi_key_new\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove an API Key.
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def a_pi_key_remove(api_key_id, opts = {})
      data, _status_code, _headers = a_pi_key_remove_with_http_info(api_key_id, opts)
      data
    end

    # Remove an API Key.
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def a_pi_key_remove_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeyApi.a_pi_key_remove ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling APIKeyApi.a_pi_key_remove"
      end
      # resource path
      local_var_path = '/apiKey'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['apiKeyID'] = api_key_id

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeyApi#a_pi_key_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
