=begin
#BitMEX API

### REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class PositionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get your positions.
    # See <a href=\"http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\">the FIX Spec</a> for explanations of these fields.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}.
    # @option opts [String] :columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
    # @option opts [Float] :count Number of rows to fetch.
    # @return [Array<Position>]
    def position_get(opts = {})
      data, _status_code, _headers = position_get_with_http_info(opts)
      data
    end

    # Get your positions.
    # See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}.
    # @option opts [String] :columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
    # @option opts [Float] :count Number of rows to fetch.
    # @return [Array<(Array<Position>, Fixnum, Hash)>] Array<Position> data, response status code and response headers
    def position_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PositionApi.position_get ...'
      end
      # resource path
      local_var_path = '/position'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'columns'] = opts[:'columns'] if !opts[:'columns'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Position>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PositionApi#position_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable isolated margin or cross margin per-position.
    # @param symbol Position symbol to isolate.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled True for isolated margin, false for cross margin. (default to true)
    # @return [Position]
    def position_isolate_margin(symbol, opts = {})
      data, _status_code, _headers = position_isolate_margin_with_http_info(symbol, opts)
      data
    end

    # Enable isolated margin or cross margin per-position.
    # @param symbol Position symbol to isolate.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled True for isolated margin, false for cross margin.
    # @return [Array<(Position, Fixnum, Hash)>] Position data, response status code and response headers
    def position_isolate_margin_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PositionApi.position_isolate_margin ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling PositionApi.position_isolate_margin"
      end
      # resource path
      local_var_path = '/position/isolate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['symbol'] = symbol
      form_params['enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Position')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PositionApi#position_isolate_margin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer equity in or out of a position.
    # @param symbol Symbol of position to isolate.
    # @param amount Amount to transfer, in Satoshis. May be negative.
    # @param [Hash] opts the optional parameters
    # @return [Position]
    def position_transfer_isolated_margin(symbol, amount, opts = {})
      data, _status_code, _headers = position_transfer_isolated_margin_with_http_info(symbol, amount, opts)
      data
    end

    # Transfer equity in or out of a position.
    # @param symbol Symbol of position to isolate.
    # @param amount Amount to transfer, in Satoshis. May be negative.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Position, Fixnum, Hash)>] Position data, response status code and response headers
    def position_transfer_isolated_margin_with_http_info(symbol, amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PositionApi.position_transfer_isolated_margin ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling PositionApi.position_transfer_isolated_margin"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling PositionApi.position_transfer_isolated_margin"
      end
      # resource path
      local_var_path = '/position/transferMargin'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['symbol'] = symbol
      form_params['amount'] = amount

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Position')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PositionApi#position_transfer_isolated_margin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Choose leverage for a position.
    # @param symbol Symbol of position to adjust.
    # @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
    # @param [Hash] opts the optional parameters
    # @return [Position]
    def position_update_leverage(symbol, leverage, opts = {})
      data, _status_code, _headers = position_update_leverage_with_http_info(symbol, leverage, opts)
      data
    end

    # Choose leverage for a position.
    # @param symbol Symbol of position to adjust.
    # @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Position, Fixnum, Hash)>] Position data, response status code and response headers
    def position_update_leverage_with_http_info(symbol, leverage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PositionApi.position_update_leverage ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling PositionApi.position_update_leverage"
      end
      # verify the required parameter 'leverage' is set
      if @api_client.config.client_side_validation && leverage.nil?
        fail ArgumentError, "Missing the required parameter 'leverage' when calling PositionApi.position_update_leverage"
      end
      # resource path
      local_var_path = '/position/leverage'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['symbol'] = symbol
      form_params['leverage'] = leverage

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Position')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PositionApi#position_update_leverage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update your risk limit.
    # @param symbol Symbol of position to update risk limit on.
    # @param risk_limit New Risk Limit, in Satoshis.
    # @param [Hash] opts the optional parameters
    # @return [Position]
    def position_update_risk_limit(symbol, risk_limit, opts = {})
      data, _status_code, _headers = position_update_risk_limit_with_http_info(symbol, risk_limit, opts)
      data
    end

    # Update your risk limit.
    # @param symbol Symbol of position to update risk limit on.
    # @param risk_limit New Risk Limit, in Satoshis.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Position, Fixnum, Hash)>] Position data, response status code and response headers
    def position_update_risk_limit_with_http_info(symbol, risk_limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PositionApi.position_update_risk_limit ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling PositionApi.position_update_risk_limit"
      end
      # verify the required parameter 'risk_limit' is set
      if @api_client.config.client_side_validation && risk_limit.nil?
        fail ArgumentError, "Missing the required parameter 'risk_limit' when calling PositionApi.position_update_risk_limit"
      end
      # resource path
      local_var_path = '/position/riskLimit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['symbol'] = symbol
      form_params['riskLimit'] = risk_limit

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Position')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PositionApi#position_update_risk_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
