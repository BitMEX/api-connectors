=begin
#BitMEX API

### REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a withdrawal.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Transaction]
    def user_cancel_withdrawal(token, opts = {})
      data, _status_code, _headers = user_cancel_withdrawal_with_http_info(token, opts)
      data
    end

    # Cancel a withdrawal.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def user_cancel_withdrawal_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_cancel_withdrawal ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.user_cancel_withdrawal"
      end
      # resource path
      local_var_path = '/user/cancelWithdrawal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['token'] = token

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_cancel_withdrawal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check if a referral code is valid.
    # If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :referral_code 
    # @return [Float]
    def user_check_referral_code(opts = {})
      data, _status_code, _headers = user_check_referral_code_with_http_info(opts)
      data
    end

    # Check if a referral code is valid.
    # If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :referral_code 
    # @return [Array<(Float, Fixnum, Hash)>] Float data, response status code and response headers
    def user_check_referral_code_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_check_referral_code ...'
      end
      # resource path
      local_var_path = '/user/checkReferralCode'

      # query parameters
      query_params = {}
      query_params[:'referralCode'] = opts[:'referral_code'] if !opts[:'referral_code'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Float')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_check_referral_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirm your email address with a token.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [AccessToken]
    def user_confirm(token, opts = {})
      data, _status_code, _headers = user_confirm_with_http_info(token, opts)
      data
    end

    # Confirm your email address with a token.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccessToken, Fixnum, Hash)>] AccessToken data, response status code and response headers
    def user_confirm_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_confirm ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.user_confirm"
      end
      # resource path
      local_var_path = '/user/confirmEmail'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['token'] = token

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
    # @param token Token from your selected TFA type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
    # @return [BOOLEAN]
    def user_confirm_enable_tfa(token, opts = {})
      data, _status_code, _headers = user_confirm_enable_tfa_with_http_info(token, opts)
      data
    end

    # Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
    # @param token Token from your selected TFA type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def user_confirm_enable_tfa_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_confirm_enable_tfa ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.user_confirm_enable_tfa"
      end
      # resource path
      local_var_path = '/user/confirmEnableTFA'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['token'] = token
      form_params['type'] = opts[:'type'] if !opts[:'type'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_confirm_enable_tfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirm a withdrawal.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Transaction]
    def user_confirm_withdrawal(token, opts = {})
      data, _status_code, _headers = user_confirm_withdrawal_with_http_info(token, opts)
      data
    end

    # Confirm a withdrawal.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def user_confirm_withdrawal_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_confirm_withdrawal ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.user_confirm_withdrawal"
      end
      # resource path
      local_var_path = '/user/confirmWithdrawal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['token'] = token

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_confirm_withdrawal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable two-factor auth for this account.
    # @param token Token from your selected TFA type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
    # @return [BOOLEAN]
    def user_disable_tfa(token, opts = {})
      data, _status_code, _headers = user_disable_tfa_with_http_info(token, opts)
      data
    end

    # Disable two-factor auth for this account.
    # @param token Token from your selected TFA type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def user_disable_tfa_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_disable_tfa ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.user_disable_tfa"
      end
      # resource path
      local_var_path = '/user/disableTFA'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['token'] = token
      form_params['type'] = opts[:'type'] if !opts[:'type'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_disable_tfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get your user model.
    # @param [Hash] opts the optional parameters
    # @return [User]
    def user_get(opts = {})
      data, _status_code, _headers = user_get_with_http_info(opts)
      data
    end

    # Get your user model.
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def user_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get your current affiliate/referral status.
    # @param [Hash] opts the optional parameters
    # @return [Affiliate]
    def user_get_affiliate_status(opts = {})
      data, _status_code, _headers = user_get_affiliate_status_with_http_info(opts)
      data
    end

    # Get your current affiliate/referral status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Affiliate, Fixnum, Hash)>] Affiliate data, response status code and response headers
    def user_get_affiliate_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_affiliate_status ...'
      end
      # resource path
      local_var_path = '/user/affiliateStatus'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Affiliate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_affiliate_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get your account's commission status.
    # @param [Hash] opts the optional parameters
    # @return [Array<UserCommission>]
    def user_get_commission(opts = {})
      data, _status_code, _headers = user_get_commission_with_http_info(opts)
      data
    end

    # Get your account&#39;s commission status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserCommission>, Fixnum, Hash)>] Array<UserCommission> data, response status code and response headers
    def user_get_commission_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_commission ...'
      end
      # resource path
      local_var_path = '/user/commission'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserCommission>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_commission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a deposit address.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency  (default to XBt)
    # @return [String]
    def user_get_deposit_address(opts = {})
      data, _status_code, _headers = user_get_deposit_address_with_http_info(opts)
      data
    end

    # Get a deposit address.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def user_get_deposit_address_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_deposit_address ...'
      end
      # resource path
      local_var_path = '/user/depositAddress'

      # query parameters
      query_params = {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_deposit_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency  (default to XBt)
    # @return [Margin]
    def user_get_margin(opts = {})
      data, _status_code, _headers = user_get_margin_with_http_info(opts)
      data
    end

    # Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @return [Array<(Margin, Fixnum, Hash)>] Margin data, response status code and response headers
    def user_get_margin_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_margin ...'
      end
      # resource path
      local_var_path = '/user/margin'

      # query parameters
      query_params = {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Margin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_margin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get your current wallet information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency  (default to XBt)
    # @return [Wallet]
    def user_get_wallet(opts = {})
      data, _status_code, _headers = user_get_wallet_with_http_info(opts)
      data
    end

    # Get your current wallet information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @return [Array<(Wallet, Fixnum, Hash)>] Wallet data, response status code and response headers
    def user_get_wallet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_wallet ...'
      end
      # resource path
      local_var_path = '/user/wallet'

      # query parameters
      query_params = {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Wallet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency  (default to XBt)
    # @return [Array<Transaction>]
    def user_get_wallet_history(opts = {})
      data, _status_code, _headers = user_get_wallet_history_with_http_info(opts)
      data
    end

    # Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @return [Array<(Array<Transaction>, Fixnum, Hash)>] Array<Transaction> data, response status code and response headers
    def user_get_wallet_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_wallet_history ...'
      end
      # resource path
      local_var_path = '/user/walletHistory'

      # query parameters
      query_params = {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Transaction>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_wallet_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency  (default to XBt)
    # @return [Array<Transaction>]
    def user_get_wallet_summary(opts = {})
      data, _status_code, _headers = user_get_wallet_summary_with_http_info(opts)
      data
    end

    # Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @return [Array<(Array<Transaction>, Fixnum, Hash)>] Array<Transaction> data, response status code and response headers
    def user_get_wallet_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_wallet_summary ...'
      end
      # resource path
      local_var_path = '/user/walletSummary'

      # query parameters
      query_params = {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Transaction>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_wallet_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Log out of BitMEX.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_logout(opts = {})
      user_logout_with_http_info(opts)
      nil
    end

    # Log out of BitMEX.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_logout ...'
      end
      # resource path
      local_var_path = '/user/logout'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Log all systems out of BitMEX. This will revoke all of your account's access tokens, logging you out on all devices.
    # @param [Hash] opts the optional parameters
    # @return [Float]
    def user_logout_all(opts = {})
      data, _status_code, _headers = user_logout_all_with_http_info(opts)
      data
    end

    # Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Float, Fixnum, Hash)>] Float data, response status code and response headers
    def user_logout_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_logout_all ...'
      end
      # resource path
      local_var_path = '/user/logoutAll'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Float')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_logout_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the minimum withdrawal fee for a currency.
    # This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency  (default to XBt)
    # @return [Object]
    def user_min_withdrawal_fee(opts = {})
      data, _status_code, _headers = user_min_withdrawal_fee_with_http_info(opts)
      data
    end

    # Get the minimum withdrawal fee for a currency.
    # This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def user_min_withdrawal_fee_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_min_withdrawal_fee ...'
      end
      # resource path
      local_var_path = '/user/minWithdrawalFee'

      # query parameters
      query_params = {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_min_withdrawal_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get secret key for setting up two-factor auth.
    # Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
    # @return [BOOLEAN]
    def user_request_enable_tfa(opts = {})
      data, _status_code, _headers = user_request_enable_tfa_with_http_info(opts)
      data
    end

    # Get secret key for setting up two-factor auth.
    # Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def user_request_enable_tfa_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_request_enable_tfa ...'
      end
      # resource path
      local_var_path = '/user/requestEnableTFA'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['type'] = opts[:'type'] if !opts[:'type'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_request_enable_tfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request a withdrawal to an external wallet.
    # This will send a confirmation email to the email address on record, unless requested via an API Key with the `withdraw` permission.
    # @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
    # @param amount Amount of withdrawal currency.
    # @param address Destination Address.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :otp_token 2FA token. Required if 2FA is enabled on your account.
    # @option opts [Float] :fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
    # @return [Transaction]
    def user_request_withdrawal(currency, amount, address, opts = {})
      data, _status_code, _headers = user_request_withdrawal_with_http_info(currency, amount, address, opts)
      data
    end

    # Request a withdrawal to an external wallet.
    # This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
    # @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
    # @param amount Amount of withdrawal currency.
    # @param address Destination Address.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :otp_token 2FA token. Required if 2FA is enabled on your account.
    # @option opts [Float] :fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def user_request_withdrawal_with_http_info(currency, amount, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_request_withdrawal ...'
      end
      # verify the required parameter 'currency' is set
      if @api_client.config.client_side_validation && currency.nil?
        fail ArgumentError, "Missing the required parameter 'currency' when calling UserApi.user_request_withdrawal"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling UserApi.user_request_withdrawal"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling UserApi.user_request_withdrawal"
      end
      # resource path
      local_var_path = '/user/requestWithdrawal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['currency'] = currency
      form_params['amount'] = amount
      form_params['address'] = address
      form_params['otpToken'] = opts[:'otp_token'] if !opts[:'otp_token'].nil?
      form_params['fee'] = opts[:'fee'] if !opts[:'fee'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_request_withdrawal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Save user preferences.
    # @param prefs 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :overwrite If true, will overwrite all existing preferences. (default to false)
    # @return [User]
    def user_save_preferences(prefs, opts = {})
      data, _status_code, _headers = user_save_preferences_with_http_info(prefs, opts)
      data
    end

    # Save user preferences.
    # @param prefs 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :overwrite If true, will overwrite all existing preferences.
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def user_save_preferences_with_http_info(prefs, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_save_preferences ...'
      end
      # verify the required parameter 'prefs' is set
      if @api_client.config.client_side_validation && prefs.nil?
        fail ArgumentError, "Missing the required parameter 'prefs' when calling UserApi.user_save_preferences"
      end
      # resource path
      local_var_path = '/user/preferences'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['prefs'] = prefs
      form_params['overwrite'] = opts[:'overwrite'] if !opts[:'overwrite'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_save_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update your password, name, and other attributes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :firstname 
    # @option opts [String] :lastname 
    # @option opts [String] :old_password 
    # @option opts [String] :new_password 
    # @option opts [String] :new_password_confirm 
    # @option opts [String] :username Username can only be set once. To reset, email support.
    # @option opts [String] :country Country of residence.
    # @option opts [String] :pgp_pub_key PGP Public Key. If specified, automated emails will be sentwith this key.
    # @return [User]
    def user_update(opts = {})
      data, _status_code, _headers = user_update_with_http_info(opts)
      data
    end

    # Update your password, name, and other attributes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :firstname 
    # @option opts [String] :lastname 
    # @option opts [String] :old_password 
    # @option opts [String] :new_password 
    # @option opts [String] :new_password_confirm 
    # @option opts [String] :username Username can only be set once. To reset, email support.
    # @option opts [String] :country Country of residence.
    # @option opts [String] :pgp_pub_key PGP Public Key. If specified, automated emails will be sentwith this key.
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def user_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_update ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['firstname'] = opts[:'firstname'] if !opts[:'firstname'].nil?
      form_params['lastname'] = opts[:'lastname'] if !opts[:'lastname'].nil?
      form_params['oldPassword'] = opts[:'old_password'] if !opts[:'old_password'].nil?
      form_params['newPassword'] = opts[:'new_password'] if !opts[:'new_password'].nil?
      form_params['newPasswordConfirm'] = opts[:'new_password_confirm'] if !opts[:'new_password_confirm'].nil?
      form_params['username'] = opts[:'username'] if !opts[:'username'].nil?
      form_params['country'] = opts[:'country'] if !opts[:'country'].nil?
      form_params['pgpPubKey'] = opts[:'pgp_pub_key'] if !opts[:'pgp_pub_key'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiNonce', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
