=begin
#BitMEX API

### REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  ---  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ---  ## All API Endpoints  Click to expand a section. 

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24-SNAPSHOT

=end

require 'date'

module SwaggerClient
  # User Events for Auditing
  class UserEvent
    attr_accessor :id

    attr_accessor :type

    attr_accessor :status

    attr_accessor :user_id

    attr_accessor :created_by_id

    attr_accessor :ip

    attr_accessor :geoip_country

    attr_accessor :geoip_region

    attr_accessor :geoip_sub_region

    attr_accessor :event_meta

    attr_accessor :created

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'status' => :'status',
        :'user_id' => :'userId',
        :'created_by_id' => :'createdById',
        :'ip' => :'ip',
        :'geoip_country' => :'geoipCountry',
        :'geoip_region' => :'geoipRegion',
        :'geoip_sub_region' => :'geoipSubRegion',
        :'event_meta' => :'eventMeta',
        :'created' => :'created'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Float',
        :'type' => :'String',
        :'status' => :'String',
        :'user_id' => :'Float',
        :'created_by_id' => :'Float',
        :'ip' => :'String',
        :'geoip_country' => :'String',
        :'geoip_region' => :'String',
        :'geoip_sub_region' => :'String',
        :'event_meta' => :'Object',
        :'created' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'createdById')
        self.created_by_id = attributes[:'createdById']
      end

      if attributes.has_key?(:'ip')
        self.ip = attributes[:'ip']
      end

      if attributes.has_key?(:'geoipCountry')
        self.geoip_country = attributes[:'geoipCountry']
      end

      if attributes.has_key?(:'geoipRegion')
        self.geoip_region = attributes[:'geoipRegion']
      end

      if attributes.has_key?(:'geoipSubRegion')
        self.geoip_sub_region = attributes[:'geoipSubRegion']
      end

      if attributes.has_key?(:'eventMeta')
        self.event_meta = attributes[:'eventMeta']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @created_by_id.nil?
        invalid_properties.push('invalid value for "created_by_id", created_by_id cannot be nil.')
      end

      if !@geoip_country.nil? && @geoip_country.to_s.length > 2
        invalid_properties.push('invalid value for "geoip_country", the character length must be smaller than or equal to 2.')
      end

      if !@geoip_region.nil? && @geoip_region.to_s.length > 3
        invalid_properties.push('invalid value for "geoip_region", the character length must be smaller than or equal to 3.')
      end

      if !@geoip_sub_region.nil? && @geoip_sub_region.to_s.length > 3
        invalid_properties.push('invalid value for "geoip_sub_region", the character length must be smaller than or equal to 3.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['apiKeyCreated', 'deleverageExecution', 'depositConfirmed', 'depositPending', 'banZeroVolumeApiUser', 'liquidationOrderPlaced', 'login', 'pgpMaskedEmail', 'pgpTestEmail', 'passwordChanged', 'positionStateLiquidated', 'positionStateWarning', 'resetPasswordConfirmed', 'resetPasswordRequest', 'transferCanceled', 'transferCompleted', 'transferReceived', 'transferRequested', 'twoFactorDisabled', 'twoFactorEnabled', 'withdrawalCanceled', 'withdrawalCompleted', 'withdrawalConfirmed', 'withdrawalRequested', 'addressSkipConfirmRequested', 'addressSkipConfirmVerified', 'verify'])
      return false unless type_validator.valid?(@type)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ['success', 'failure'])
      return false unless status_validator.valid?(@status)
      return false if @user_id.nil?
      return false if @created_by_id.nil?
      return false if !@geoip_country.nil? && @geoip_country.to_s.length > 2
      return false if !@geoip_region.nil? && @geoip_region.to_s.length > 3
      return false if !@geoip_sub_region.nil? && @geoip_sub_region.to_s.length > 3
      return false if @created.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['apiKeyCreated', 'deleverageExecution', 'depositConfirmed', 'depositPending', 'banZeroVolumeApiUser', 'liquidationOrderPlaced', 'login', 'pgpMaskedEmail', 'pgpTestEmail', 'passwordChanged', 'positionStateLiquidated', 'positionStateWarning', 'resetPasswordConfirmed', 'resetPasswordRequest', 'transferCanceled', 'transferCompleted', 'transferReceived', 'transferRequested', 'twoFactorDisabled', 'twoFactorEnabled', 'withdrawalCanceled', 'withdrawalCompleted', 'withdrawalConfirmed', 'withdrawalRequested', 'addressSkipConfirmRequested', 'addressSkipConfirmVerified', 'verify'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['success', 'failure'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] geoip_country Value to be assigned
    def geoip_country=(geoip_country)
      if !geoip_country.nil? && geoip_country.to_s.length > 2
        fail ArgumentError, 'invalid value for "geoip_country", the character length must be smaller than or equal to 2.'
      end

      @geoip_country = geoip_country
    end

    # Custom attribute writer method with validation
    # @param [Object] geoip_region Value to be assigned
    def geoip_region=(geoip_region)
      if !geoip_region.nil? && geoip_region.to_s.length > 3
        fail ArgumentError, 'invalid value for "geoip_region", the character length must be smaller than or equal to 3.'
      end

      @geoip_region = geoip_region
    end

    # Custom attribute writer method with validation
    # @param [Object] geoip_sub_region Value to be assigned
    def geoip_sub_region=(geoip_sub_region)
      if !geoip_sub_region.nil? && geoip_sub_region.to_s.length > 3
        fail ArgumentError, 'invalid value for "geoip_sub_region", the character length must be smaller than or equal to 3.'
      end

      @geoip_sub_region = geoip_sub_region
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          status == o.status &&
          user_id == o.user_id &&
          created_by_id == o.created_by_id &&
          ip == o.ip &&
          geoip_country == o.geoip_country &&
          geoip_region == o.geoip_region &&
          geoip_sub_region == o.geoip_sub_region &&
          event_meta == o.event_meta &&
          created == o.created
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, type, status, user_id, created_by_id, ip, geoip_country, geoip_region, geoip_sub_region, event_meta, created].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
