=begin
#BitMEX API

### REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PositionApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PositionApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PositionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PositionApi' do
    it 'should create an instance of PositionApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PositionApi)
    end
  end

  # unit tests for position_get
  # Get your positions.
  # See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}.
  # @option opts [String] :columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
  # @option opts [Float] :count Number of rows to fetch.
  # @return [Array<Position>]
  describe 'position_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for position_isolate_margin
  # Enable isolated margin or cross margin per-position.
  # @param symbol Position symbol to isolate.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :enabled True for isolated margin, false for cross margin.
  # @return [Position]
  describe 'position_isolate_margin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for position_transfer_isolated_margin
  # Transfer equity in or out of a position.
  # @param symbol Symbol of position to isolate.
  # @param amount Amount to transfer, in Satoshis. May be negative.
  # @param [Hash] opts the optional parameters
  # @return [Position]
  describe 'position_transfer_isolated_margin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for position_update_leverage
  # Choose leverage for a position.
  # @param symbol Symbol of position to adjust.
  # @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
  # @param [Hash] opts the optional parameters
  # @return [Position]
  describe 'position_update_leverage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for position_update_risk_limit
  # Update your risk limit.
  # @param symbol Symbol of position to update risk limit on.
  # @param risk_limit New Risk Limit, in Satoshis.
  # @param [Hash] opts the optional parameters
  # @return [Position]
  describe 'position_update_risk_limit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
