/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Chat
import io.swagger.client.model.ChatChannel
import io.swagger.client.model.ConnectedUsers
import io.swagger.client.model.Error
import io.swagger.client.model.Number
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class ChatApi(
  val defBasePath: String = "https://localhost/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ChatApiAsyncHelper(client, config)

  /**
   * Get chat messages.
   * 
   *
   * @param count Number of results to fetch. (optional, default to 100)
   * @param start Starting ID for results. (optional, default to 0)
   * @param reverse If true, will sort results newest first. (optional, default to true)
   * @param channelID Channel id. GET /chat/channels for ids. Leave blank for all. (optional)
   * @return List[Chat]
   */
  def chatGet(count: Option[Number] = Option(100), start: Option[Number] = Option(0), reverse: Option[Boolean] = Option(true), channelID: Option[Double] = None): Option[List[Chat]] = {
    val await = Try(Await.result(chatGetAsync(count, start, reverse, channelID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get chat messages. asynchronously
   * 
   *
   * @param count Number of results to fetch. (optional, default to 100)
   * @param start Starting ID for results. (optional, default to 0)
   * @param reverse If true, will sort results newest first. (optional, default to true)
   * @param channelID Channel id. GET /chat/channels for ids. Leave blank for all. (optional)
   * @return Future(List[Chat])
   */
  def chatGetAsync(count: Option[Number] = Option(100), start: Option[Number] = Option(0), reverse: Option[Boolean] = Option(true), channelID: Option[Double] = None): Future[List[Chat]] = {
      helper.chatGet(count, start, reverse, channelID)
  }

  /**
   * Get available channels.
   * 
   *
   * @return List[ChatChannel]
   */
  def chatGetChannels(): Option[List[ChatChannel]] = {
    val await = Try(Await.result(chatGetChannelsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get available channels. asynchronously
   * 
   *
   * @return Future(List[ChatChannel])
   */
  def chatGetChannelsAsync(): Future[List[ChatChannel]] = {
      helper.chatGetChannels()
  }

  /**
   * Get connected users.
   * Returns an array with browser users in the first position and API users (bots) in the second position.
   *
   * @return ConnectedUsers
   */
  def chatGetConnected(): Option[ConnectedUsers] = {
    val await = Try(Await.result(chatGetConnectedAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get connected users. asynchronously
   * Returns an array with browser users in the first position and API users (bots) in the second position.
   *
   * @return Future(ConnectedUsers)
   */
  def chatGetConnectedAsync(): Future[ConnectedUsers] = {
      helper.chatGetConnected()
  }

  /**
   * Send a chat message.
   * 
   *
   * @param message  
   * @param channelID Channel to post to. Default 1 (English). (optional, default to 1)
   * @return Chat
   */
  def chatNew(message: String, channelID: Option[Double] = Option(1)): Option[Chat] = {
    val await = Try(Await.result(chatNewAsync(message, channelID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a chat message. asynchronously
   * 
   *
   * @param message  
   * @param channelID Channel to post to. Default 1 (English). (optional, default to 1)
   * @return Future(Chat)
   */
  def chatNewAsync(message: String, channelID: Option[Double] = Option(1)): Future[Chat] = {
      helper.chatNew(message, channelID)
  }

}

class ChatApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def chatGet(count: Option[Number] = Option(100),
    start: Option[Number] = Option(0),
    reverse: Option[Boolean] = Option(true),
    channelID: Option[Double] = None
    )(implicit reader: ClientResponseReader[List[Chat]]): Future[List[Chat]] = {
    // create path and map variables
    val path = (addFmt("/chat"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    count match {
      case Some(param) => queryParams += "count" -> param.toString
      case _ => queryParams
    }
    start match {
      case Some(param) => queryParams += "start" -> param.toString
      case _ => queryParams
    }
    reverse match {
      case Some(param) => queryParams += "reverse" -> param.toString
      case _ => queryParams
    }
    channelID match {
      case Some(param) => queryParams += "channelID" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def chatGetChannels()(implicit reader: ClientResponseReader[List[ChatChannel]]): Future[List[ChatChannel]] = {
    // create path and map variables
    val path = (addFmt("/chat/channels"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def chatGetConnected()(implicit reader: ClientResponseReader[ConnectedUsers]): Future[ConnectedUsers] = {
    // create path and map variables
    val path = (addFmt("/chat/connected"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def chatNew(message: String,
    channelID: Option[Double] = Option(1)
    )(implicit reader: ClientResponseReader[Chat]): Future[Chat] = {
    // create path and map variables
    val path = (addFmt("/chat"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (message == null) throw new Exception("Missing required parameter 'message' when calling ChatApi->chatNew")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
