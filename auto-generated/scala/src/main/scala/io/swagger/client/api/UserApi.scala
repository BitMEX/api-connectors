/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.AccessToken
import io.swagger.client.model.Affiliate
import io.swagger.client.model.Margin
import io.swagger.client.model.Number
import io.swagger.client.model.Transaction
import io.swagger.client.model.User
import io.swagger.client.model.UserCommission
import io.swagger.client.model.Wallet
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class UserApi(
  val defBasePath: String = "https://localhost/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new UserApiAsyncHelper(client, config)

  /**
   * Cancel a withdrawal.
   * 
   *
   * @param token  
   * @return Transaction
   */
  def userCancelWithdrawal(token: String): Option[Transaction] = {
    val await = Try(Await.result(userCancelWithdrawalAsync(token), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Cancel a withdrawal. asynchronously
   * 
   *
   * @param token  
   * @return Future(Transaction)
   */
  def userCancelWithdrawalAsync(token: String): Future[Transaction] = {
      helper.userCancelWithdrawal(token)
  }

  /**
   * Check if a referral code is valid.
   * If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
   *
   * @param referralCode  (optional)
   * @return Double
   */
  def userCheckReferralCode(referralCode: Option[String] = None): Option[Double] = {
    val await = Try(Await.result(userCheckReferralCodeAsync(referralCode), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Check if a referral code is valid. asynchronously
   * If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
   *
   * @param referralCode  (optional)
   * @return Future(Double)
   */
  def userCheckReferralCodeAsync(referralCode: Option[String] = None): Future[Double] = {
      helper.userCheckReferralCode(referralCode)
  }

  /**
   * Confirm your email address with a token.
   * 
   *
   * @param token  
   * @return AccessToken
   */
  def userConfirm(token: String): Option[AccessToken] = {
    val await = Try(Await.result(userConfirmAsync(token), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Confirm your email address with a token. asynchronously
   * 
   *
   * @param token  
   * @return Future(AccessToken)
   */
  def userConfirmAsync(token: String): Future[AccessToken] = {
      helper.userConfirm(token)
  }

  /**
   * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
   * 
   *
   * @param token Token from your selected TFA type. 
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39; (optional)
   * @return Boolean
   */
  def userConfirmEnableTFA(token: String, `type`: Option[String] = None): Option[Boolean] = {
    val await = Try(Await.result(userConfirmEnableTFAAsync(token, `type`), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint. asynchronously
   * 
   *
   * @param token Token from your selected TFA type. 
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39; (optional)
   * @return Future(Boolean)
   */
  def userConfirmEnableTFAAsync(token: String, `type`: Option[String] = None): Future[Boolean] = {
      helper.userConfirmEnableTFA(token, `type`)
  }

  /**
   * Confirm a withdrawal.
   * 
   *
   * @param token  
   * @return Transaction
   */
  def userConfirmWithdrawal(token: String): Option[Transaction] = {
    val await = Try(Await.result(userConfirmWithdrawalAsync(token), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Confirm a withdrawal. asynchronously
   * 
   *
   * @param token  
   * @return Future(Transaction)
   */
  def userConfirmWithdrawalAsync(token: String): Future[Transaction] = {
      helper.userConfirmWithdrawal(token)
  }

  /**
   * Disable two-factor auth for this account.
   * 
   *
   * @param token Token from your selected TFA type. 
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
   * @return Boolean
   */
  def userDisableTFA(token: String, `type`: Option[String] = None): Option[Boolean] = {
    val await = Try(Await.result(userDisableTFAAsync(token, `type`), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Disable two-factor auth for this account. asynchronously
   * 
   *
   * @param token Token from your selected TFA type. 
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
   * @return Future(Boolean)
   */
  def userDisableTFAAsync(token: String, `type`: Option[String] = None): Future[Boolean] = {
      helper.userDisableTFA(token, `type`)
  }

  /**
   * Get your user model.
   * 
   *
   * @return User
   */
  def userGet(): Option[User] = {
    val await = Try(Await.result(userGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get your user model. asynchronously
   * 
   *
   * @return Future(User)
   */
  def userGetAsync(): Future[User] = {
      helper.userGet()
  }

  /**
   * Get your current affiliate/referral status.
   * 
   *
   * @return Affiliate
   */
  def userGetAffiliateStatus(): Option[Affiliate] = {
    val await = Try(Await.result(userGetAffiliateStatusAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get your current affiliate/referral status. asynchronously
   * 
   *
   * @return Future(Affiliate)
   */
  def userGetAffiliateStatusAsync(): Future[Affiliate] = {
      helper.userGetAffiliateStatus()
  }

  /**
   * Get your account&#39;s commission status.
   * 
   *
   * @return List[UserCommission]
   */
  def userGetCommission(): Option[List[UserCommission]] = {
    val await = Try(Await.result(userGetCommissionAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get your account&#39;s commission status. asynchronously
   * 
   *
   * @return Future(List[UserCommission])
   */
  def userGetCommissionAsync(): Future[List[UserCommission]] = {
      helper.userGetCommission()
  }

  /**
   * Get a deposit address.
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return String
   */
  def userGetDepositAddress(currency: Option[String] = Option("XBt")): Option[String] = {
    val await = Try(Await.result(userGetDepositAddressAsync(currency), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a deposit address. asynchronously
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return Future(String)
   */
  def userGetDepositAddressAsync(currency: Option[String] = Option("XBt")): Future[String] = {
      helper.userGetDepositAddress(currency)
  }

  /**
   * Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return Margin
   */
  def userGetMargin(currency: Option[String] = Option("XBt")): Option[Margin] = {
    val await = Try(Await.result(userGetMarginAsync(currency), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies. asynchronously
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return Future(Margin)
   */
  def userGetMarginAsync(currency: Option[String] = Option("XBt")): Future[Margin] = {
      helper.userGetMargin(currency)
  }

  /**
   * Get your current wallet information.
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return Wallet
   */
  def userGetWallet(currency: Option[String] = Option("XBt")): Option[Wallet] = {
    val await = Try(Await.result(userGetWalletAsync(currency), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get your current wallet information. asynchronously
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return Future(Wallet)
   */
  def userGetWalletAsync(currency: Option[String] = Option("XBt")): Future[Wallet] = {
      helper.userGetWallet(currency)
  }

  /**
   * Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return List[Transaction]
   */
  def userGetWalletHistory(currency: Option[String] = Option("XBt")): Option[List[Transaction]] = {
    val await = Try(Await.result(userGetWalletHistoryAsync(currency), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a history of all of your wallet transactions (deposits, withdrawals, PNL). asynchronously
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return Future(List[Transaction])
   */
  def userGetWalletHistoryAsync(currency: Option[String] = Option("XBt")): Future[List[Transaction]] = {
      helper.userGetWalletHistory(currency)
  }

  /**
   * Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return List[Transaction]
   */
  def userGetWalletSummary(currency: Option[String] = Option("XBt")): Option[List[Transaction]] = {
    val await = Try(Await.result(userGetWalletSummaryAsync(currency), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a summary of all of your wallet transactions (deposits, withdrawals, PNL). asynchronously
   * 
   *
   * @param currency  (optional, default to XBt)
   * @return Future(List[Transaction])
   */
  def userGetWalletSummaryAsync(currency: Option[String] = Option("XBt")): Future[List[Transaction]] = {
      helper.userGetWalletSummary(currency)
  }

  /**
   * Log out of BitMEX.
   * 
   *
   * @return void
   */
  def userLogout() = {
    val await = Try(Await.result(userLogoutAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Log out of BitMEX. asynchronously
   * 
   *
   * @return Future(void)
   */
  def userLogoutAsync() = {
      helper.userLogout()
  }

  /**
   * Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
   * 
   *
   * @return Double
   */
  def userLogoutAll(): Option[Double] = {
    val await = Try(Await.result(userLogoutAllAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices. asynchronously
   * 
   *
   * @return Future(Double)
   */
  def userLogoutAllAsync(): Future[Double] = {
      helper.userLogoutAll()
  }

  /**
   * Get the minimum withdrawal fee for a currency.
   * This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
   *
   * @param currency  (optional, default to XBt)
   * @return Any
   */
  def userMinWithdrawalFee(currency: Option[String] = Option("XBt")): Option[Any] = {
    val await = Try(Await.result(userMinWithdrawalFeeAsync(currency), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the minimum withdrawal fee for a currency. asynchronously
   * This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
   *
   * @param currency  (optional, default to XBt)
   * @return Future(Any)
   */
  def userMinWithdrawalFeeAsync(currency: Option[String] = Option("XBt")): Future[Any] = {
      helper.userMinWithdrawalFee(currency)
  }

  /**
   * Get secret key for setting up two-factor auth.
   * Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
   *
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
   * @return Boolean
   */
  def userRequestEnableTFA(`type`: Option[String] = None): Option[Boolean] = {
    val await = Try(Await.result(userRequestEnableTFAAsync(`type`), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get secret key for setting up two-factor auth. asynchronously
   * Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
   *
   * @param `type` Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
   * @return Future(Boolean)
   */
  def userRequestEnableTFAAsync(`type`: Option[String] = None): Future[Boolean] = {
      helper.userRequestEnableTFA(`type`)
  }

  /**
   * Request a withdrawal to an external wallet.
   * This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
   *
   * @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60; 
   * @param amount Amount of withdrawal currency. 
   * @param address Destination Address. 
   * @param otpToken 2FA token. Required if 2FA is enabled on your account. (optional)
   * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)
   * @return Transaction
   */
  def userRequestWithdrawal(currency: String = "XBt", amount: Number, address: String, otpToken: Option[String] = None, fee: Option[Double] = None): Option[Transaction] = {
    val await = Try(Await.result(userRequestWithdrawalAsync(currency, amount, address, otpToken, fee), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Request a withdrawal to an external wallet. asynchronously
   * This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
   *
   * @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60; 
   * @param amount Amount of withdrawal currency. 
   * @param address Destination Address. 
   * @param otpToken 2FA token. Required if 2FA is enabled on your account. (optional)
   * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)
   * @return Future(Transaction)
   */
  def userRequestWithdrawalAsync(currency: String = "XBt", amount: Number, address: String, otpToken: Option[String] = None, fee: Option[Double] = None): Future[Transaction] = {
      helper.userRequestWithdrawal(currency, amount, address, otpToken, fee)
  }

  /**
   * Save user preferences.
   * 
   *
   * @param prefs  
   * @param overwrite If true, will overwrite all existing preferences. (optional, default to false)
   * @return User
   */
  def userSavePreferences(prefs: String, overwrite: Option[Boolean] = Option(false)): Option[User] = {
    val await = Try(Await.result(userSavePreferencesAsync(prefs, overwrite), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Save user preferences. asynchronously
   * 
   *
   * @param prefs  
   * @param overwrite If true, will overwrite all existing preferences. (optional, default to false)
   * @return Future(User)
   */
  def userSavePreferencesAsync(prefs: String, overwrite: Option[Boolean] = Option(false)): Future[User] = {
      helper.userSavePreferences(prefs, overwrite)
  }

  /**
   * Update your password, name, and other attributes.
   * 
   *
   * @param firstname  (optional)
   * @param lastname  (optional)
   * @param oldPassword  (optional)
   * @param newPassword  (optional)
   * @param newPasswordConfirm  (optional)
   * @param username Username can only be set once. To reset, email support. (optional)
   * @param country Country of residence. (optional)
   * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key. (optional)
   * @return User
   */
  def userUpdate(firstname: Option[String] = None, lastname: Option[String] = None, oldPassword: Option[String] = None, newPassword: Option[String] = None, newPasswordConfirm: Option[String] = None, username: Option[String] = None, country: Option[String] = None, pgpPubKey: Option[String] = None): Option[User] = {
    val await = Try(Await.result(userUpdateAsync(firstname, lastname, oldPassword, newPassword, newPasswordConfirm, username, country, pgpPubKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update your password, name, and other attributes. asynchronously
   * 
   *
   * @param firstname  (optional)
   * @param lastname  (optional)
   * @param oldPassword  (optional)
   * @param newPassword  (optional)
   * @param newPasswordConfirm  (optional)
   * @param username Username can only be set once. To reset, email support. (optional)
   * @param country Country of residence. (optional)
   * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key. (optional)
   * @return Future(User)
   */
  def userUpdateAsync(firstname: Option[String] = None, lastname: Option[String] = None, oldPassword: Option[String] = None, newPassword: Option[String] = None, newPasswordConfirm: Option[String] = None, username: Option[String] = None, country: Option[String] = None, pgpPubKey: Option[String] = None): Future[User] = {
      helper.userUpdate(firstname, lastname, oldPassword, newPassword, newPasswordConfirm, username, country, pgpPubKey)
  }

}

class UserApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def userCancelWithdrawal(token: String)(implicit reader: ClientResponseReader[Transaction]): Future[Transaction] = {
    // create path and map variables
    val path = (addFmt("/user/cancelWithdrawal"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (token == null) throw new Exception("Missing required parameter 'token' when calling UserApi->userCancelWithdrawal")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userCheckReferralCode(referralCode: Option[String] = None
    )(implicit reader: ClientResponseReader[Double]): Future[Double] = {
    // create path and map variables
    val path = (addFmt("/user/checkReferralCode"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    referralCode match {
      case Some(param) => queryParams += "referralCode" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userConfirm(token: String)(implicit reader: ClientResponseReader[AccessToken]): Future[AccessToken] = {
    // create path and map variables
    val path = (addFmt("/user/confirmEmail"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (token == null) throw new Exception("Missing required parameter 'token' when calling UserApi->userConfirm")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userConfirmEnableTFA(token: String,
    `type`: Option[String] = None
    )(implicit reader: ClientResponseReader[Boolean]): Future[Boolean] = {
    // create path and map variables
    val path = (addFmt("/user/confirmEnableTFA"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (token == null) throw new Exception("Missing required parameter 'token' when calling UserApi->userConfirmEnableTFA")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userConfirmWithdrawal(token: String)(implicit reader: ClientResponseReader[Transaction]): Future[Transaction] = {
    // create path and map variables
    val path = (addFmt("/user/confirmWithdrawal"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (token == null) throw new Exception("Missing required parameter 'token' when calling UserApi->userConfirmWithdrawal")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userDisableTFA(token: String,
    `type`: Option[String] = None
    )(implicit reader: ClientResponseReader[Boolean]): Future[Boolean] = {
    // create path and map variables
    val path = (addFmt("/user/disableTFA"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (token == null) throw new Exception("Missing required parameter 'token' when calling UserApi->userDisableTFA")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGet()(implicit reader: ClientResponseReader[User]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/user"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGetAffiliateStatus()(implicit reader: ClientResponseReader[Affiliate]): Future[Affiliate] = {
    // create path and map variables
    val path = (addFmt("/user/affiliateStatus"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGetCommission()(implicit reader: ClientResponseReader[List[UserCommission]]): Future[List[UserCommission]] = {
    // create path and map variables
    val path = (addFmt("/user/commission"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGetDepositAddress(currency: Option[String] = Option("XBt")
    )(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/user/depositAddress"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    currency match {
      case Some(param) => queryParams += "currency" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGetMargin(currency: Option[String] = Option("XBt")
    )(implicit reader: ClientResponseReader[Margin]): Future[Margin] = {
    // create path and map variables
    val path = (addFmt("/user/margin"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    currency match {
      case Some(param) => queryParams += "currency" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGetWallet(currency: Option[String] = Option("XBt")
    )(implicit reader: ClientResponseReader[Wallet]): Future[Wallet] = {
    // create path and map variables
    val path = (addFmt("/user/wallet"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    currency match {
      case Some(param) => queryParams += "currency" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGetWalletHistory(currency: Option[String] = Option("XBt")
    )(implicit reader: ClientResponseReader[List[Transaction]]): Future[List[Transaction]] = {
    // create path and map variables
    val path = (addFmt("/user/walletHistory"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    currency match {
      case Some(param) => queryParams += "currency" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userGetWalletSummary(currency: Option[String] = Option("XBt")
    )(implicit reader: ClientResponseReader[List[Transaction]]): Future[List[Transaction]] = {
    // create path and map variables
    val path = (addFmt("/user/walletSummary"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    currency match {
      case Some(param) => queryParams += "currency" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userLogout()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/user/logout"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userLogoutAll()(implicit reader: ClientResponseReader[Double]): Future[Double] = {
    // create path and map variables
    val path = (addFmt("/user/logoutAll"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userMinWithdrawalFee(currency: Option[String] = Option("XBt")
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/user/minWithdrawalFee"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    currency match {
      case Some(param) => queryParams += "currency" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userRequestEnableTFA(`type`: Option[String] = None
    )(implicit reader: ClientResponseReader[Boolean]): Future[Boolean] = {
    // create path and map variables
    val path = (addFmt("/user/requestEnableTFA"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userRequestWithdrawal(currency: String = "XBt",
    amount: Number,
    address: String,
    otpToken: Option[String] = None,
    fee: Option[Double] = None
    )(implicit reader: ClientResponseReader[Transaction]): Future[Transaction] = {
    // create path and map variables
    val path = (addFmt("/user/requestWithdrawal"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (currency == null) throw new Exception("Missing required parameter 'currency' when calling UserApi->userRequestWithdrawal")

    if (address == null) throw new Exception("Missing required parameter 'address' when calling UserApi->userRequestWithdrawal")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userSavePreferences(prefs: String,
    overwrite: Option[Boolean] = Option(false)
    )(implicit reader: ClientResponseReader[User]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/user/preferences"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (prefs == null) throw new Exception("Missing required parameter 'prefs' when calling UserApi->userSavePreferences")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userUpdate(firstname: Option[String] = None,
    lastname: Option[String] = None,
    oldPassword: Option[String] = None,
    newPassword: Option[String] = None,
    newPasswordConfirm: Option[String] = None,
    username: Option[String] = None,
    country: Option[String] = None,
    pgpPubKey: Option[String] = None
    )(implicit reader: ClientResponseReader[User]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/user"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
