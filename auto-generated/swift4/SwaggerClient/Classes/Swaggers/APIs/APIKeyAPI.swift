//
// APIKeyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class APIKeyAPI {
    /**
     Disable an API Key.
     
     - parameter apiKeyID: (form) API Key ID (public component). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aPIKeyDisable(apiKeyID: String, completion: @escaping ((_ data: APIKey?,_ error: Error?) -> Void)) {
        aPIKeyDisableWithRequestBuilder(apiKeyID: apiKeyID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Disable an API Key.
     - POST /apiKey/disable
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "permissions" : [ { }, { } ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "cidr" : "cidr",
  "id" : "id",
  "secret" : "secret",
  "nonce" : 0.80082819046101150206595775671303272247314453125,
  "userId" : 6.02745618307040320615897144307382404804229736328125,
  "enabled" : false
}}]
     
     - parameter apiKeyID: (form) API Key ID (public component). 

     - returns: RequestBuilder<APIKey> 
     */
    open class func aPIKeyDisableWithRequestBuilder(apiKeyID: String) -> RequestBuilder<APIKey> {
        let path = "/apiKey/disable"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "apiKeyID": apiKeyID
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<APIKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable an API Key.
     
     - parameter apiKeyID: (form) API Key ID (public component). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aPIKeyEnable(apiKeyID: String, completion: @escaping ((_ data: APIKey?,_ error: Error?) -> Void)) {
        aPIKeyEnableWithRequestBuilder(apiKeyID: apiKeyID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Enable an API Key.
     - POST /apiKey/enable
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "permissions" : [ { }, { } ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "cidr" : "cidr",
  "id" : "id",
  "secret" : "secret",
  "nonce" : 0.80082819046101150206595775671303272247314453125,
  "userId" : 6.02745618307040320615897144307382404804229736328125,
  "enabled" : false
}}]
     
     - parameter apiKeyID: (form) API Key ID (public component). 

     - returns: RequestBuilder<APIKey> 
     */
    open class func aPIKeyEnableWithRequestBuilder(apiKeyID: String) -> RequestBuilder<APIKey> {
        let path = "/apiKey/enable"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "apiKeyID": apiKeyID
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<APIKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your API Keys.
     
     - parameter reverse: (query) If true, will sort results newest first. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aPIKeyGet(reverse: Bool? = nil, completion: @escaping ((_ data: [APIKey]?,_ error: Error?) -> Void)) {
        aPIKeyGetWithRequestBuilder(reverse: reverse).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your API Keys.
     - GET /apiKey
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=[ {
  "permissions" : [ { }, { } ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "cidr" : "cidr",
  "id" : "id",
  "secret" : "secret",
  "nonce" : 0.80082819046101150206595775671303272247314453125,
  "userId" : 6.02745618307040320615897144307382404804229736328125,
  "enabled" : false
}, {
  "permissions" : [ { }, { } ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "cidr" : "cidr",
  "id" : "id",
  "secret" : "secret",
  "nonce" : 0.80082819046101150206595775671303272247314453125,
  "userId" : 6.02745618307040320615897144307382404804229736328125,
  "enabled" : false
} ]}]
     
     - parameter reverse: (query) If true, will sort results newest first. (optional, default to false)

     - returns: RequestBuilder<[APIKey]> 
     */
    open class func aPIKeyGetWithRequestBuilder(reverse: Bool? = nil) -> RequestBuilder<[APIKey]> {
        let path = "/apiKey"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "reverse": reverse
        ])

        let requestBuilder: RequestBuilder<[APIKey]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new API Key.
     
     - parameter name: (form) Key name. This name is for reference only. (optional)
     - parameter cidr: (form) CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)
     - parameter permissions: (form) Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;orderCancel\&quot;, \&quot;withdraw\&quot;]. (optional)
     - parameter enabled: (form) Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)
     - parameter token: (form) OTP Token (YubiKey, Google Authenticator) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aPIKeyNew(name: String? = nil, cidr: String? = nil, permissions: String? = nil, enabled: Bool? = nil, token: String? = nil, completion: @escaping ((_ data: APIKey?,_ error: Error?) -> Void)) {
        aPIKeyNewWithRequestBuilder(name: name, cidr: cidr, permissions: permissions, enabled: enabled, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new API Key.
     - POST /apiKey
     - API Keys can only be created via the frontend.
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "permissions" : [ { }, { } ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "cidr" : "cidr",
  "id" : "id",
  "secret" : "secret",
  "nonce" : 0.80082819046101150206595775671303272247314453125,
  "userId" : 6.02745618307040320615897144307382404804229736328125,
  "enabled" : false
}}]
     
     - parameter name: (form) Key name. This name is for reference only. (optional)
     - parameter cidr: (form) CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)
     - parameter permissions: (form) Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;orderCancel\&quot;, \&quot;withdraw\&quot;]. (optional)
     - parameter enabled: (form) Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)
     - parameter token: (form) OTP Token (YubiKey, Google Authenticator) (optional)

     - returns: RequestBuilder<APIKey> 
     */
    open class func aPIKeyNewWithRequestBuilder(name: String? = nil, cidr: String? = nil, permissions: String? = nil, enabled: Bool? = nil, token: String? = nil) -> RequestBuilder<APIKey> {
        let path = "/apiKey"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "name": name,
            "cidr": cidr,
            "permissions": permissions,
            "enabled": enabled,
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<APIKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove an API Key.
     
     - parameter apiKeyID: (form) API Key ID (public component). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aPIKeyRemove(apiKeyID: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        aPIKeyRemoveWithRequestBuilder(apiKeyID: apiKeyID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Remove an API Key.
     - DELETE /apiKey
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     
     - parameter apiKeyID: (form) API Key ID (public component). 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func aPIKeyRemoveWithRequestBuilder(apiKeyID: String) -> RequestBuilder<InlineResponse200> {
        let path = "/apiKey"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "apiKeyID": apiKeyID
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
