//
// ChatAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ChatAPI {
    /**
     Get chat messages.
     
     - parameter count: (query) Number of results to fetch. (optional, default to 100)
     - parameter start: (query) Starting ID for results. (optional, default to 0)
     - parameter reverse: (query) If true, will sort results newest first. (optional, default to true)
     - parameter channelID: (query) Channel id. GET /chat/channels for ids. Leave blank for all. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatGet(count: Double? = nil, start: Double? = nil, reverse: Bool? = nil, channelID: Double? = nil, completion: @escaping ((_ data: [Chat]?,_ error: Error?) -> Void)) {
        chatGetWithRequestBuilder(count: count, start: start, reverse: reverse, channelID: channelID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get chat messages.
     - GET /chat
     - examples: [{contentType=application/json, example={}}]
     
     - parameter count: (query) Number of results to fetch. (optional, default to 100)
     - parameter start: (query) Starting ID for results. (optional, default to 0)
     - parameter reverse: (query) If true, will sort results newest first. (optional, default to true)
     - parameter channelID: (query) Channel id. GET /chat/channels for ids. Leave blank for all. (optional)

     - returns: RequestBuilder<[Chat]> 
     */
    open class func chatGetWithRequestBuilder(count: Double? = nil, start: Double? = nil, reverse: Bool? = nil, channelID: Double? = nil) -> RequestBuilder<[Chat]> {
        let path = "/chat"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count, 
            "start": start, 
            "reverse": reverse, 
            "channelID": channelID
        ])

        let requestBuilder: RequestBuilder<[Chat]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get available channels.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatGetChannels(completion: @escaping ((_ data: [ChatChannel]?,_ error: Error?) -> Void)) {
        chatGetChannelsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get available channels.
     - GET /chat/channels
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[ChatChannel]> 
     */
    open class func chatGetChannelsWithRequestBuilder() -> RequestBuilder<[ChatChannel]> {
        let path = "/chat/channels"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ChatChannel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get connected users.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatGetConnected(completion: @escaping ((_ data: ConnectedUsers?,_ error: Error?) -> Void)) {
        chatGetConnectedWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get connected users.
     - GET /chat/connected
     - Returns an array with browser users in the first position and API users (bots) in the second position.
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<ConnectedUsers> 
     */
    open class func chatGetConnectedWithRequestBuilder() -> RequestBuilder<ConnectedUsers> {
        let path = "/chat/connected"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConnectedUsers>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send a chat message.
     
     - parameter message: (form)  
     - parameter channelID: (form) Channel to post to. Default 1 (English). (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatNew(message: String, channelID: Double? = nil, completion: @escaping ((_ data: Chat?,_ error: Error?) -> Void)) {
        chatNewWithRequestBuilder(message: message, channelID: channelID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send a chat message.
     - POST /chat
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter message: (form)  
     - parameter channelID: (form) Channel to post to. Default 1 (English). (optional, default to 1)

     - returns: RequestBuilder<Chat> 
     */
    open class func chatNewWithRequestBuilder(message: String, channelID: Double? = nil) -> RequestBuilder<Chat> {
        let path = "/chat"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "message": message,
            "channelID": channelID
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Chat>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
