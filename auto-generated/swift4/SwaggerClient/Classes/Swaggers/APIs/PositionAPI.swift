//
// PositionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PositionAPI {
    /**
     Get your positions.
     
     - parameter filter: (query) Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}. (optional)
     - parameter columns: (query) Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)
     - parameter count: (query) Number of rows to fetch. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func positionGet(filter: String? = nil, columns: String? = nil, count: Double? = nil, completion: @escaping ((_ data: [Position]?,_ error: Error?) -> Void)) {
        positionGetWithRequestBuilder(filter: filter, columns: columns, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your positions.
     - GET /position
     - This endpoint is used for retrieving position information. The fields largely follow the [FIX spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html) definitions. Some selected fields are explained in more detail below.  The fields _account_, _symbol_, _currency_ are unique to each position and form its key.  - **account**: Your unique account ID. - **symbol**: The contract for this position. - **currency**: The margin currency for this position. - **underlying**: Meta data of the _symbol_. - **quoteCurrency**: Meta data of the _symbol_, All prices are in the _quoteCurrency_ - **commission**: The maximum of the maker, taker, and settlement fee. - **initMarginReq**: The initial margin requirement. This will be at least the symbol's default initial maintenance margin, but can be higher if you choose lower leverage. - **maintMarginReq**: The maintenance margin requirement. This will be at least the symbol's default maintenance maintenance margin, but can be higher if you choose a higher risk limit. - **riskLimit**: This is a function of your _maintMarginReq_. - **leverage**: 1 / initMarginReq. - **crossMargin**: True/false depending on whether you set cross margin on this position. - **deleveragePercentile**: Indicates where your position is in the ADL queue. - **rebalancedPnl**: The value of realised PNL that has transferred to your wallet for this position. - **prevRealisedPnl**: The value of realised PNL that has transferred to your wallet for this position since the position was closed. - **currentQty**: The current position amount in contracts. - **currentCost**: The current cost of the position in the settlement currency of the symbol (_currency_). - **currentComm**: The current commission of the position in the settlement currency of the symbol (_currency_). - **realisedCost**: The realised cost of this position calculated with regard to average cost accounting. - **unrealisedCost**: _currentCost_ - _realisedCost_. - **grossOpenCost**: The absolute value of your open orders for this symbol. - **grossOpenPremium**: The amount your bidding above the mark price in the settlement currency of the symbol (_currency_). - **markPrice**: The mark price of the symbol in _quoteCurrency_. - **markValue**: The _currentQty_ at the mark price in the settlement currency of the symbol (_currency_). - **homeNotional**: Value of position in units of _underlying_. - **foreignNotional**: Value of position in units of _quoteCurrency_. - **realisedPnl**: The negative of _realisedCost_. - **unrealisedGrossPnl**: _markValue_ - _unrealisedCost_. - **unrealisedPnl**: _unrealisedGrossPnl_. - **liquidationPrice**: Once markPrice reaches this price, this position will be liquidated. - **bankruptPrice**: Once markPrice reaches this price, this position will have no equity. 
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={}}]
     
     - parameter filter: (query) Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}. (optional)
     - parameter columns: (query) Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)
     - parameter count: (query) Number of rows to fetch. (optional)

     - returns: RequestBuilder<[Position]> 
     */
    open class func positionGetWithRequestBuilder(filter: String? = nil, columns: String? = nil, count: Double? = nil) -> RequestBuilder<[Position]> {
        let path = "/position"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter, 
            "columns": columns, 
            "count": count
        ])

        let requestBuilder: RequestBuilder<[Position]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable isolated margin or cross margin per-position.
     
     - parameter symbol: (form) Position symbol to isolate. 
     - parameter enabled: (form) True for isolated margin, false for cross margin. (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func positionIsolateMargin(symbol: String, enabled: Bool? = nil, completion: @escaping ((_ data: Position?,_ error: Error?) -> Void)) {
        positionIsolateMarginWithRequestBuilder(symbol: symbol, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Enable isolated margin or cross margin per-position.
     - POST /position/isolate
     - Users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter symbol: (form) Position symbol to isolate. 
     - parameter enabled: (form) True for isolated margin, false for cross margin. (optional, default to true)

     - returns: RequestBuilder<Position> 
     */
    open class func positionIsolateMarginWithRequestBuilder(symbol: String, enabled: Bool? = nil) -> RequestBuilder<Position> {
        let path = "/position/isolate"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "enabled": enabled
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Position>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Transfer equity in or out of a position.
     
     - parameter symbol: (form) Symbol of position to isolate. 
     - parameter amount: (form) Amount to transfer, in Satoshis. May be negative. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func positionTransferIsolatedMargin(symbol: String, amount: Double, completion: @escaping ((_ data: Position?,_ error: Error?) -> Void)) {
        positionTransferIsolatedMarginWithRequestBuilder(symbol: symbol, amount: amount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transfer equity in or out of a position.
     - POST /position/transferMargin
     - When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter symbol: (form) Symbol of position to isolate. 
     - parameter amount: (form) Amount to transfer, in Satoshis. May be negative. 

     - returns: RequestBuilder<Position> 
     */
    open class func positionTransferIsolatedMarginWithRequestBuilder(symbol: String, amount: Double) -> RequestBuilder<Position> {
        let path = "/position/transferMargin"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "amount": amount
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Position>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Choose leverage for a position.
     
     - parameter symbol: (form) Symbol of position to adjust. 
     - parameter leverage: (form) Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func positionUpdateLeverage(symbol: String, leverage: Double, completion: @escaping ((_ data: Position?,_ error: Error?) -> Void)) {
        positionUpdateLeverageWithRequestBuilder(symbol: symbol, leverage: leverage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Choose leverage for a position.
     - POST /position/leverage
     - Users can choose an isolated leverage. This will automatically enable isolated margin.
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter symbol: (form) Symbol of position to adjust. 
     - parameter leverage: (form) Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin. 

     - returns: RequestBuilder<Position> 
     */
    open class func positionUpdateLeverageWithRequestBuilder(symbol: String, leverage: Double) -> RequestBuilder<Position> {
        let path = "/position/leverage"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "leverage": leverage
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Position>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update your risk limit.
     
     - parameter symbol: (form) Symbol of position to update risk limit on. 
     - parameter riskLimit: (form) New Risk Limit, in Satoshis. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func positionUpdateRiskLimit(symbol: String, riskLimit: Double, completion: @escaping ((_ data: Position?,_ error: Error?) -> Void)) {
        positionUpdateRiskLimitWithRequestBuilder(symbol: symbol, riskLimit: riskLimit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update your risk limit.
     - POST /position/riskLimit
     - Risk Limits limit the size of positions you can trade at various margin levels. Larger positions require more margin. Please see the Risk Limit documentation for more details.
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter symbol: (form) Symbol of position to update risk limit on. 
     - parameter riskLimit: (form) New Risk Limit, in Satoshis. 

     - returns: RequestBuilder<Position> 
     */
    open class func positionUpdateRiskLimitWithRequestBuilder(symbol: String, riskLimit: Double) -> RequestBuilder<Position> {
        let path = "/position/riskLimit"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "riskLimit": riskLimit
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Position>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
