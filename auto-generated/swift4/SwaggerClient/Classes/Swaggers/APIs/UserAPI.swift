//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     Cancel a withdrawal.
     
     - parameter token: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCancelWithdrawal(token: String, completion: @escaping ((_ data: Transaction?,_ error: Error?) -> Void)) {
        userCancelWithdrawalWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel a withdrawal.
     - POST /user/cancelWithdrawal
     - examples: [{contentType=application/json, example={
  "amount" : 6.02745618307040320615897144307382404804229736328125,
  "address" : "address",
  "transactType" : "transactType",
  "tx" : "tx",
  "transactID" : "transactID",
  "fee" : 1.46581298050294517310021547018550336360931396484375,
  "transactTime" : "2000-01-23T04:56:07.000+00:00",
  "currency" : "currency",
  "text" : "text",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "transactStatus" : "transactStatus",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter token: (form)  

     - returns: RequestBuilder<Transaction> 
     */
    open class func userCancelWithdrawalWithRequestBuilder(token: String) -> RequestBuilder<Transaction> {
        let path = "/user/cancelWithdrawal"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Transaction>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if a referral code is valid.
     
     - parameter referralCode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCheckReferralCode(referralCode: String? = nil, completion: @escaping ((_ data: Double?,_ error: Error?) -> Void)) {
        userCheckReferralCodeWithRequestBuilder(referralCode: referralCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if a referral code is valid.
     - GET /user/checkReferralCode
     - If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404.
     - examples: [{contentType=application/json, example=0.8008281904610115}]
     
     - parameter referralCode: (query)  (optional)

     - returns: RequestBuilder<Double> 
     */
    open class func userCheckReferralCodeWithRequestBuilder(referralCode: String? = nil) -> RequestBuilder<Double> {
        let path = "/user/checkReferralCode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "referralCode": referralCode
        ])

        let requestBuilder: RequestBuilder<Double>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm your email address with a token.
     
     - parameter token: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userConfirm(token: String, completion: @escaping ((_ data: AccessToken?,_ error: Error?) -> Void)) {
        userConfirmWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm your email address with a token.
     - POST /user/confirmEmail
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter token: (form)  

     - returns: RequestBuilder<AccessToken> 
     */
    open class func userConfirmWithRequestBuilder(token: String) -> RequestBuilder<AccessToken> {
        let path = "/user/confirmEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     
     - parameter token: (form) Token from your selected TFA type. 
     - parameter type: (form) Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userConfirmEnableTFA(token: String, type: String? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        userConfirmEnableTFAWithRequestBuilder(token: token, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     - POST /user/confirmEnableTFA
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=true}]
     
     - parameter token: (form) Token from your selected TFA type. 
     - parameter type: (form) Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39; (optional)

     - returns: RequestBuilder<Bool> 
     */
    open class func userConfirmEnableTFAWithRequestBuilder(token: String, type: String? = nil) -> RequestBuilder<Bool> {
        let path = "/user/confirmEnableTFA"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "type": type,
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm a withdrawal.
     
     - parameter token: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userConfirmWithdrawal(token: String, completion: @escaping ((_ data: Transaction?,_ error: Error?) -> Void)) {
        userConfirmWithdrawalWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm a withdrawal.
     - POST /user/confirmWithdrawal
     - examples: [{contentType=application/json, example={
  "amount" : 6.02745618307040320615897144307382404804229736328125,
  "address" : "address",
  "transactType" : "transactType",
  "tx" : "tx",
  "transactID" : "transactID",
  "fee" : 1.46581298050294517310021547018550336360931396484375,
  "transactTime" : "2000-01-23T04:56:07.000+00:00",
  "currency" : "currency",
  "text" : "text",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "transactStatus" : "transactStatus",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter token: (form)  

     - returns: RequestBuilder<Transaction> 
     */
    open class func userConfirmWithdrawalWithRequestBuilder(token: String) -> RequestBuilder<Transaction> {
        let path = "/user/confirmWithdrawal"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Transaction>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable two-factor auth for this account.
     
     - parameter token: (form) Token from your selected TFA type. 
     - parameter type: (form) Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userDisableTFA(token: String, type: String? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        userDisableTFAWithRequestBuilder(token: token, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Disable two-factor auth for this account.
     - POST /user/disableTFA
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=true}]
     
     - parameter token: (form) Token from your selected TFA type. 
     - parameter type: (form) Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)

     - returns: RequestBuilder<Bool> 
     */
    open class func userDisableTFAWithRequestBuilder(token: String, type: String? = nil) -> RequestBuilder<Bool> {
        let path = "/user/disableTFA"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "type": type,
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your user model.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGet(completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your user model.
     - GET /user
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "firstname" : "firstname",
  "preferences" : {
    "hideNotifications" : [ "hideNotifications", "hideNotifications" ],
    "tickerGroup" : "tickerGroup",
    "animationsEnabled" : true,
    "alertOnLiquidations" : true,
    "locale" : "en-US",
    "hideConfirmDialogs" : [ "hideConfirmDialogs", "hideConfirmDialogs" ],
    "disableEmails" : [ "disableEmails", "disableEmails" ],
    "sounds" : [ "sounds", "sounds" ],
    "colorTheme" : "colorTheme",
    "currency" : "currency",
    "hideNameFromLeaderboard" : true,
    "tradeLayout" : "tradeLayout",
    "strictTimeout" : true,
    "orderBookBinning" : "{}",
    "debug" : true,
    "strictIPCheck" : false,
    "msgsSeen" : [ "msgsSeen", "msgsSeen" ],
    "orderControlsPlusMinus" : true,
    "hideConnectionModal" : true,
    "tickerPinned" : true,
    "hideFromLeaderboard" : false,
    "announcementsLastSeen" : "2000-01-23T04:56:07.000+00:00",
    "orderBookType" : "orderBookType",
    "orderClearImmediate" : false,
    "showLocaleNumbers" : true,
    "chatChannelID" : 1.4658129805029452
  },
  "created" : "2000-01-23T04:56:07.000+00:00",
  "typ" : "typ",
  "ownerId" : 6.02745618307040320615897144307382404804229736328125,
  "affiliateID" : "affiliateID",
  "lastname" : "lastname",
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "phone" : "phone",
  "TFAEnabled" : "TFAEnabled",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "email" : "email",
  "pgpPubKey" : "pgpPubKey",
  "username" : "username"
}}]

     - returns: RequestBuilder<User> 
     */
    open class func userGetWithRequestBuilder() -> RequestBuilder<User> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your current affiliate/referral status.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetAffiliateStatus(completion: @escaping ((_ data: Affiliate?,_ error: Error?) -> Void)) {
        userGetAffiliateStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your current affiliate/referral status.
     - GET /user/affiliateStatus
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "execTurnover" : 5.63737665663332876420099637471139430999755859375,
  "totalTurnover" : 9.301444243932575517419536481611430644989013671875,
  "referrerAccount" : 7.386281948385884,
  "execComm" : 2.3021358869347654518833223846741020679473876953125,
  "totalReferrals" : 7.061401241503109105224211816675961017608642578125,
  "currency" : "currency",
  "pendingPayout" : 4.1456080298839363962315474054776132106781005859375,
  "prevPayout" : 6.02745618307040320615897144307382404804229736328125,
  "prevComm" : 5.962133916683182377482808078639209270477294921875,
  "prevTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "prevTurnover" : 1.46581298050294517310021547018550336360931396484375,
  "totalComm" : 3.61607674925191080461672754609026014804840087890625,
  "payoutPcnt" : 2.027123023002322,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]

     - returns: RequestBuilder<Affiliate> 
     */
    open class func userGetAffiliateStatusWithRequestBuilder() -> RequestBuilder<Affiliate> {
        let path = "/user/affiliateStatus"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Affiliate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your account's commission status.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetCommission(completion: @escaping ((_ data: [UserCommission]?,_ error: Error?) -> Void)) {
        userGetCommissionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your account's commission status.
     - GET /user/commission
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=[ {
  "takerFee" : 6.027456183070403,
  "makerFee" : 0.8008281904610115,
  "settlementFee" : 1.4658129805029452,
  "maxFee" : 5.962133916683182
}, {
  "takerFee" : 6.027456183070403,
  "makerFee" : 0.8008281904610115,
  "settlementFee" : 1.4658129805029452,
  "maxFee" : 5.962133916683182
} ]}]

     - returns: RequestBuilder<[UserCommission]> 
     */
    open class func userGetCommissionWithRequestBuilder() -> RequestBuilder<[UserCommission]> {
        let path = "/user/commission"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UserCommission]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a deposit address.
     
     - parameter currency: (query)  (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetDepositAddress(currency: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        userGetDepositAddressWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a deposit address.
     - GET /user/depositAddress
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=""}]
     
     - parameter currency: (query)  (optional, default to XBt)

     - returns: RequestBuilder<String> 
     */
    open class func userGetDepositAddressWithRequestBuilder(currency: String? = nil) -> RequestBuilder<String> {
        let path = "/user/depositAddress"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
     
     - parameter currency: (query)  (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetMargin(currency: String? = nil, completion: @escaping ((_ data: Margin?,_ error: Error?) -> Void)) {
        userGetMarginWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
     - GET /user/margin
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "grossMarkValue" : 1.231513536777255612975068288506008684635162353515625,
  "marginUsedPcnt" : 2.8841621266687802,
  "marginLeverage" : 1.284659006116532,
  "marginBalancePcnt" : 6.965117697638846,
  "unrealisedPnl" : 9.3693102714106686335071572102606296539306640625,
  "riskLimit" : 6.02745618307040320615897144307382404804229736328125,
  "prevUnrealisedPnl" : 9.301444243932575517419536481611430644989013671875,
  "walletBalance" : 6.438423552598546706349225132726132869720458984375,
  "grossLastValue" : 3.35319334701124294184637619764544069766998291015625,
  "action" : "action",
  "currency" : "currency",
  "commission" : 3.0937452626664474,
  "state" : "state",
  "sessionMargin" : 1.173074250955943309548956676735542714595794677734375,
  "marginBalance" : 3.557195227068097320710649000830017030239105224609375,
  "timestamp" : "2000-01-23T04:56:07.000+00:00",
  "grossExecCost" : 7.3862819483858839220147274318151175975799560546875,
  "targetExcessMargin" : 4.9652184929849543237878606305457651615142822265625,
  "realisedPnl" : 9.965781217890562260208753286860883235931396484375,
  "varMargin" : 5.02500479152029466689555192715488374233245849609375,
  "indicativeTax" : 6.683562403749608193948006373830139636993408203125,
  "amount" : 1.46581298050294517310021547018550336360931396484375,
  "maintMargin" : 7.4577447736837658709418974467553198337554931640625,
  "pendingDebit" : 5.63737665663332876420099637471139430999755859375,
  "riskValue" : 1.024645700144157789424070870154537260532379150390625,
  "confirmedDebit" : 2.3021358869347654518833223846741020679473876953125,
  "grossComm" : 3.61607674925191080461672754609026014804840087890625,
  "grossOpenPremium" : 4.1456080298839363962315474054776132106781005859375,
  "excessMarginPcnt" : 6.878052220127876,
  "withdrawableMargin" : 6.70401929795003592715829654480330646038055419921875,
  "pendingCredit" : 5.962133916683182377482808078639209270477294921875,
  "grossOpenCost" : 2.027123023002321833274663731572218239307403564453125,
  "prevState" : "prevState",
  "prevRealisedPnl" : 7.061401241503109105224211816675961017608642578125,
  "excessMargin" : 6.77832496304801335185175048536621034145355224609375,
  "unrealisedProfit" : 8.7620420127490010742121739895083010196685791015625,
  "initMargin" : 6.8468526983526398765889098285697400569915771484375,
  "syntheticMargin" : 9.0183481860707832566959041287191212177276611328125,
  "taxableMargin" : 1.489415909854170383397331534069962799549102783203125,
  "account" : 0.80082819046101150206595775671303272247314453125,
  "availableMargin" : 5.94489560761401580890606055618263781070709228515625
}}]
     
     - parameter currency: (query)  (optional, default to XBt)

     - returns: RequestBuilder<Margin> 
     */
    open class func userGetMarginWithRequestBuilder(currency: String? = nil) -> RequestBuilder<Margin> {
        let path = "/user/margin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<Margin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your current wallet information.
     
     - parameter currency: (query)  (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetWallet(currency: String? = nil, completion: @escaping ((_ data: Wallet?,_ error: Error?) -> Void)) {
        userGetWalletWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your current wallet information.
     - GET /user/wallet
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "deposited" : 7.3862819483858839220147274318151175975799560546875,
  "withdrawn" : 1.231513536777255612975068288506008684635162353515625,
  "deltaDeposited" : 7.061401241503109105224211816675961017608642578125,
  "prevWithdrawn" : 1.46581298050294517310021547018550336360931396484375,
  "deltaWithdrawn" : 9.301444243932575517419536481611430644989013671875,
  "currency" : "currency",
  "prevAmount" : 2.3021358869347654518833223846741020679473876953125,
  "withdrawalLock" : [ "withdrawalLock", "withdrawalLock" ],
  "addr" : "addr",
  "prevTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "timestamp" : "2000-01-23T04:56:07.000+00:00",
  "transferOut" : 1.489415909854170383397331534069962799549102783203125,
  "deltaAmount" : 4.1456080298839363962315474054776132106781005859375,
  "amount" : 6.8468526983526398765889098285697400569915771484375,
  "pendingDebit" : 1.173074250955943309548956676735542714595794677734375,
  "confirmedDebit" : 4.9652184929849543237878606305457651615142822265625,
  "pendingCredit" : 7.4577447736837658709418974467553198337554931640625,
  "script" : "script",
  "prevTransferOut" : 5.63737665663332876420099637471139430999755859375,
  "deltaTransferOut" : 2.027123023002321833274663731572218239307403564453125,
  "deltaTransferIn" : 3.61607674925191080461672754609026014804840087890625,
  "transferIn" : 1.024645700144157789424070870154537260532379150390625,
  "prevDeposited" : 6.02745618307040320615897144307382404804229736328125,
  "prevTransferIn" : 5.962133916683182377482808078639209270477294921875,
  "account" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter currency: (query)  (optional, default to XBt)

     - returns: RequestBuilder<Wallet> 
     */
    open class func userGetWalletWithRequestBuilder(currency: String? = nil) -> RequestBuilder<Wallet> {
        let path = "/user/wallet"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<Wallet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     
     - parameter currency: (query)  (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetWalletHistory(currency: String? = nil, completion: @escaping ((_ data: [Transaction]?,_ error: Error?) -> Void)) {
        userGetWalletHistoryWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     - GET /user/walletHistory
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=[ {
  "amount" : 6.02745618307040320615897144307382404804229736328125,
  "address" : "address",
  "transactType" : "transactType",
  "tx" : "tx",
  "transactID" : "transactID",
  "fee" : 1.46581298050294517310021547018550336360931396484375,
  "transactTime" : "2000-01-23T04:56:07.000+00:00",
  "currency" : "currency",
  "text" : "text",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "transactStatus" : "transactStatus",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 6.02745618307040320615897144307382404804229736328125,
  "address" : "address",
  "transactType" : "transactType",
  "tx" : "tx",
  "transactID" : "transactID",
  "fee" : 1.46581298050294517310021547018550336360931396484375,
  "transactTime" : "2000-01-23T04:56:07.000+00:00",
  "currency" : "currency",
  "text" : "text",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "transactStatus" : "transactStatus",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter currency: (query)  (optional, default to XBt)

     - returns: RequestBuilder<[Transaction]> 
     */
    open class func userGetWalletHistoryWithRequestBuilder(currency: String? = nil) -> RequestBuilder<[Transaction]> {
        let path = "/user/walletHistory"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<[Transaction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     
     - parameter currency: (query)  (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetWalletSummary(currency: String? = nil, completion: @escaping ((_ data: [Transaction]?,_ error: Error?) -> Void)) {
        userGetWalletSummaryWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     - GET /user/walletSummary
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=[ {
  "amount" : 6.02745618307040320615897144307382404804229736328125,
  "address" : "address",
  "transactType" : "transactType",
  "tx" : "tx",
  "transactID" : "transactID",
  "fee" : 1.46581298050294517310021547018550336360931396484375,
  "transactTime" : "2000-01-23T04:56:07.000+00:00",
  "currency" : "currency",
  "text" : "text",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "transactStatus" : "transactStatus",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 6.02745618307040320615897144307382404804229736328125,
  "address" : "address",
  "transactType" : "transactType",
  "tx" : "tx",
  "transactID" : "transactID",
  "fee" : 1.46581298050294517310021547018550336360931396484375,
  "transactTime" : "2000-01-23T04:56:07.000+00:00",
  "currency" : "currency",
  "text" : "text",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "transactStatus" : "transactStatus",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter currency: (query)  (optional, default to XBt)

     - returns: RequestBuilder<[Transaction]> 
     */
    open class func userGetWalletSummaryWithRequestBuilder(currency: String? = nil) -> RequestBuilder<[Transaction]> {
        let path = "/user/walletSummary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<[Transaction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Log out of BitMEX.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userLogout(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userLogoutWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Log out of BitMEX.
     - POST /user/logout

     - returns: RequestBuilder<Void> 
     */
    open class func userLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Log all systems out of BitMEX. This will revoke all of your account's access tokens, logging you out on all devices.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userLogoutAll(completion: @escaping ((_ data: Double?,_ error: Error?) -> Void)) {
        userLogoutAllWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Log all systems out of BitMEX. This will revoke all of your account's access tokens, logging you out on all devices.
     - POST /user/logoutAll
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=0.8008281904610115}]

     - returns: RequestBuilder<Double> 
     */
    open class func userLogoutAllWithRequestBuilder() -> RequestBuilder<Double> {
        let path = "/user/logoutAll"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Double>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the minimum withdrawal fee for a currency.
     
     - parameter currency: (query)  (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userMinWithdrawalFee(currency: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        userMinWithdrawalFeeWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the minimum withdrawal fee for a currency.
     - GET /user/minWithdrawalFee
     - This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter currency: (query)  (optional, default to XBt)

     - returns: RequestBuilder<Any> 
     */
    open class func userMinWithdrawalFeeWithRequestBuilder(currency: String? = nil) -> RequestBuilder<Any> {
        let path = "/user/minWithdrawalFee"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get secret key for setting up two-factor auth.
     
     - parameter type: (form) Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userRequestEnableTFA(type: String? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        userRequestEnableTFAWithRequestBuilder(type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get secret key for setting up two-factor auth.
     - POST /user/requestEnableTFA
     - Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example=true}]
     
     - parameter type: (form) Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)

     - returns: RequestBuilder<Bool> 
     */
    open class func userRequestEnableTFAWithRequestBuilder(type: String? = nil) -> RequestBuilder<Bool> {
        let path = "/user/requestEnableTFA"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "type": type
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Request a withdrawal to an external wallet.
     
     - parameter currency: (form) Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60; 
     - parameter amount: (form) Amount of withdrawal currency. 
     - parameter address: (form) Destination Address. 
     - parameter otpToken: (form) 2FA token. Required if 2FA is enabled on your account. (optional)
     - parameter fee: (form) Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userRequestWithdrawal(currency: String, amount: Double, address: String, otpToken: String? = nil, fee: Double? = nil, completion: @escaping ((_ data: Transaction?,_ error: Error?) -> Void)) {
        userRequestWithdrawalWithRequestBuilder(currency: currency, amount: amount, address: address, otpToken: otpToken, fee: fee).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Request a withdrawal to an external wallet.
     - POST /user/requestWithdrawal
     - This will send a confirmation email to the email address on record, unless requested via an API Key with the `withdraw` permission.
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "amount" : 6.02745618307040320615897144307382404804229736328125,
  "address" : "address",
  "transactType" : "transactType",
  "tx" : "tx",
  "transactID" : "transactID",
  "fee" : 1.46581298050294517310021547018550336360931396484375,
  "transactTime" : "2000-01-23T04:56:07.000+00:00",
  "currency" : "currency",
  "text" : "text",
  "account" : 0.80082819046101150206595775671303272247314453125,
  "transactStatus" : "transactStatus",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter currency: (form) Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60; 
     - parameter amount: (form) Amount of withdrawal currency. 
     - parameter address: (form) Destination Address. 
     - parameter otpToken: (form) 2FA token. Required if 2FA is enabled on your account. (optional)
     - parameter fee: (form) Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)

     - returns: RequestBuilder<Transaction> 
     */
    open class func userRequestWithdrawalWithRequestBuilder(currency: String, amount: Double, address: String, otpToken: String? = nil, fee: Double? = nil) -> RequestBuilder<Transaction> {
        let path = "/user/requestWithdrawal"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "otpToken": otpToken,
            "currency": currency,
            "amount": amount,
            "address": address,
            "fee": fee
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Transaction>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Save user preferences.
     
     - parameter prefs: (form)  
     - parameter overwrite: (form) If true, will overwrite all existing preferences. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSavePreferences(prefs: String, overwrite: Bool? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userSavePreferencesWithRequestBuilder(prefs: prefs, overwrite: overwrite).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Save user preferences.
     - POST /user/preferences
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "firstname" : "firstname",
  "preferences" : {
    "hideNotifications" : [ "hideNotifications", "hideNotifications" ],
    "tickerGroup" : "tickerGroup",
    "animationsEnabled" : true,
    "alertOnLiquidations" : true,
    "locale" : "en-US",
    "hideConfirmDialogs" : [ "hideConfirmDialogs", "hideConfirmDialogs" ],
    "disableEmails" : [ "disableEmails", "disableEmails" ],
    "sounds" : [ "sounds", "sounds" ],
    "colorTheme" : "colorTheme",
    "currency" : "currency",
    "hideNameFromLeaderboard" : true,
    "tradeLayout" : "tradeLayout",
    "strictTimeout" : true,
    "orderBookBinning" : "{}",
    "debug" : true,
    "strictIPCheck" : false,
    "msgsSeen" : [ "msgsSeen", "msgsSeen" ],
    "orderControlsPlusMinus" : true,
    "hideConnectionModal" : true,
    "tickerPinned" : true,
    "hideFromLeaderboard" : false,
    "announcementsLastSeen" : "2000-01-23T04:56:07.000+00:00",
    "orderBookType" : "orderBookType",
    "orderClearImmediate" : false,
    "showLocaleNumbers" : true,
    "chatChannelID" : 1.4658129805029452
  },
  "created" : "2000-01-23T04:56:07.000+00:00",
  "typ" : "typ",
  "ownerId" : 6.02745618307040320615897144307382404804229736328125,
  "affiliateID" : "affiliateID",
  "lastname" : "lastname",
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "phone" : "phone",
  "TFAEnabled" : "TFAEnabled",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "email" : "email",
  "pgpPubKey" : "pgpPubKey",
  "username" : "username"
}}]
     
     - parameter prefs: (form)  
     - parameter overwrite: (form) If true, will overwrite all existing preferences. (optional, default to false)

     - returns: RequestBuilder<User> 
     */
    open class func userSavePreferencesWithRequestBuilder(prefs: String, overwrite: Bool? = nil) -> RequestBuilder<User> {
        let path = "/user/preferences"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "prefs": prefs,
            "overwrite": overwrite
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update your password, name, and other attributes.
     
     - parameter firstname: (form)  (optional)
     - parameter lastname: (form)  (optional)
     - parameter oldPassword: (form)  (optional)
     - parameter newPassword: (form)  (optional)
     - parameter newPasswordConfirm: (form)  (optional)
     - parameter username: (form) Username can only be set once. To reset, email support. (optional)
     - parameter country: (form) Country of residence. (optional)
     - parameter pgpPubKey: (form) PGP Public Key. If specified, automated emails will be sentwith this key. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userUpdate(firstname: String? = nil, lastname: String? = nil, oldPassword: String? = nil, newPassword: String? = nil, newPasswordConfirm: String? = nil, username: String? = nil, country: String? = nil, pgpPubKey: String? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userUpdateWithRequestBuilder(firstname: firstname, lastname: lastname, oldPassword: oldPassword, newPassword: newPassword, newPasswordConfirm: newPasswordConfirm, username: username, country: country, pgpPubKey: pgpPubKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update your password, name, and other attributes.
     - PUT /user
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-nonce 
       - name: apiNonce
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "firstname" : "firstname",
  "preferences" : {
    "hideNotifications" : [ "hideNotifications", "hideNotifications" ],
    "tickerGroup" : "tickerGroup",
    "animationsEnabled" : true,
    "alertOnLiquidations" : true,
    "locale" : "en-US",
    "hideConfirmDialogs" : [ "hideConfirmDialogs", "hideConfirmDialogs" ],
    "disableEmails" : [ "disableEmails", "disableEmails" ],
    "sounds" : [ "sounds", "sounds" ],
    "colorTheme" : "colorTheme",
    "currency" : "currency",
    "hideNameFromLeaderboard" : true,
    "tradeLayout" : "tradeLayout",
    "strictTimeout" : true,
    "orderBookBinning" : "{}",
    "debug" : true,
    "strictIPCheck" : false,
    "msgsSeen" : [ "msgsSeen", "msgsSeen" ],
    "orderControlsPlusMinus" : true,
    "hideConnectionModal" : true,
    "tickerPinned" : true,
    "hideFromLeaderboard" : false,
    "announcementsLastSeen" : "2000-01-23T04:56:07.000+00:00",
    "orderBookType" : "orderBookType",
    "orderClearImmediate" : false,
    "showLocaleNumbers" : true,
    "chatChannelID" : 1.4658129805029452
  },
  "created" : "2000-01-23T04:56:07.000+00:00",
  "typ" : "typ",
  "ownerId" : 6.02745618307040320615897144307382404804229736328125,
  "affiliateID" : "affiliateID",
  "lastname" : "lastname",
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "phone" : "phone",
  "TFAEnabled" : "TFAEnabled",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "email" : "email",
  "pgpPubKey" : "pgpPubKey",
  "username" : "username"
}}]
     
     - parameter firstname: (form)  (optional)
     - parameter lastname: (form)  (optional)
     - parameter oldPassword: (form)  (optional)
     - parameter newPassword: (form)  (optional)
     - parameter newPasswordConfirm: (form)  (optional)
     - parameter username: (form) Username can only be set once. To reset, email support. (optional)
     - parameter country: (form) Country of residence. (optional)
     - parameter pgpPubKey: (form) PGP Public Key. If specified, automated emails will be sentwith this key. (optional)

     - returns: RequestBuilder<User> 
     */
    open class func userUpdateWithRequestBuilder(firstname: String? = nil, lastname: String? = nil, oldPassword: String? = nil, newPassword: String? = nil, newPasswordConfirm: String? = nil, username: String? = nil, country: String? = nil, pgpPubKey: String? = nil) -> RequestBuilder<User> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "firstname": firstname,
            "lastname": lastname,
            "oldPassword": oldPassword,
            "newPassword": newPassword,
            "newPasswordConfirm": newPasswordConfirm,
            "username": username,
            "country": country,
            "pgpPubKey": pgpPubKey
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
