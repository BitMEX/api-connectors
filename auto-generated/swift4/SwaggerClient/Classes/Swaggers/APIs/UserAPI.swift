//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     Cancel a withdrawal.
     
     - parameter token: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCancelWithdrawal(token: String, completion: @escaping ((_ data: Transaction?,_ error: Error?) -> Void)) {
        userCancelWithdrawalWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel a withdrawal.
     - POST /user/cancelWithdrawal
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter token: (form)  

     - returns: RequestBuilder<Transaction> 
     */
    open class func userCancelWithdrawalWithRequestBuilder(token: String) -> RequestBuilder<Transaction> {
        let path = "/user/cancelWithdrawal"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Transaction>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if a referral code is valid.
     
     - parameter referralCode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCheckReferralCode(referralCode: String? = nil, completion: @escaping ((_ data: Double?,_ error: Error?) -> Void)) {
        userCheckReferralCodeWithRequestBuilder(referralCode: referralCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if a referral code is valid.
     - GET /user/checkReferralCode
     - If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404 or 451 if invalid.
     - examples: [{contentType=application/json, example={
  "infinite": false,
  "naN": false
}}]
     
     - parameter referralCode: (query)  (optional)

     - returns: RequestBuilder<Double> 
     */
    open class func userCheckReferralCodeWithRequestBuilder(referralCode: String? = nil) -> RequestBuilder<Double> {
        let path = "/user/checkReferralCode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "referralCode": referralCode
        ])

        let requestBuilder: RequestBuilder<Double>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register your communication token for mobile clients
     
     - parameter token: (form)  
     - parameter platformAgent: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCommunicationToken(token: String, platformAgent: String, completion: @escaping ((_ data: [CommunicationToken]?,_ error: Error?) -> Void)) {
        userCommunicationTokenWithRequestBuilder(token: token, platformAgent: platformAgent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register your communication token for mobile clients
     - POST /user/communicationToken
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={}}]
     
     - parameter token: (form)  
     - parameter platformAgent: (form)  

     - returns: RequestBuilder<[CommunicationToken]> 
     */
    open class func userCommunicationTokenWithRequestBuilder(token: String, platformAgent: String) -> RequestBuilder<[CommunicationToken]> {
        let path = "/user/communicationToken"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "token": token,
            "platformAgent": platformAgent
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CommunicationToken]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm your email address with a token.
     
     - parameter token: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userConfirm(token: String, completion: @escaping ((_ data: AccessToken?,_ error: Error?) -> Void)) {
        userConfirmWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm your email address with a token.
     - POST /user/confirmEmail
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter token: (form)  

     - returns: RequestBuilder<AccessToken> 
     */
    open class func userConfirmWithRequestBuilder(token: String) -> RequestBuilder<AccessToken> {
        let path = "/user/confirmEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm a withdrawal.
     
     - parameter token: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userConfirmWithdrawal(token: String, completion: @escaping ((_ data: Transaction?,_ error: Error?) -> Void)) {
        userConfirmWithdrawalWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm a withdrawal.
     - POST /user/confirmWithdrawal
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter token: (form)  

     - returns: RequestBuilder<Transaction> 
     */
    open class func userConfirmWithdrawalWithRequestBuilder(token: String) -> RequestBuilder<Transaction> {
        let path = "/user/confirmWithdrawal"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "token": token
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Transaction>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your user model.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGet(completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your user model.
     - GET /user
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<User> 
     */
    open class func userGetWithRequestBuilder() -> RequestBuilder<User> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your current affiliate/referral status.
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetAffiliateStatus(currency: String? = nil, completion: @escaping ((_ data: Affiliate?,_ error: Error?) -> Void)) {
        userGetAffiliateStatusWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your current affiliate/referral status.
     - GET /user/affiliateStatus
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)

     - returns: RequestBuilder<Affiliate> 
     */
    open class func userGetAffiliateStatusWithRequestBuilder(currency: String? = nil) -> RequestBuilder<Affiliate> {
        let path = "/user/affiliateStatus"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<Affiliate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your account's commission status.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetCommission(completion: @escaping ((_ data: UserCommissionsBySymbol?,_ error: Error?) -> Void)) {
        userGetCommissionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your account's commission status.
     - GET /user/commission
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": true}}]

     - returns: RequestBuilder<UserCommissionsBySymbol> 
     */
    open class func userGetCommissionWithRequestBuilder() -> RequestBuilder<UserCommissionsBySymbol> {
        let path = "/user/commission"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserCommissionsBySymbol>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a deposit address.
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60; (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetDepositAddress(currency: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        userGetDepositAddressWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a deposit address.
     - GET /user/depositAddress
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60; (optional, default to XBt)

     - returns: RequestBuilder<String> 
     */
    open class func userGetDepositAddressWithRequestBuilder(currency: String? = nil) -> RequestBuilder<String> {
        let path = "/user/depositAddress"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the execution history by day.
     
     - parameter symbol: (query)  
     - parameter timestamp: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetExecutionHistory(symbol: String, timestamp: Date, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        userGetExecutionHistoryWithRequestBuilder(symbol: symbol, timestamp: timestamp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the execution history by day.
     - GET /user/executionHistory
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter symbol: (query)  
     - parameter timestamp: (query)  

     - returns: RequestBuilder<Any> 
     */
    open class func userGetExecutionHistoryWithRequestBuilder(symbol: String, timestamp: Date) -> RequestBuilder<Any> {
        let path = "/user/executionHistory"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "timestamp": timestamp.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetMargin(currency: String? = nil, completion: @escaping ((_ data: Margin?,_ error: Error?) -> Void)) {
        userGetMarginWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
     - GET /user/margin
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)

     - returns: RequestBuilder<Margin> 
     */
    open class func userGetMarginWithRequestBuilder(currency: String? = nil) -> RequestBuilder<Margin> {
        let path = "/user/margin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<Margin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 7 days worth of Quote Fill Ratio statistics.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetQuoteFillRatio(completion: @escaping ((_ data: QuoteFillRatio?,_ error: Error?) -> Void)) {
        userGetQuoteFillRatioWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 7 days worth of Quote Fill Ratio statistics.
     - GET /user/quoteFillRatio
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<QuoteFillRatio> 
     */
    open class func userGetQuoteFillRatioWithRequestBuilder() -> RequestBuilder<QuoteFillRatio> {
        let path = "/user/quoteFillRatio"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QuoteFillRatio>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Quote Value Ratio statistics over the last 3 days
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetQuoteValueRatio(completion: @escaping ((_ data: QuoteValueRatio?,_ error: Error?) -> Void)) {
        userGetQuoteValueRatioWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Quote Value Ratio statistics over the last 3 days
     - GET /user/quoteValueRatio
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<QuoteValueRatio> 
     */
    open class func userGetQuoteValueRatioWithRequestBuilder() -> RequestBuilder<QuoteValueRatio> {
        let path = "/user/quoteValueRatio"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QuoteValueRatio>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your 30 days USD average trading volume
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetTradingVolume(completion: @escaping ((_ data: TradingVolume?,_ error: Error?) -> Void)) {
        userGetTradingVolumeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your 30 days USD average trading volume
     - GET /user/tradingVolume
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<TradingVolume> 
     */
    open class func userGetTradingVolumeWithRequestBuilder() -> RequestBuilder<TradingVolume> {
        let path = "/user/tradingVolume"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradingVolume>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your current wallet information.
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetWallet(currency: String? = nil, completion: @escaping ((_ data: Wallet?,_ error: Error?) -> Void)) {
        userGetWalletWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your current wallet information.
     - GET /user/wallet
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)

     - returns: RequestBuilder<Wallet> 
     */
    open class func userGetWalletWithRequestBuilder(currency: String? = nil) -> RequestBuilder<Wallet> {
        let path = "/user/wallet"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<Wallet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)
     - parameter count: (query) Number of results to fetch. (optional, default to 100)
     - parameter start: (query) Starting point for results. (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetWalletHistory(currency: String? = nil, count: Double? = nil, start: Double? = nil, completion: @escaping ((_ data: [Transaction]?,_ error: Error?) -> Void)) {
        userGetWalletHistoryWithRequestBuilder(currency: currency, count: count, start: start).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     - GET /user/walletHistory
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={}}]
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)
     - parameter count: (query) Number of results to fetch. (optional, default to 100)
     - parameter start: (query) Starting point for results. (optional, default to 0)

     - returns: RequestBuilder<[Transaction]> 
     */
    open class func userGetWalletHistoryWithRequestBuilder(currency: String? = nil, count: Double? = nil, start: Double? = nil) -> RequestBuilder<[Transaction]> {
        let path = "/user/walletHistory"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency, 
            "count": count, 
            "start": start
        ])

        let requestBuilder: RequestBuilder<[Transaction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetWalletSummary(currency: String? = nil, completion: @escaping ((_ data: [Transaction]?,_ error: Error?) -> Void)) {
        userGetWalletSummaryWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     - GET /user/walletSummary
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={}}]
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;, &#x60;all&#x60; (optional, default to XBt)

     - returns: RequestBuilder<[Transaction]> 
     */
    open class func userGetWalletSummaryWithRequestBuilder(currency: String? = nil) -> RequestBuilder<[Transaction]> {
        let path = "/user/walletSummary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency
        ])

        let requestBuilder: RequestBuilder<[Transaction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Log out of BitMEX.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userLogout(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userLogoutWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Log out of BitMEX.
     - POST /user/logout

     - returns: RequestBuilder<Void> 
     */
    open class func userLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the minimum, maximum, and recommended withdrawal fees for a currency.
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60; (optional, default to XBt)
     - parameter amount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userMinWithdrawalFee(currency: String? = nil, amount: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        userMinWithdrawalFeeWithRequestBuilder(currency: currency, amount: amount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the minimum, maximum, and recommended withdrawal fees for a currency.
     - GET /user/minWithdrawalFee
     - This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.  The \"fee\" field is the recommended fee for fast confirmation on the blockchain.
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter currency: (query) Options: &#x60;XBt&#x60;, &#x60;USDt&#x60; (optional, default to XBt)
     - parameter amount: (query)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func userMinWithdrawalFeeWithRequestBuilder(currency: String? = nil, amount: Double? = nil) -> RequestBuilder<Any> {
        let path = "/user/minWithdrawalFee"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency, 
            "amount": amount
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Request a withdrawal to an external wallet.
     
     - parameter currency: (form) Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;, &#x60;USDt&#x60; 
     - parameter amount: (form) Amount of withdrawal currency. 
     - parameter otpToken: (form) 2FA token. Required for all external withdrawals. (optional)
     - parameter address: (form) Destination Address. One of &#x60;address&#x60;, &#x60;addressId&#x60;, &#x60;targetUserId&#x60; has to be specified. (optional)
     - parameter addressId: (form) ID of the Destination Address. One of &#x60;address&#x60;, &#x60;targetUserId&#x60;, &#x60;targetUserId&#x60; has to be specified. (optional)
     - parameter targetUserId: (form) ID of the Target User. One of &#x60;address&#x60;, &#x60;addressId&#x60;, &#x60;targetUserId&#x60; has to be specified. (optional)
     - parameter fee: (form) Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)
     - parameter text: (form) Optional annotation, e.g. &#39;Transfer to home wallet&#39;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userRequestWithdrawal(currency: String, amount: Double, otpToken: String? = nil, address: String? = nil, addressId: Double? = nil, targetUserId: Double? = nil, fee: Double? = nil, text: String? = nil, completion: @escaping ((_ data: Transaction?,_ error: Error?) -> Void)) {
        userRequestWithdrawalWithRequestBuilder(currency: currency, amount: amount, otpToken: otpToken, address: address, addressId: addressId, targetUserId: targetUserId, fee: fee, text: text).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Request a withdrawal to an external wallet.
     - POST /user/requestWithdrawal
     - This will send a confirmation email to the email address on record.
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter currency: (form) Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;, &#x60;USDt&#x60; 
     - parameter amount: (form) Amount of withdrawal currency. 
     - parameter otpToken: (form) 2FA token. Required for all external withdrawals. (optional)
     - parameter address: (form) Destination Address. One of &#x60;address&#x60;, &#x60;addressId&#x60;, &#x60;targetUserId&#x60; has to be specified. (optional)
     - parameter addressId: (form) ID of the Destination Address. One of &#x60;address&#x60;, &#x60;targetUserId&#x60;, &#x60;targetUserId&#x60; has to be specified. (optional)
     - parameter targetUserId: (form) ID of the Target User. One of &#x60;address&#x60;, &#x60;addressId&#x60;, &#x60;targetUserId&#x60; has to be specified. (optional)
     - parameter fee: (form) Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)
     - parameter text: (form) Optional annotation, e.g. &#39;Transfer to home wallet&#39;. (optional)

     - returns: RequestBuilder<Transaction> 
     */
    open class func userRequestWithdrawalWithRequestBuilder(currency: String, amount: Double, otpToken: String? = nil, address: String? = nil, addressId: Double? = nil, targetUserId: Double? = nil, fee: Double? = nil, text: String? = nil) -> RequestBuilder<Transaction> {
        let path = "/user/requestWithdrawal"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "otpToken": otpToken,
            "currency": currency,
            "amount": amount,
            "address": address,
            "addressId": addressId,
            "targetUserId": targetUserId,
            "fee": fee,
            "text": text
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Transaction>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Save user preferences.
     
     - parameter prefs: (form)  
     - parameter overwrite: (form) If true, will overwrite all existing preferences. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSavePreferences(prefs: String, overwrite: Bool? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userSavePreferencesWithRequestBuilder(prefs: prefs, overwrite: overwrite).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Save user preferences.
     - POST /user/preferences
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter prefs: (form)  
     - parameter overwrite: (form) If true, will overwrite all existing preferences. (optional, default to false)

     - returns: RequestBuilder<User> 
     */
    open class func userSavePreferencesWithRequestBuilder(prefs: String, overwrite: Bool? = nil) -> RequestBuilder<User> {
        let path = "/user/preferences"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "prefs": prefs,
            "overwrite": overwrite
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
