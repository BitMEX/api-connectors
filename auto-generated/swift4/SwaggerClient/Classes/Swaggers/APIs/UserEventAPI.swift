//
// UserEventAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserEventAPI {
    /**
     Get your user events
     
     - parameter count: (query) Number of results to fetch. (optional, default to 150)
     - parameter startId: (query) Cursor for pagination. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userEventGet(count: Double? = nil, startId: Double? = nil, completion: @escaping ((_ data: [UserEvent]?,_ error: Error?) -> Void)) {
        userEventGetWithRequestBuilder(count: count, startId: startId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your user events
     - GET /userEvent
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={}}]
     
     - parameter count: (query) Number of results to fetch. (optional, default to 150)
     - parameter startId: (query) Cursor for pagination. (optional)

     - returns: RequestBuilder<[UserEvent]> 
     */
    open class func userEventGetWithRequestBuilder(count: Double? = nil, startId: Double? = nil) -> RequestBuilder<[UserEvent]> {
        let path = "/userEvent"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count, 
            "startId": startId
        ])

        let requestBuilder: RequestBuilder<[UserEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
