/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://localhost/api/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

/**
* Persistent API Keys for Developers
*/
export class APIKey {
    'id': string;
    'secret': string;
    'name': string;
    'nonce': number;
    'cidr'?: string;
    'permissions'?: Array<XAny>;
    'enabled'?: boolean;
    'userId': number;
    'created'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "secret",
            "baseName": "secret",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nonce",
            "baseName": "nonce",
            "type": "number"
        },
        {
            "name": "cidr",
            "baseName": "cidr",
            "type": "string"
        },
        {
            "name": "permissions",
            "baseName": "permissions",
            "type": "Array<XAny>"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "number"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return APIKey.attributeTypeMap;
    }
}

export class AccessToken {
    'id': string;
    /**
    * time to live in seconds (2 weeks by default)
    */
    'ttl'?: number;
    'created'?: Date;
    'userId'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "ttl",
            "baseName": "ttl",
            "type": "number"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date"
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return AccessToken.attributeTypeMap;
    }
}

export class Affiliate {
    'account': number;
    'currency': string;
    'prevPayout'?: number;
    'prevTurnover'?: number;
    'prevComm'?: number;
    'prevTimestamp'?: Date;
    'execTurnover'?: number;
    'execComm'?: number;
    'totalReferrals'?: number;
    'totalTurnover'?: number;
    'totalComm'?: number;
    'payoutPcnt'?: number;
    'pendingPayout'?: number;
    'timestamp'?: Date;
    'referrerAccount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "prevPayout",
            "baseName": "prevPayout",
            "type": "number"
        },
        {
            "name": "prevTurnover",
            "baseName": "prevTurnover",
            "type": "number"
        },
        {
            "name": "prevComm",
            "baseName": "prevComm",
            "type": "number"
        },
        {
            "name": "prevTimestamp",
            "baseName": "prevTimestamp",
            "type": "Date"
        },
        {
            "name": "execTurnover",
            "baseName": "execTurnover",
            "type": "number"
        },
        {
            "name": "execComm",
            "baseName": "execComm",
            "type": "number"
        },
        {
            "name": "totalReferrals",
            "baseName": "totalReferrals",
            "type": "number"
        },
        {
            "name": "totalTurnover",
            "baseName": "totalTurnover",
            "type": "number"
        },
        {
            "name": "totalComm",
            "baseName": "totalComm",
            "type": "number"
        },
        {
            "name": "payoutPcnt",
            "baseName": "payoutPcnt",
            "type": "number"
        },
        {
            "name": "pendingPayout",
            "baseName": "pendingPayout",
            "type": "number"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "referrerAccount",
            "baseName": "referrerAccount",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Affiliate.attributeTypeMap;
    }
}

/**
* Public Announcements
*/
export class Announcement {
    'id': number;
    'link'?: string;
    'title'?: string;
    'content'?: string;
    'date'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "link",
            "baseName": "link",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Announcement.attributeTypeMap;
    }
}

/**
* Trollbox Data
*/
export class Chat {
    'id'?: number;
    'date': Date;
    'user': string;
    'message': string;
    'html': string;
    'fromBot'?: boolean;
    'channelID'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "Date"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "html",
            "baseName": "html",
            "type": "string"
        },
        {
            "name": "fromBot",
            "baseName": "fromBot",
            "type": "boolean"
        },
        {
            "name": "channelID",
            "baseName": "channelID",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Chat.attributeTypeMap;
    }
}

export class ChatChannel {
    'id'?: number;
    'name': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ChatChannel.attributeTypeMap;
    }
}

export class ConnectedUsers {
    'users'?: number;
    'bots'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "users",
            "baseName": "users",
            "type": "number"
        },
        {
            "name": "bots",
            "baseName": "bots",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ConnectedUsers.attributeTypeMap;
    }
}

export class ErrorError {
    'message'?: string;
    'name'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ErrorError.attributeTypeMap;
    }
}

/**
* Raw Order and Balance Data
*/
export class Execution {
    'execID': string;
    'orderID'?: string;
    'clOrdID'?: string;
    'clOrdLinkID'?: string;
    'account'?: number;
    'symbol'?: string;
    'side'?: string;
    'lastQty'?: number;
    'lastPx'?: number;
    'underlyingLastPx'?: number;
    'lastMkt'?: string;
    'lastLiquidityInd'?: string;
    'simpleOrderQty'?: number;
    'orderQty'?: number;
    'price'?: number;
    'displayQty'?: number;
    'stopPx'?: number;
    'pegOffsetValue'?: number;
    'pegPriceType'?: string;
    'currency'?: string;
    'settlCurrency'?: string;
    'execType'?: string;
    'ordType'?: string;
    'timeInForce'?: string;
    'execInst'?: string;
    'contingencyType'?: string;
    'exDestination'?: string;
    'ordStatus'?: string;
    'triggered'?: string;
    'workingIndicator'?: boolean;
    'ordRejReason'?: string;
    'simpleLeavesQty'?: number;
    'leavesQty'?: number;
    'simpleCumQty'?: number;
    'cumQty'?: number;
    'avgPx'?: number;
    'commission'?: number;
    'tradePublishIndicator'?: string;
    'multiLegReportingType'?: string;
    'text'?: string;
    'trdMatchID'?: string;
    'execCost'?: number;
    'execComm'?: number;
    'homeNotional'?: number;
    'foreignNotional'?: number;
    'transactTime'?: Date;
    'timestamp'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "execID",
            "baseName": "execID",
            "type": "string"
        },
        {
            "name": "orderID",
            "baseName": "orderID",
            "type": "string"
        },
        {
            "name": "clOrdID",
            "baseName": "clOrdID",
            "type": "string"
        },
        {
            "name": "clOrdLinkID",
            "baseName": "clOrdLinkID",
            "type": "string"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "number"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "side",
            "baseName": "side",
            "type": "string"
        },
        {
            "name": "lastQty",
            "baseName": "lastQty",
            "type": "number"
        },
        {
            "name": "lastPx",
            "baseName": "lastPx",
            "type": "number"
        },
        {
            "name": "underlyingLastPx",
            "baseName": "underlyingLastPx",
            "type": "number"
        },
        {
            "name": "lastMkt",
            "baseName": "lastMkt",
            "type": "string"
        },
        {
            "name": "lastLiquidityInd",
            "baseName": "lastLiquidityInd",
            "type": "string"
        },
        {
            "name": "simpleOrderQty",
            "baseName": "simpleOrderQty",
            "type": "number"
        },
        {
            "name": "orderQty",
            "baseName": "orderQty",
            "type": "number"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "displayQty",
            "baseName": "displayQty",
            "type": "number"
        },
        {
            "name": "stopPx",
            "baseName": "stopPx",
            "type": "number"
        },
        {
            "name": "pegOffsetValue",
            "baseName": "pegOffsetValue",
            "type": "number"
        },
        {
            "name": "pegPriceType",
            "baseName": "pegPriceType",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "settlCurrency",
            "baseName": "settlCurrency",
            "type": "string"
        },
        {
            "name": "execType",
            "baseName": "execType",
            "type": "string"
        },
        {
            "name": "ordType",
            "baseName": "ordType",
            "type": "string"
        },
        {
            "name": "timeInForce",
            "baseName": "timeInForce",
            "type": "string"
        },
        {
            "name": "execInst",
            "baseName": "execInst",
            "type": "string"
        },
        {
            "name": "contingencyType",
            "baseName": "contingencyType",
            "type": "string"
        },
        {
            "name": "exDestination",
            "baseName": "exDestination",
            "type": "string"
        },
        {
            "name": "ordStatus",
            "baseName": "ordStatus",
            "type": "string"
        },
        {
            "name": "triggered",
            "baseName": "triggered",
            "type": "string"
        },
        {
            "name": "workingIndicator",
            "baseName": "workingIndicator",
            "type": "boolean"
        },
        {
            "name": "ordRejReason",
            "baseName": "ordRejReason",
            "type": "string"
        },
        {
            "name": "simpleLeavesQty",
            "baseName": "simpleLeavesQty",
            "type": "number"
        },
        {
            "name": "leavesQty",
            "baseName": "leavesQty",
            "type": "number"
        },
        {
            "name": "simpleCumQty",
            "baseName": "simpleCumQty",
            "type": "number"
        },
        {
            "name": "cumQty",
            "baseName": "cumQty",
            "type": "number"
        },
        {
            "name": "avgPx",
            "baseName": "avgPx",
            "type": "number"
        },
        {
            "name": "commission",
            "baseName": "commission",
            "type": "number"
        },
        {
            "name": "tradePublishIndicator",
            "baseName": "tradePublishIndicator",
            "type": "string"
        },
        {
            "name": "multiLegReportingType",
            "baseName": "multiLegReportingType",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "trdMatchID",
            "baseName": "trdMatchID",
            "type": "string"
        },
        {
            "name": "execCost",
            "baseName": "execCost",
            "type": "number"
        },
        {
            "name": "execComm",
            "baseName": "execComm",
            "type": "number"
        },
        {
            "name": "homeNotional",
            "baseName": "homeNotional",
            "type": "number"
        },
        {
            "name": "foreignNotional",
            "baseName": "foreignNotional",
            "type": "number"
        },
        {
            "name": "transactTime",
            "baseName": "transactTime",
            "type": "Date"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Execution.attributeTypeMap;
    }
}

/**
* Swap Funding History
*/
export class Funding {
    'timestamp': Date;
    'symbol': string;
    'fundingInterval'?: Date;
    'fundingRate'?: number;
    'fundingRateDaily'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "fundingInterval",
            "baseName": "fundingInterval",
            "type": "Date"
        },
        {
            "name": "fundingRate",
            "baseName": "fundingRate",
            "type": "number"
        },
        {
            "name": "fundingRateDaily",
            "baseName": "fundingRateDaily",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Funding.attributeTypeMap;
    }
}

export class IndexComposite {
    'timestamp': Date;
    'symbol'?: string;
    'indexSymbol'?: string;
    'reference'?: string;
    'lastPrice'?: number;
    'weight'?: number;
    'logged'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "indexSymbol",
            "baseName": "indexSymbol",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "lastPrice",
            "baseName": "lastPrice",
            "type": "number"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "number"
        },
        {
            "name": "logged",
            "baseName": "logged",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return IndexComposite.attributeTypeMap;
    }
}

export class InlineResponse200 {
    'success'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return InlineResponse200.attributeTypeMap;
    }
}

export class InlineResponse2001 {
    'name'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return InlineResponse2001.attributeTypeMap;
    }
}

/**
* Tradeable Contracts, Indices, and History
*/
export class Instrument {
    'symbol': string;
    'rootSymbol'?: string;
    'state'?: string;
    'typ'?: string;
    'listing'?: Date;
    'front'?: Date;
    'expiry'?: Date;
    'settle'?: Date;
    'relistInterval'?: Date;
    'inverseLeg'?: string;
    'sellLeg'?: string;
    'buyLeg'?: string;
    'optionStrikePcnt'?: number;
    'optionStrikeRound'?: number;
    'optionStrikePrice'?: number;
    'optionMultiplier'?: number;
    'positionCurrency'?: string;
    'underlying'?: string;
    'quoteCurrency'?: string;
    'underlyingSymbol'?: string;
    'reference'?: string;
    'referenceSymbol'?: string;
    'calcInterval'?: Date;
    'publishInterval'?: Date;
    'publishTime'?: Date;
    'maxOrderQty'?: number;
    'maxPrice'?: number;
    'lotSize'?: number;
    'tickSize'?: number;
    'multiplier'?: number;
    'settlCurrency'?: string;
    'underlyingToPositionMultiplier'?: number;
    'underlyingToSettleMultiplier'?: number;
    'quoteToSettleMultiplier'?: number;
    'isQuanto'?: boolean;
    'isInverse'?: boolean;
    'initMargin'?: number;
    'maintMargin'?: number;
    'riskLimit'?: number;
    'riskStep'?: number;
    'limit'?: number;
    'capped'?: boolean;
    'taxed'?: boolean;
    'deleverage'?: boolean;
    'makerFee'?: number;
    'takerFee'?: number;
    'settlementFee'?: number;
    'insuranceFee'?: number;
    'fundingBaseSymbol'?: string;
    'fundingQuoteSymbol'?: string;
    'fundingPremiumSymbol'?: string;
    'fundingTimestamp'?: Date;
    'fundingInterval'?: Date;
    'fundingRate'?: number;
    'indicativeFundingRate'?: number;
    'rebalanceTimestamp'?: Date;
    'rebalanceInterval'?: Date;
    'openingTimestamp'?: Date;
    'closingTimestamp'?: Date;
    'sessionInterval'?: Date;
    'prevClosePrice'?: number;
    'limitDownPrice'?: number;
    'limitUpPrice'?: number;
    'bankruptLimitDownPrice'?: number;
    'bankruptLimitUpPrice'?: number;
    'prevTotalVolume'?: number;
    'totalVolume'?: number;
    'volume'?: number;
    'volume24h'?: number;
    'prevTotalTurnover'?: number;
    'totalTurnover'?: number;
    'turnover'?: number;
    'turnover24h'?: number;
    'prevPrice24h'?: number;
    'vwap'?: number;
    'highPrice'?: number;
    'lowPrice'?: number;
    'lastPrice'?: number;
    'lastPriceProtected'?: number;
    'lastTickDirection'?: string;
    'lastChangePcnt'?: number;
    'bidPrice'?: number;
    'midPrice'?: number;
    'askPrice'?: number;
    'impactBidPrice'?: number;
    'impactMidPrice'?: number;
    'impactAskPrice'?: number;
    'hasLiquidity'?: boolean;
    'openInterest'?: number;
    'openValue'?: number;
    'fairMethod'?: string;
    'fairBasisRate'?: number;
    'fairBasis'?: number;
    'fairPrice'?: number;
    'markMethod'?: string;
    'markPrice'?: number;
    'indicativeTaxRate'?: number;
    'indicativeSettlePrice'?: number;
    'optionUnderlyingPrice'?: number;
    'settledPrice'?: number;
    'timestamp'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "rootSymbol",
            "baseName": "rootSymbol",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "typ",
            "baseName": "typ",
            "type": "string"
        },
        {
            "name": "listing",
            "baseName": "listing",
            "type": "Date"
        },
        {
            "name": "front",
            "baseName": "front",
            "type": "Date"
        },
        {
            "name": "expiry",
            "baseName": "expiry",
            "type": "Date"
        },
        {
            "name": "settle",
            "baseName": "settle",
            "type": "Date"
        },
        {
            "name": "relistInterval",
            "baseName": "relistInterval",
            "type": "Date"
        },
        {
            "name": "inverseLeg",
            "baseName": "inverseLeg",
            "type": "string"
        },
        {
            "name": "sellLeg",
            "baseName": "sellLeg",
            "type": "string"
        },
        {
            "name": "buyLeg",
            "baseName": "buyLeg",
            "type": "string"
        },
        {
            "name": "optionStrikePcnt",
            "baseName": "optionStrikePcnt",
            "type": "number"
        },
        {
            "name": "optionStrikeRound",
            "baseName": "optionStrikeRound",
            "type": "number"
        },
        {
            "name": "optionStrikePrice",
            "baseName": "optionStrikePrice",
            "type": "number"
        },
        {
            "name": "optionMultiplier",
            "baseName": "optionMultiplier",
            "type": "number"
        },
        {
            "name": "positionCurrency",
            "baseName": "positionCurrency",
            "type": "string"
        },
        {
            "name": "underlying",
            "baseName": "underlying",
            "type": "string"
        },
        {
            "name": "quoteCurrency",
            "baseName": "quoteCurrency",
            "type": "string"
        },
        {
            "name": "underlyingSymbol",
            "baseName": "underlyingSymbol",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "referenceSymbol",
            "baseName": "referenceSymbol",
            "type": "string"
        },
        {
            "name": "calcInterval",
            "baseName": "calcInterval",
            "type": "Date"
        },
        {
            "name": "publishInterval",
            "baseName": "publishInterval",
            "type": "Date"
        },
        {
            "name": "publishTime",
            "baseName": "publishTime",
            "type": "Date"
        },
        {
            "name": "maxOrderQty",
            "baseName": "maxOrderQty",
            "type": "number"
        },
        {
            "name": "maxPrice",
            "baseName": "maxPrice",
            "type": "number"
        },
        {
            "name": "lotSize",
            "baseName": "lotSize",
            "type": "number"
        },
        {
            "name": "tickSize",
            "baseName": "tickSize",
            "type": "number"
        },
        {
            "name": "multiplier",
            "baseName": "multiplier",
            "type": "number"
        },
        {
            "name": "settlCurrency",
            "baseName": "settlCurrency",
            "type": "string"
        },
        {
            "name": "underlyingToPositionMultiplier",
            "baseName": "underlyingToPositionMultiplier",
            "type": "number"
        },
        {
            "name": "underlyingToSettleMultiplier",
            "baseName": "underlyingToSettleMultiplier",
            "type": "number"
        },
        {
            "name": "quoteToSettleMultiplier",
            "baseName": "quoteToSettleMultiplier",
            "type": "number"
        },
        {
            "name": "isQuanto",
            "baseName": "isQuanto",
            "type": "boolean"
        },
        {
            "name": "isInverse",
            "baseName": "isInverse",
            "type": "boolean"
        },
        {
            "name": "initMargin",
            "baseName": "initMargin",
            "type": "number"
        },
        {
            "name": "maintMargin",
            "baseName": "maintMargin",
            "type": "number"
        },
        {
            "name": "riskLimit",
            "baseName": "riskLimit",
            "type": "number"
        },
        {
            "name": "riskStep",
            "baseName": "riskStep",
            "type": "number"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "capped",
            "baseName": "capped",
            "type": "boolean"
        },
        {
            "name": "taxed",
            "baseName": "taxed",
            "type": "boolean"
        },
        {
            "name": "deleverage",
            "baseName": "deleverage",
            "type": "boolean"
        },
        {
            "name": "makerFee",
            "baseName": "makerFee",
            "type": "number"
        },
        {
            "name": "takerFee",
            "baseName": "takerFee",
            "type": "number"
        },
        {
            "name": "settlementFee",
            "baseName": "settlementFee",
            "type": "number"
        },
        {
            "name": "insuranceFee",
            "baseName": "insuranceFee",
            "type": "number"
        },
        {
            "name": "fundingBaseSymbol",
            "baseName": "fundingBaseSymbol",
            "type": "string"
        },
        {
            "name": "fundingQuoteSymbol",
            "baseName": "fundingQuoteSymbol",
            "type": "string"
        },
        {
            "name": "fundingPremiumSymbol",
            "baseName": "fundingPremiumSymbol",
            "type": "string"
        },
        {
            "name": "fundingTimestamp",
            "baseName": "fundingTimestamp",
            "type": "Date"
        },
        {
            "name": "fundingInterval",
            "baseName": "fundingInterval",
            "type": "Date"
        },
        {
            "name": "fundingRate",
            "baseName": "fundingRate",
            "type": "number"
        },
        {
            "name": "indicativeFundingRate",
            "baseName": "indicativeFundingRate",
            "type": "number"
        },
        {
            "name": "rebalanceTimestamp",
            "baseName": "rebalanceTimestamp",
            "type": "Date"
        },
        {
            "name": "rebalanceInterval",
            "baseName": "rebalanceInterval",
            "type": "Date"
        },
        {
            "name": "openingTimestamp",
            "baseName": "openingTimestamp",
            "type": "Date"
        },
        {
            "name": "closingTimestamp",
            "baseName": "closingTimestamp",
            "type": "Date"
        },
        {
            "name": "sessionInterval",
            "baseName": "sessionInterval",
            "type": "Date"
        },
        {
            "name": "prevClosePrice",
            "baseName": "prevClosePrice",
            "type": "number"
        },
        {
            "name": "limitDownPrice",
            "baseName": "limitDownPrice",
            "type": "number"
        },
        {
            "name": "limitUpPrice",
            "baseName": "limitUpPrice",
            "type": "number"
        },
        {
            "name": "bankruptLimitDownPrice",
            "baseName": "bankruptLimitDownPrice",
            "type": "number"
        },
        {
            "name": "bankruptLimitUpPrice",
            "baseName": "bankruptLimitUpPrice",
            "type": "number"
        },
        {
            "name": "prevTotalVolume",
            "baseName": "prevTotalVolume",
            "type": "number"
        },
        {
            "name": "totalVolume",
            "baseName": "totalVolume",
            "type": "number"
        },
        {
            "name": "volume",
            "baseName": "volume",
            "type": "number"
        },
        {
            "name": "volume24h",
            "baseName": "volume24h",
            "type": "number"
        },
        {
            "name": "prevTotalTurnover",
            "baseName": "prevTotalTurnover",
            "type": "number"
        },
        {
            "name": "totalTurnover",
            "baseName": "totalTurnover",
            "type": "number"
        },
        {
            "name": "turnover",
            "baseName": "turnover",
            "type": "number"
        },
        {
            "name": "turnover24h",
            "baseName": "turnover24h",
            "type": "number"
        },
        {
            "name": "prevPrice24h",
            "baseName": "prevPrice24h",
            "type": "number"
        },
        {
            "name": "vwap",
            "baseName": "vwap",
            "type": "number"
        },
        {
            "name": "highPrice",
            "baseName": "highPrice",
            "type": "number"
        },
        {
            "name": "lowPrice",
            "baseName": "lowPrice",
            "type": "number"
        },
        {
            "name": "lastPrice",
            "baseName": "lastPrice",
            "type": "number"
        },
        {
            "name": "lastPriceProtected",
            "baseName": "lastPriceProtected",
            "type": "number"
        },
        {
            "name": "lastTickDirection",
            "baseName": "lastTickDirection",
            "type": "string"
        },
        {
            "name": "lastChangePcnt",
            "baseName": "lastChangePcnt",
            "type": "number"
        },
        {
            "name": "bidPrice",
            "baseName": "bidPrice",
            "type": "number"
        },
        {
            "name": "midPrice",
            "baseName": "midPrice",
            "type": "number"
        },
        {
            "name": "askPrice",
            "baseName": "askPrice",
            "type": "number"
        },
        {
            "name": "impactBidPrice",
            "baseName": "impactBidPrice",
            "type": "number"
        },
        {
            "name": "impactMidPrice",
            "baseName": "impactMidPrice",
            "type": "number"
        },
        {
            "name": "impactAskPrice",
            "baseName": "impactAskPrice",
            "type": "number"
        },
        {
            "name": "hasLiquidity",
            "baseName": "hasLiquidity",
            "type": "boolean"
        },
        {
            "name": "openInterest",
            "baseName": "openInterest",
            "type": "number"
        },
        {
            "name": "openValue",
            "baseName": "openValue",
            "type": "number"
        },
        {
            "name": "fairMethod",
            "baseName": "fairMethod",
            "type": "string"
        },
        {
            "name": "fairBasisRate",
            "baseName": "fairBasisRate",
            "type": "number"
        },
        {
            "name": "fairBasis",
            "baseName": "fairBasis",
            "type": "number"
        },
        {
            "name": "fairPrice",
            "baseName": "fairPrice",
            "type": "number"
        },
        {
            "name": "markMethod",
            "baseName": "markMethod",
            "type": "string"
        },
        {
            "name": "markPrice",
            "baseName": "markPrice",
            "type": "number"
        },
        {
            "name": "indicativeTaxRate",
            "baseName": "indicativeTaxRate",
            "type": "number"
        },
        {
            "name": "indicativeSettlePrice",
            "baseName": "indicativeSettlePrice",
            "type": "number"
        },
        {
            "name": "optionUnderlyingPrice",
            "baseName": "optionUnderlyingPrice",
            "type": "number"
        },
        {
            "name": "settledPrice",
            "baseName": "settledPrice",
            "type": "number"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Instrument.attributeTypeMap;
    }
}

export class InstrumentInterval {
    'intervals': Array<string>;
    'symbols': Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "intervals",
            "baseName": "intervals",
            "type": "Array<string>"
        },
        {
            "name": "symbols",
            "baseName": "symbols",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return InstrumentInterval.attributeTypeMap;
    }
}

/**
* Insurance Fund Data
*/
export class Insurance {
    'currency': string;
    'timestamp': Date;
    'walletBalance'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "walletBalance",
            "baseName": "walletBalance",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Insurance.attributeTypeMap;
    }
}

/**
* Information on Top Users
*/
export class Leaderboard {
    'name': string;
    'isRealName'?: boolean;
    'profit'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "isRealName",
            "baseName": "isRealName",
            "type": "boolean"
        },
        {
            "name": "profit",
            "baseName": "profit",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Leaderboard.attributeTypeMap;
    }
}

/**
* Active Liquidations
*/
export class Liquidation {
    'orderID': string;
    'symbol'?: string;
    'side'?: string;
    'price'?: number;
    'leavesQty'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "orderID",
            "baseName": "orderID",
            "type": "string"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "side",
            "baseName": "side",
            "type": "string"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "leavesQty",
            "baseName": "leavesQty",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Liquidation.attributeTypeMap;
    }
}

export class Margin {
    'account': number;
    'currency': string;
    'riskLimit'?: number;
    'prevState'?: string;
    'state'?: string;
    'action'?: string;
    'amount'?: number;
    'pendingCredit'?: number;
    'pendingDebit'?: number;
    'confirmedDebit'?: number;
    'prevRealisedPnl'?: number;
    'prevUnrealisedPnl'?: number;
    'grossComm'?: number;
    'grossOpenCost'?: number;
    'grossOpenPremium'?: number;
    'grossExecCost'?: number;
    'grossMarkValue'?: number;
    'riskValue'?: number;
    'taxableMargin'?: number;
    'initMargin'?: number;
    'maintMargin'?: number;
    'sessionMargin'?: number;
    'targetExcessMargin'?: number;
    'varMargin'?: number;
    'realisedPnl'?: number;
    'unrealisedPnl'?: number;
    'indicativeTax'?: number;
    'unrealisedProfit'?: number;
    'syntheticMargin'?: number;
    'walletBalance'?: number;
    'marginBalance'?: number;
    'marginBalancePcnt'?: number;
    'marginLeverage'?: number;
    'marginUsedPcnt'?: number;
    'excessMargin'?: number;
    'excessMarginPcnt'?: number;
    'availableMargin'?: number;
    'withdrawableMargin'?: number;
    'timestamp'?: Date;
    'grossLastValue'?: number;
    'commission'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "riskLimit",
            "baseName": "riskLimit",
            "type": "number"
        },
        {
            "name": "prevState",
            "baseName": "prevState",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "pendingCredit",
            "baseName": "pendingCredit",
            "type": "number"
        },
        {
            "name": "pendingDebit",
            "baseName": "pendingDebit",
            "type": "number"
        },
        {
            "name": "confirmedDebit",
            "baseName": "confirmedDebit",
            "type": "number"
        },
        {
            "name": "prevRealisedPnl",
            "baseName": "prevRealisedPnl",
            "type": "number"
        },
        {
            "name": "prevUnrealisedPnl",
            "baseName": "prevUnrealisedPnl",
            "type": "number"
        },
        {
            "name": "grossComm",
            "baseName": "grossComm",
            "type": "number"
        },
        {
            "name": "grossOpenCost",
            "baseName": "grossOpenCost",
            "type": "number"
        },
        {
            "name": "grossOpenPremium",
            "baseName": "grossOpenPremium",
            "type": "number"
        },
        {
            "name": "grossExecCost",
            "baseName": "grossExecCost",
            "type": "number"
        },
        {
            "name": "grossMarkValue",
            "baseName": "grossMarkValue",
            "type": "number"
        },
        {
            "name": "riskValue",
            "baseName": "riskValue",
            "type": "number"
        },
        {
            "name": "taxableMargin",
            "baseName": "taxableMargin",
            "type": "number"
        },
        {
            "name": "initMargin",
            "baseName": "initMargin",
            "type": "number"
        },
        {
            "name": "maintMargin",
            "baseName": "maintMargin",
            "type": "number"
        },
        {
            "name": "sessionMargin",
            "baseName": "sessionMargin",
            "type": "number"
        },
        {
            "name": "targetExcessMargin",
            "baseName": "targetExcessMargin",
            "type": "number"
        },
        {
            "name": "varMargin",
            "baseName": "varMargin",
            "type": "number"
        },
        {
            "name": "realisedPnl",
            "baseName": "realisedPnl",
            "type": "number"
        },
        {
            "name": "unrealisedPnl",
            "baseName": "unrealisedPnl",
            "type": "number"
        },
        {
            "name": "indicativeTax",
            "baseName": "indicativeTax",
            "type": "number"
        },
        {
            "name": "unrealisedProfit",
            "baseName": "unrealisedProfit",
            "type": "number"
        },
        {
            "name": "syntheticMargin",
            "baseName": "syntheticMargin",
            "type": "number"
        },
        {
            "name": "walletBalance",
            "baseName": "walletBalance",
            "type": "number"
        },
        {
            "name": "marginBalance",
            "baseName": "marginBalance",
            "type": "number"
        },
        {
            "name": "marginBalancePcnt",
            "baseName": "marginBalancePcnt",
            "type": "number"
        },
        {
            "name": "marginLeverage",
            "baseName": "marginLeverage",
            "type": "number"
        },
        {
            "name": "marginUsedPcnt",
            "baseName": "marginUsedPcnt",
            "type": "number"
        },
        {
            "name": "excessMargin",
            "baseName": "excessMargin",
            "type": "number"
        },
        {
            "name": "excessMarginPcnt",
            "baseName": "excessMarginPcnt",
            "type": "number"
        },
        {
            "name": "availableMargin",
            "baseName": "availableMargin",
            "type": "number"
        },
        {
            "name": "withdrawableMargin",
            "baseName": "withdrawableMargin",
            "type": "number"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "grossLastValue",
            "baseName": "grossLastValue",
            "type": "number"
        },
        {
            "name": "commission",
            "baseName": "commission",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Margin.attributeTypeMap;
    }
}

export class ModelError {
    'error': ErrorError;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "error",
            "baseName": "error",
            "type": "ErrorError"
        }    ];

    static getAttributeTypeMap() {
        return ModelError.attributeTypeMap;
    }
}

/**
* Account Notifications
*/
export class Notification {
    'id'?: number;
    'date': Date;
    'title': string;
    'body': string;
    'ttl': number;
    'type'?: Notification.TypeEnum;
    'closable'?: boolean;
    'persist'?: boolean;
    'waitForVisibility'?: boolean;
    'sound'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "Date"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "ttl",
            "baseName": "ttl",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "Notification.TypeEnum"
        },
        {
            "name": "closable",
            "baseName": "closable",
            "type": "boolean"
        },
        {
            "name": "persist",
            "baseName": "persist",
            "type": "boolean"
        },
        {
            "name": "waitForVisibility",
            "baseName": "waitForVisibility",
            "type": "boolean"
        },
        {
            "name": "sound",
            "baseName": "sound",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Notification.attributeTypeMap;
    }
}

export namespace Notification {
    export enum TypeEnum {
        Success = <any> 'success',
        Error = <any> 'error',
        Info = <any> 'info'
    }
}
/**
* Placement, Cancellation, Amending, and History
*/
export class Order {
    'orderID': string;
    'clOrdID'?: string;
    'clOrdLinkID'?: string;
    'account'?: number;
    'symbol'?: string;
    'side'?: string;
    'simpleOrderQty'?: number;
    'orderQty'?: number;
    'price'?: number;
    'displayQty'?: number;
    'stopPx'?: number;
    'pegOffsetValue'?: number;
    'pegPriceType'?: string;
    'currency'?: string;
    'settlCurrency'?: string;
    'ordType'?: string;
    'timeInForce'?: string;
    'execInst'?: string;
    'contingencyType'?: string;
    'exDestination'?: string;
    'ordStatus'?: string;
    'triggered'?: string;
    'workingIndicator'?: boolean;
    'ordRejReason'?: string;
    'simpleLeavesQty'?: number;
    'leavesQty'?: number;
    'simpleCumQty'?: number;
    'cumQty'?: number;
    'avgPx'?: number;
    'multiLegReportingType'?: string;
    'text'?: string;
    'transactTime'?: Date;
    'timestamp'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "orderID",
            "baseName": "orderID",
            "type": "string"
        },
        {
            "name": "clOrdID",
            "baseName": "clOrdID",
            "type": "string"
        },
        {
            "name": "clOrdLinkID",
            "baseName": "clOrdLinkID",
            "type": "string"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "number"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "side",
            "baseName": "side",
            "type": "string"
        },
        {
            "name": "simpleOrderQty",
            "baseName": "simpleOrderQty",
            "type": "number"
        },
        {
            "name": "orderQty",
            "baseName": "orderQty",
            "type": "number"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "displayQty",
            "baseName": "displayQty",
            "type": "number"
        },
        {
            "name": "stopPx",
            "baseName": "stopPx",
            "type": "number"
        },
        {
            "name": "pegOffsetValue",
            "baseName": "pegOffsetValue",
            "type": "number"
        },
        {
            "name": "pegPriceType",
            "baseName": "pegPriceType",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "settlCurrency",
            "baseName": "settlCurrency",
            "type": "string"
        },
        {
            "name": "ordType",
            "baseName": "ordType",
            "type": "string"
        },
        {
            "name": "timeInForce",
            "baseName": "timeInForce",
            "type": "string"
        },
        {
            "name": "execInst",
            "baseName": "execInst",
            "type": "string"
        },
        {
            "name": "contingencyType",
            "baseName": "contingencyType",
            "type": "string"
        },
        {
            "name": "exDestination",
            "baseName": "exDestination",
            "type": "string"
        },
        {
            "name": "ordStatus",
            "baseName": "ordStatus",
            "type": "string"
        },
        {
            "name": "triggered",
            "baseName": "triggered",
            "type": "string"
        },
        {
            "name": "workingIndicator",
            "baseName": "workingIndicator",
            "type": "boolean"
        },
        {
            "name": "ordRejReason",
            "baseName": "ordRejReason",
            "type": "string"
        },
        {
            "name": "simpleLeavesQty",
            "baseName": "simpleLeavesQty",
            "type": "number"
        },
        {
            "name": "leavesQty",
            "baseName": "leavesQty",
            "type": "number"
        },
        {
            "name": "simpleCumQty",
            "baseName": "simpleCumQty",
            "type": "number"
        },
        {
            "name": "cumQty",
            "baseName": "cumQty",
            "type": "number"
        },
        {
            "name": "avgPx",
            "baseName": "avgPx",
            "type": "number"
        },
        {
            "name": "multiLegReportingType",
            "baseName": "multiLegReportingType",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "transactTime",
            "baseName": "transactTime",
            "type": "Date"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Order.attributeTypeMap;
    }
}

export class OrderBookL2 {
    'symbol': string;
    'id': number;
    'side': string;
    'size'?: number;
    'price'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "side",
            "baseName": "side",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return OrderBookL2.attributeTypeMap;
    }
}

/**
* Summary of Open and Closed Positions
*/
export class Position {
    'account': number;
    'symbol': string;
    'currency': string;
    'underlying'?: string;
    'quoteCurrency'?: string;
    'commission'?: number;
    'initMarginReq'?: number;
    'maintMarginReq'?: number;
    'riskLimit'?: number;
    'leverage'?: number;
    'crossMargin'?: boolean;
    'deleveragePercentile'?: number;
    'rebalancedPnl'?: number;
    'prevRealisedPnl'?: number;
    'prevUnrealisedPnl'?: number;
    'prevClosePrice'?: number;
    'openingTimestamp'?: Date;
    'openingQty'?: number;
    'openingCost'?: number;
    'openingComm'?: number;
    'openOrderBuyQty'?: number;
    'openOrderBuyCost'?: number;
    'openOrderBuyPremium'?: number;
    'openOrderSellQty'?: number;
    'openOrderSellCost'?: number;
    'openOrderSellPremium'?: number;
    'execBuyQty'?: number;
    'execBuyCost'?: number;
    'execSellQty'?: number;
    'execSellCost'?: number;
    'execQty'?: number;
    'execCost'?: number;
    'execComm'?: number;
    'currentTimestamp'?: Date;
    'currentQty'?: number;
    'currentCost'?: number;
    'currentComm'?: number;
    'realisedCost'?: number;
    'unrealisedCost'?: number;
    'grossOpenCost'?: number;
    'grossOpenPremium'?: number;
    'grossExecCost'?: number;
    'isOpen'?: boolean;
    'markPrice'?: number;
    'markValue'?: number;
    'riskValue'?: number;
    'homeNotional'?: number;
    'foreignNotional'?: number;
    'posState'?: string;
    'posCost'?: number;
    'posCost2'?: number;
    'posCross'?: number;
    'posInit'?: number;
    'posComm'?: number;
    'posLoss'?: number;
    'posMargin'?: number;
    'posMaint'?: number;
    'posAllowance'?: number;
    'taxableMargin'?: number;
    'initMargin'?: number;
    'maintMargin'?: number;
    'sessionMargin'?: number;
    'targetExcessMargin'?: number;
    'varMargin'?: number;
    'realisedGrossPnl'?: number;
    'realisedTax'?: number;
    'realisedPnl'?: number;
    'unrealisedGrossPnl'?: number;
    'longBankrupt'?: number;
    'shortBankrupt'?: number;
    'taxBase'?: number;
    'indicativeTaxRate'?: number;
    'indicativeTax'?: number;
    'unrealisedTax'?: number;
    'unrealisedPnl'?: number;
    'unrealisedPnlPcnt'?: number;
    'unrealisedRoePcnt'?: number;
    'simpleQty'?: number;
    'simpleCost'?: number;
    'simpleValue'?: number;
    'simplePnl'?: number;
    'simplePnlPcnt'?: number;
    'avgCostPrice'?: number;
    'avgEntryPrice'?: number;
    'breakEvenPrice'?: number;
    'marginCallPrice'?: number;
    'liquidationPrice'?: number;
    'bankruptPrice'?: number;
    'timestamp'?: Date;
    'lastPrice'?: number;
    'lastValue'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "number"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "underlying",
            "baseName": "underlying",
            "type": "string"
        },
        {
            "name": "quoteCurrency",
            "baseName": "quoteCurrency",
            "type": "string"
        },
        {
            "name": "commission",
            "baseName": "commission",
            "type": "number"
        },
        {
            "name": "initMarginReq",
            "baseName": "initMarginReq",
            "type": "number"
        },
        {
            "name": "maintMarginReq",
            "baseName": "maintMarginReq",
            "type": "number"
        },
        {
            "name": "riskLimit",
            "baseName": "riskLimit",
            "type": "number"
        },
        {
            "name": "leverage",
            "baseName": "leverage",
            "type": "number"
        },
        {
            "name": "crossMargin",
            "baseName": "crossMargin",
            "type": "boolean"
        },
        {
            "name": "deleveragePercentile",
            "baseName": "deleveragePercentile",
            "type": "number"
        },
        {
            "name": "rebalancedPnl",
            "baseName": "rebalancedPnl",
            "type": "number"
        },
        {
            "name": "prevRealisedPnl",
            "baseName": "prevRealisedPnl",
            "type": "number"
        },
        {
            "name": "prevUnrealisedPnl",
            "baseName": "prevUnrealisedPnl",
            "type": "number"
        },
        {
            "name": "prevClosePrice",
            "baseName": "prevClosePrice",
            "type": "number"
        },
        {
            "name": "openingTimestamp",
            "baseName": "openingTimestamp",
            "type": "Date"
        },
        {
            "name": "openingQty",
            "baseName": "openingQty",
            "type": "number"
        },
        {
            "name": "openingCost",
            "baseName": "openingCost",
            "type": "number"
        },
        {
            "name": "openingComm",
            "baseName": "openingComm",
            "type": "number"
        },
        {
            "name": "openOrderBuyQty",
            "baseName": "openOrderBuyQty",
            "type": "number"
        },
        {
            "name": "openOrderBuyCost",
            "baseName": "openOrderBuyCost",
            "type": "number"
        },
        {
            "name": "openOrderBuyPremium",
            "baseName": "openOrderBuyPremium",
            "type": "number"
        },
        {
            "name": "openOrderSellQty",
            "baseName": "openOrderSellQty",
            "type": "number"
        },
        {
            "name": "openOrderSellCost",
            "baseName": "openOrderSellCost",
            "type": "number"
        },
        {
            "name": "openOrderSellPremium",
            "baseName": "openOrderSellPremium",
            "type": "number"
        },
        {
            "name": "execBuyQty",
            "baseName": "execBuyQty",
            "type": "number"
        },
        {
            "name": "execBuyCost",
            "baseName": "execBuyCost",
            "type": "number"
        },
        {
            "name": "execSellQty",
            "baseName": "execSellQty",
            "type": "number"
        },
        {
            "name": "execSellCost",
            "baseName": "execSellCost",
            "type": "number"
        },
        {
            "name": "execQty",
            "baseName": "execQty",
            "type": "number"
        },
        {
            "name": "execCost",
            "baseName": "execCost",
            "type": "number"
        },
        {
            "name": "execComm",
            "baseName": "execComm",
            "type": "number"
        },
        {
            "name": "currentTimestamp",
            "baseName": "currentTimestamp",
            "type": "Date"
        },
        {
            "name": "currentQty",
            "baseName": "currentQty",
            "type": "number"
        },
        {
            "name": "currentCost",
            "baseName": "currentCost",
            "type": "number"
        },
        {
            "name": "currentComm",
            "baseName": "currentComm",
            "type": "number"
        },
        {
            "name": "realisedCost",
            "baseName": "realisedCost",
            "type": "number"
        },
        {
            "name": "unrealisedCost",
            "baseName": "unrealisedCost",
            "type": "number"
        },
        {
            "name": "grossOpenCost",
            "baseName": "grossOpenCost",
            "type": "number"
        },
        {
            "name": "grossOpenPremium",
            "baseName": "grossOpenPremium",
            "type": "number"
        },
        {
            "name": "grossExecCost",
            "baseName": "grossExecCost",
            "type": "number"
        },
        {
            "name": "isOpen",
            "baseName": "isOpen",
            "type": "boolean"
        },
        {
            "name": "markPrice",
            "baseName": "markPrice",
            "type": "number"
        },
        {
            "name": "markValue",
            "baseName": "markValue",
            "type": "number"
        },
        {
            "name": "riskValue",
            "baseName": "riskValue",
            "type": "number"
        },
        {
            "name": "homeNotional",
            "baseName": "homeNotional",
            "type": "number"
        },
        {
            "name": "foreignNotional",
            "baseName": "foreignNotional",
            "type": "number"
        },
        {
            "name": "posState",
            "baseName": "posState",
            "type": "string"
        },
        {
            "name": "posCost",
            "baseName": "posCost",
            "type": "number"
        },
        {
            "name": "posCost2",
            "baseName": "posCost2",
            "type": "number"
        },
        {
            "name": "posCross",
            "baseName": "posCross",
            "type": "number"
        },
        {
            "name": "posInit",
            "baseName": "posInit",
            "type": "number"
        },
        {
            "name": "posComm",
            "baseName": "posComm",
            "type": "number"
        },
        {
            "name": "posLoss",
            "baseName": "posLoss",
            "type": "number"
        },
        {
            "name": "posMargin",
            "baseName": "posMargin",
            "type": "number"
        },
        {
            "name": "posMaint",
            "baseName": "posMaint",
            "type": "number"
        },
        {
            "name": "posAllowance",
            "baseName": "posAllowance",
            "type": "number"
        },
        {
            "name": "taxableMargin",
            "baseName": "taxableMargin",
            "type": "number"
        },
        {
            "name": "initMargin",
            "baseName": "initMargin",
            "type": "number"
        },
        {
            "name": "maintMargin",
            "baseName": "maintMargin",
            "type": "number"
        },
        {
            "name": "sessionMargin",
            "baseName": "sessionMargin",
            "type": "number"
        },
        {
            "name": "targetExcessMargin",
            "baseName": "targetExcessMargin",
            "type": "number"
        },
        {
            "name": "varMargin",
            "baseName": "varMargin",
            "type": "number"
        },
        {
            "name": "realisedGrossPnl",
            "baseName": "realisedGrossPnl",
            "type": "number"
        },
        {
            "name": "realisedTax",
            "baseName": "realisedTax",
            "type": "number"
        },
        {
            "name": "realisedPnl",
            "baseName": "realisedPnl",
            "type": "number"
        },
        {
            "name": "unrealisedGrossPnl",
            "baseName": "unrealisedGrossPnl",
            "type": "number"
        },
        {
            "name": "longBankrupt",
            "baseName": "longBankrupt",
            "type": "number"
        },
        {
            "name": "shortBankrupt",
            "baseName": "shortBankrupt",
            "type": "number"
        },
        {
            "name": "taxBase",
            "baseName": "taxBase",
            "type": "number"
        },
        {
            "name": "indicativeTaxRate",
            "baseName": "indicativeTaxRate",
            "type": "number"
        },
        {
            "name": "indicativeTax",
            "baseName": "indicativeTax",
            "type": "number"
        },
        {
            "name": "unrealisedTax",
            "baseName": "unrealisedTax",
            "type": "number"
        },
        {
            "name": "unrealisedPnl",
            "baseName": "unrealisedPnl",
            "type": "number"
        },
        {
            "name": "unrealisedPnlPcnt",
            "baseName": "unrealisedPnlPcnt",
            "type": "number"
        },
        {
            "name": "unrealisedRoePcnt",
            "baseName": "unrealisedRoePcnt",
            "type": "number"
        },
        {
            "name": "simpleQty",
            "baseName": "simpleQty",
            "type": "number"
        },
        {
            "name": "simpleCost",
            "baseName": "simpleCost",
            "type": "number"
        },
        {
            "name": "simpleValue",
            "baseName": "simpleValue",
            "type": "number"
        },
        {
            "name": "simplePnl",
            "baseName": "simplePnl",
            "type": "number"
        },
        {
            "name": "simplePnlPcnt",
            "baseName": "simplePnlPcnt",
            "type": "number"
        },
        {
            "name": "avgCostPrice",
            "baseName": "avgCostPrice",
            "type": "number"
        },
        {
            "name": "avgEntryPrice",
            "baseName": "avgEntryPrice",
            "type": "number"
        },
        {
            "name": "breakEvenPrice",
            "baseName": "breakEvenPrice",
            "type": "number"
        },
        {
            "name": "marginCallPrice",
            "baseName": "marginCallPrice",
            "type": "number"
        },
        {
            "name": "liquidationPrice",
            "baseName": "liquidationPrice",
            "type": "number"
        },
        {
            "name": "bankruptPrice",
            "baseName": "bankruptPrice",
            "type": "number"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "lastPrice",
            "baseName": "lastPrice",
            "type": "number"
        },
        {
            "name": "lastValue",
            "baseName": "lastValue",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Position.attributeTypeMap;
    }
}

/**
* Best Bid/Offer Snapshots & Historical Bins
*/
export class Quote {
    'timestamp': Date;
    'symbol': string;
    'bidSize'?: number;
    'bidPrice'?: number;
    'askPrice'?: number;
    'askSize'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "bidSize",
            "baseName": "bidSize",
            "type": "number"
        },
        {
            "name": "bidPrice",
            "baseName": "bidPrice",
            "type": "number"
        },
        {
            "name": "askPrice",
            "baseName": "askPrice",
            "type": "number"
        },
        {
            "name": "askSize",
            "baseName": "askSize",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Quote.attributeTypeMap;
    }
}

/**
* Historical Settlement Data
*/
export class Settlement {
    'timestamp': Date;
    'symbol': string;
    'settlementType'?: string;
    'settledPrice'?: number;
    'optionStrikePrice'?: number;
    'optionUnderlyingPrice'?: number;
    'bankrupt'?: number;
    'taxBase'?: number;
    'taxRate'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "settlementType",
            "baseName": "settlementType",
            "type": "string"
        },
        {
            "name": "settledPrice",
            "baseName": "settledPrice",
            "type": "number"
        },
        {
            "name": "optionStrikePrice",
            "baseName": "optionStrikePrice",
            "type": "number"
        },
        {
            "name": "optionUnderlyingPrice",
            "baseName": "optionUnderlyingPrice",
            "type": "number"
        },
        {
            "name": "bankrupt",
            "baseName": "bankrupt",
            "type": "number"
        },
        {
            "name": "taxBase",
            "baseName": "taxBase",
            "type": "number"
        },
        {
            "name": "taxRate",
            "baseName": "taxRate",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Settlement.attributeTypeMap;
    }
}

/**
* Exchange Statistics
*/
export class Stats {
    'rootSymbol': string;
    'currency'?: string;
    'volume24h'?: number;
    'turnover24h'?: number;
    'openInterest'?: number;
    'openValue'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rootSymbol",
            "baseName": "rootSymbol",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "volume24h",
            "baseName": "volume24h",
            "type": "number"
        },
        {
            "name": "turnover24h",
            "baseName": "turnover24h",
            "type": "number"
        },
        {
            "name": "openInterest",
            "baseName": "openInterest",
            "type": "number"
        },
        {
            "name": "openValue",
            "baseName": "openValue",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Stats.attributeTypeMap;
    }
}

export class StatsHistory {
    'date': Date;
    'rootSymbol': string;
    'currency'?: string;
    'volume'?: number;
    'turnover'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "date",
            "baseName": "date",
            "type": "Date"
        },
        {
            "name": "rootSymbol",
            "baseName": "rootSymbol",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "volume",
            "baseName": "volume",
            "type": "number"
        },
        {
            "name": "turnover",
            "baseName": "turnover",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return StatsHistory.attributeTypeMap;
    }
}

export class StatsUSD {
    'rootSymbol': string;
    'currency'?: string;
    'turnover24h'?: number;
    'turnover30d'?: number;
    'turnover365d'?: number;
    'turnover'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rootSymbol",
            "baseName": "rootSymbol",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "turnover24h",
            "baseName": "turnover24h",
            "type": "number"
        },
        {
            "name": "turnover30d",
            "baseName": "turnover30d",
            "type": "number"
        },
        {
            "name": "turnover365d",
            "baseName": "turnover365d",
            "type": "number"
        },
        {
            "name": "turnover",
            "baseName": "turnover",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return StatsUSD.attributeTypeMap;
    }
}

/**
* Individual & Bucketed Trades
*/
export class Trade {
    'timestamp': Date;
    'symbol': string;
    'side'?: string;
    'size'?: number;
    'price'?: number;
    'tickDirection'?: string;
    'trdMatchID'?: string;
    'grossValue'?: number;
    'homeNotional'?: number;
    'foreignNotional'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "side",
            "baseName": "side",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "tickDirection",
            "baseName": "tickDirection",
            "type": "string"
        },
        {
            "name": "trdMatchID",
            "baseName": "trdMatchID",
            "type": "string"
        },
        {
            "name": "grossValue",
            "baseName": "grossValue",
            "type": "number"
        },
        {
            "name": "homeNotional",
            "baseName": "homeNotional",
            "type": "number"
        },
        {
            "name": "foreignNotional",
            "baseName": "foreignNotional",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Trade.attributeTypeMap;
    }
}

export class TradeBin {
    'timestamp': Date;
    'symbol': string;
    'open'?: number;
    'high'?: number;
    'low'?: number;
    'close'?: number;
    'trades'?: number;
    'volume'?: number;
    'vwap'?: number;
    'lastSize'?: number;
    'turnover'?: number;
    'homeNotional'?: number;
    'foreignNotional'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "open",
            "baseName": "open",
            "type": "number"
        },
        {
            "name": "high",
            "baseName": "high",
            "type": "number"
        },
        {
            "name": "low",
            "baseName": "low",
            "type": "number"
        },
        {
            "name": "close",
            "baseName": "close",
            "type": "number"
        },
        {
            "name": "trades",
            "baseName": "trades",
            "type": "number"
        },
        {
            "name": "volume",
            "baseName": "volume",
            "type": "number"
        },
        {
            "name": "vwap",
            "baseName": "vwap",
            "type": "number"
        },
        {
            "name": "lastSize",
            "baseName": "lastSize",
            "type": "number"
        },
        {
            "name": "turnover",
            "baseName": "turnover",
            "type": "number"
        },
        {
            "name": "homeNotional",
            "baseName": "homeNotional",
            "type": "number"
        },
        {
            "name": "foreignNotional",
            "baseName": "foreignNotional",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return TradeBin.attributeTypeMap;
    }
}

export class Transaction {
    'transactID': string;
    'account'?: number;
    'currency'?: string;
    'transactType'?: string;
    'amount'?: number;
    'fee'?: number;
    'transactStatus'?: string;
    'address'?: string;
    'tx'?: string;
    'text'?: string;
    'transactTime'?: Date;
    'timestamp'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "transactID",
            "baseName": "transactID",
            "type": "string"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "transactType",
            "baseName": "transactType",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "fee",
            "baseName": "fee",
            "type": "number"
        },
        {
            "name": "transactStatus",
            "baseName": "transactStatus",
            "type": "string"
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "string"
        },
        {
            "name": "tx",
            "baseName": "tx",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "transactTime",
            "baseName": "transactTime",
            "type": "Date"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Transaction.attributeTypeMap;
    }
}

/**
* Account Operations
*/
export class User {
    'id'?: number;
    'ownerId'?: number;
    'firstname'?: string;
    'lastname'?: string;
    'username': string;
    'email': string;
    'phone'?: string;
    'created'?: Date;
    'lastUpdated'?: Date;
    'preferences'?: UserPreferences;
    'tFAEnabled'?: string;
    'affiliateID'?: string;
    'pgpPubKey'?: string;
    'country'?: string;
    'geoipCountry'?: string;
    'geoipRegion'?: string;
    'typ'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "ownerId",
            "baseName": "ownerId",
            "type": "number"
        },
        {
            "name": "firstname",
            "baseName": "firstname",
            "type": "string"
        },
        {
            "name": "lastname",
            "baseName": "lastname",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date"
        },
        {
            "name": "lastUpdated",
            "baseName": "lastUpdated",
            "type": "Date"
        },
        {
            "name": "preferences",
            "baseName": "preferences",
            "type": "UserPreferences"
        },
        {
            "name": "tFAEnabled",
            "baseName": "TFAEnabled",
            "type": "string"
        },
        {
            "name": "affiliateID",
            "baseName": "affiliateID",
            "type": "string"
        },
        {
            "name": "pgpPubKey",
            "baseName": "pgpPubKey",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "geoipCountry",
            "baseName": "geoipCountry",
            "type": "string"
        },
        {
            "name": "geoipRegion",
            "baseName": "geoipRegion",
            "type": "string"
        },
        {
            "name": "typ",
            "baseName": "typ",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return User.attributeTypeMap;
    }
}

export class UserCommission {
    'makerFee'?: number;
    'takerFee'?: number;
    'settlementFee'?: number;
    'maxFee'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "makerFee",
            "baseName": "makerFee",
            "type": "number"
        },
        {
            "name": "takerFee",
            "baseName": "takerFee",
            "type": "number"
        },
        {
            "name": "settlementFee",
            "baseName": "settlementFee",
            "type": "number"
        },
        {
            "name": "maxFee",
            "baseName": "maxFee",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return UserCommission.attributeTypeMap;
    }
}

export class UserPreferences {
    'alertOnLiquidations'?: boolean;
    'animationsEnabled'?: boolean;
    'announcementsLastSeen'?: Date;
    'chatChannelID'?: number;
    'colorTheme'?: string;
    'currency'?: string;
    'debug'?: boolean;
    'disableEmails'?: Array<string>;
    'hideConfirmDialogs'?: Array<string>;
    'hideConnectionModal'?: boolean;
    'hideFromLeaderboard'?: boolean;
    'hideNameFromLeaderboard'?: boolean;
    'hideNotifications'?: Array<string>;
    'locale'?: string;
    'msgsSeen'?: Array<string>;
    'orderBookBinning'?: any;
    'orderBookType'?: string;
    'orderClearImmediate'?: boolean;
    'orderControlsPlusMinus'?: boolean;
    'showLocaleNumbers'?: boolean;
    'sounds'?: Array<string>;
    'strictIPCheck'?: boolean;
    'strictTimeout'?: boolean;
    'tickerGroup'?: string;
    'tickerPinned'?: boolean;
    'tradeLayout'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "alertOnLiquidations",
            "baseName": "alertOnLiquidations",
            "type": "boolean"
        },
        {
            "name": "animationsEnabled",
            "baseName": "animationsEnabled",
            "type": "boolean"
        },
        {
            "name": "announcementsLastSeen",
            "baseName": "announcementsLastSeen",
            "type": "Date"
        },
        {
            "name": "chatChannelID",
            "baseName": "chatChannelID",
            "type": "number"
        },
        {
            "name": "colorTheme",
            "baseName": "colorTheme",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "debug",
            "baseName": "debug",
            "type": "boolean"
        },
        {
            "name": "disableEmails",
            "baseName": "disableEmails",
            "type": "Array<string>"
        },
        {
            "name": "hideConfirmDialogs",
            "baseName": "hideConfirmDialogs",
            "type": "Array<string>"
        },
        {
            "name": "hideConnectionModal",
            "baseName": "hideConnectionModal",
            "type": "boolean"
        },
        {
            "name": "hideFromLeaderboard",
            "baseName": "hideFromLeaderboard",
            "type": "boolean"
        },
        {
            "name": "hideNameFromLeaderboard",
            "baseName": "hideNameFromLeaderboard",
            "type": "boolean"
        },
        {
            "name": "hideNotifications",
            "baseName": "hideNotifications",
            "type": "Array<string>"
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "string"
        },
        {
            "name": "msgsSeen",
            "baseName": "msgsSeen",
            "type": "Array<string>"
        },
        {
            "name": "orderBookBinning",
            "baseName": "orderBookBinning",
            "type": "any"
        },
        {
            "name": "orderBookType",
            "baseName": "orderBookType",
            "type": "string"
        },
        {
            "name": "orderClearImmediate",
            "baseName": "orderClearImmediate",
            "type": "boolean"
        },
        {
            "name": "orderControlsPlusMinus",
            "baseName": "orderControlsPlusMinus",
            "type": "boolean"
        },
        {
            "name": "showLocaleNumbers",
            "baseName": "showLocaleNumbers",
            "type": "boolean"
        },
        {
            "name": "sounds",
            "baseName": "sounds",
            "type": "Array<string>"
        },
        {
            "name": "strictIPCheck",
            "baseName": "strictIPCheck",
            "type": "boolean"
        },
        {
            "name": "strictTimeout",
            "baseName": "strictTimeout",
            "type": "boolean"
        },
        {
            "name": "tickerGroup",
            "baseName": "tickerGroup",
            "type": "string"
        },
        {
            "name": "tickerPinned",
            "baseName": "tickerPinned",
            "type": "boolean"
        },
        {
            "name": "tradeLayout",
            "baseName": "tradeLayout",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UserPreferences.attributeTypeMap;
    }
}

export class Wallet {
    'account': number;
    'currency': string;
    'prevDeposited'?: number;
    'prevWithdrawn'?: number;
    'prevTransferIn'?: number;
    'prevTransferOut'?: number;
    'prevAmount'?: number;
    'prevTimestamp'?: Date;
    'deltaDeposited'?: number;
    'deltaWithdrawn'?: number;
    'deltaTransferIn'?: number;
    'deltaTransferOut'?: number;
    'deltaAmount'?: number;
    'deposited'?: number;
    'withdrawn'?: number;
    'transferIn'?: number;
    'transferOut'?: number;
    'amount'?: number;
    'pendingCredit'?: number;
    'pendingDebit'?: number;
    'confirmedDebit'?: number;
    'timestamp'?: Date;
    'addr'?: string;
    'script'?: string;
    'withdrawalLock'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "prevDeposited",
            "baseName": "prevDeposited",
            "type": "number"
        },
        {
            "name": "prevWithdrawn",
            "baseName": "prevWithdrawn",
            "type": "number"
        },
        {
            "name": "prevTransferIn",
            "baseName": "prevTransferIn",
            "type": "number"
        },
        {
            "name": "prevTransferOut",
            "baseName": "prevTransferOut",
            "type": "number"
        },
        {
            "name": "prevAmount",
            "baseName": "prevAmount",
            "type": "number"
        },
        {
            "name": "prevTimestamp",
            "baseName": "prevTimestamp",
            "type": "Date"
        },
        {
            "name": "deltaDeposited",
            "baseName": "deltaDeposited",
            "type": "number"
        },
        {
            "name": "deltaWithdrawn",
            "baseName": "deltaWithdrawn",
            "type": "number"
        },
        {
            "name": "deltaTransferIn",
            "baseName": "deltaTransferIn",
            "type": "number"
        },
        {
            "name": "deltaTransferOut",
            "baseName": "deltaTransferOut",
            "type": "number"
        },
        {
            "name": "deltaAmount",
            "baseName": "deltaAmount",
            "type": "number"
        },
        {
            "name": "deposited",
            "baseName": "deposited",
            "type": "number"
        },
        {
            "name": "withdrawn",
            "baseName": "withdrawn",
            "type": "number"
        },
        {
            "name": "transferIn",
            "baseName": "transferIn",
            "type": "number"
        },
        {
            "name": "transferOut",
            "baseName": "transferOut",
            "type": "number"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "pendingCredit",
            "baseName": "pendingCredit",
            "type": "number"
        },
        {
            "name": "pendingDebit",
            "baseName": "pendingDebit",
            "type": "number"
        },
        {
            "name": "confirmedDebit",
            "baseName": "confirmedDebit",
            "type": "number"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "addr",
            "baseName": "addr",
            "type": "string"
        },
        {
            "name": "script",
            "baseName": "script",
            "type": "string"
        },
        {
            "name": "withdrawalLock",
            "baseName": "withdrawalLock",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return Wallet.attributeTypeMap;
    }
}

export class XAny {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return XAny.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
        "Notification.TypeEnum": Notification.TypeEnum,
}

let typeMap: {[index: string]: any} = {
    "APIKey": APIKey,
    "AccessToken": AccessToken,
    "Affiliate": Affiliate,
    "Announcement": Announcement,
    "Chat": Chat,
    "ChatChannel": ChatChannel,
    "ConnectedUsers": ConnectedUsers,
    "ErrorError": ErrorError,
    "Execution": Execution,
    "Funding": Funding,
    "IndexComposite": IndexComposite,
    "InlineResponse200": InlineResponse200,
    "InlineResponse2001": InlineResponse2001,
    "Instrument": Instrument,
    "InstrumentInterval": InstrumentInterval,
    "Insurance": Insurance,
    "Leaderboard": Leaderboard,
    "Liquidation": Liquidation,
    "Margin": Margin,
    "ModelError": ModelError,
    "Notification": Notification,
    "Order": Order,
    "OrderBookL2": OrderBookL2,
    "Position": Position,
    "Quote": Quote,
    "Settlement": Settlement,
    "Stats": Stats,
    "StatsHistory": StatsHistory,
    "StatsUSD": StatsUSD,
    "Trade": Trade,
    "TradeBin": TradeBin,
    "Transaction": Transaction,
    "User": User,
    "UserCommission": UserCommission,
    "UserPreferences": UserPreferences,
    "Wallet": Wallet,
    "XAny": XAny,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum APIKeyApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class APIKeyApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: APIKeyApiApiKeys, value: string) {
        (this.authentications as any)[APIKeyApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Disable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    public aPIKeyDisable (apiKeyID: string) : Promise<{ response: http.ClientResponse; body: APIKey;  }> {
        const localVarPath = this.basePath + '/apiKey/disable';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apiKeyID' is not null or undefined
        if (apiKeyID === null || apiKeyID === undefined) {
            throw new Error('Required parameter apiKeyID was null or undefined when calling aPIKeyDisable.');
        }


        let localVarUseFormData = false;

        if (apiKeyID !== undefined) {
            localVarFormParams['apiKeyID'] = ObjectSerializer.serialize(apiKeyID, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: APIKey;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "APIKey");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Enable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    public aPIKeyEnable (apiKeyID: string) : Promise<{ response: http.ClientResponse; body: APIKey;  }> {
        const localVarPath = this.basePath + '/apiKey/enable';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apiKeyID' is not null or undefined
        if (apiKeyID === null || apiKeyID === undefined) {
            throw new Error('Required parameter apiKeyID was null or undefined when calling aPIKeyEnable.');
        }


        let localVarUseFormData = false;

        if (apiKeyID !== undefined) {
            localVarFormParams['apiKeyID'] = ObjectSerializer.serialize(apiKeyID, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: APIKey;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "APIKey");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get your API Keys.
     * @param reverse If true, will sort results newest first.
     */
    public aPIKeyGet (reverse?: boolean) : Promise<{ response: http.ClientResponse; body: Array<APIKey>;  }> {
        const localVarPath = this.basePath + '/apiKey';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<APIKey>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<APIKey>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * API Keys can only be created via the frontend.
     * @summary Create a new API Key.
     * @param name Key name. This name is for reference only.
     * @param cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
     * @param permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;orderCancel\&quot;, \&quot;withdraw\&quot;].
     * @param enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    public aPIKeyNew (name?: string, cidr?: string, permissions?: string, enabled?: boolean, token?: string) : Promise<{ response: http.ClientResponse; body: APIKey;  }> {
        const localVarPath = this.basePath + '/apiKey';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (name !== undefined) {
            localVarFormParams['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (cidr !== undefined) {
            localVarFormParams['cidr'] = ObjectSerializer.serialize(cidr, "string");
        }

        if (permissions !== undefined) {
            localVarFormParams['permissions'] = ObjectSerializer.serialize(permissions, "string");
        }

        if (enabled !== undefined) {
            localVarFormParams['enabled'] = ObjectSerializer.serialize(enabled, "boolean");
        }

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: APIKey;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "APIKey");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Remove an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    public aPIKeyRemove (apiKeyID: string) : Promise<{ response: http.ClientResponse; body: InlineResponse200;  }> {
        const localVarPath = this.basePath + '/apiKey';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apiKeyID' is not null or undefined
        if (apiKeyID === null || apiKeyID === undefined) {
            throw new Error('Required parameter apiKeyID was null or undefined when calling aPIKeyRemove.');
        }


        let localVarUseFormData = false;

        if (apiKeyID !== undefined) {
            localVarFormParams['apiKeyID'] = ObjectSerializer.serialize(apiKeyID, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: InlineResponse200;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum AnnouncementApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class AnnouncementApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: AnnouncementApiApiKeys, value: string) {
        (this.authentications as any)[AnnouncementApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get site announcements.
     * @param columns Array of column names to fetch. If omitted, will return all columns.
     */
    public announcementGet (columns?: string) : Promise<{ response: http.ClientResponse; body: Array<Announcement>;  }> {
        const localVarPath = this.basePath + '/announcement';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Announcement>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Announcement>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get urgent (banner) announcements.
     */
    public announcementGetUrgent () : Promise<{ response: http.ClientResponse; body: Array<Announcement>;  }> {
        const localVarPath = this.basePath + '/announcement/urgent';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Announcement>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Announcement>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ChatApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class ChatApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ChatApiApiKeys, value: string) {
        (this.authentications as any)[ChatApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get chat messages.
     * @param count Number of results to fetch.
     * @param start Starting ID for results.
     * @param reverse If true, will sort results newest first.
     * @param channelID Channel id. GET /chat/channels for ids. Leave blank for all.
     */
    public chatGet (count?: number, start?: number, reverse?: boolean, channelID?: number) : Promise<{ response: http.ClientResponse; body: Array<Chat>;  }> {
        const localVarPath = this.basePath + '/chat';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (channelID !== undefined) {
            localVarQueryParameters['channelID'] = ObjectSerializer.serialize(channelID, "number");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Chat>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Chat>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get available channels.
     */
    public chatGetChannels () : Promise<{ response: http.ClientResponse; body: Array<ChatChannel>;  }> {
        const localVarPath = this.basePath + '/chat/channels';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ChatChannel>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ChatChannel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an array with browser users in the first position and API users (bots) in the second position.
     * @summary Get connected users.
     */
    public chatGetConnected () : Promise<{ response: http.ClientResponse; body: ConnectedUsers;  }> {
        const localVarPath = this.basePath + '/chat/connected';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ConnectedUsers;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ConnectedUsers");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Send a chat message.
     * @param message 
     * @param channelID Channel to post to. Default 1 (English).
     */
    public chatNew (message: string, channelID?: number) : Promise<{ response: http.ClientResponse; body: Chat;  }> {
        const localVarPath = this.basePath + '/chat';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'message' is not null or undefined
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling chatNew.');
        }


        let localVarUseFormData = false;

        if (message !== undefined) {
            localVarFormParams['message'] = ObjectSerializer.serialize(message, "string");
        }

        if (channelID !== undefined) {
            localVarFormParams['channelID'] = ObjectSerializer.serialize(channelID, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Chat;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Chat");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ExecutionApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class ExecutionApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ExecutionApiApiKeys, value: string) {
        (this.authentications as any)[ExecutionApiApiKeys[key]].apiKey = value;
    }
    /**
     * This returns all raw transactions, which includes order opening and cancelation, and order status changes. It can be quite noisy. More focused information is available at `/execution/tradeHistory`.  You may also use the `filter` param to target your query. Specify an array as a filter value, such as `{\"execType\": [\"Settlement\", \"Trade\"]}` to filter on multiple values.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for explanations of these fields. 
     * @summary Get all raw executions for your account.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public executionGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Execution>;  }> {
        const localVarPath = this.basePath + '/execution';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Execution>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Execution>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get all balance-affecting executions. This includes each trade, insurance charge, and settlement.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public executionGetTradeHistory (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Execution>;  }> {
        const localVarPath = this.basePath + '/execution/tradeHistory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Execution>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Execution>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum FundingApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class FundingApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: FundingApiApiKeys, value: string) {
        (this.authentications as any)[FundingApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get funding history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public fundingGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Funding>;  }> {
        const localVarPath = this.basePath + '/funding';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Funding>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Funding>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum InstrumentApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class InstrumentApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: InstrumentApiApiKeys, value: string) {
        (this.authentications as any)[InstrumentApiApiKeys[key]].apiKey = value;
    }
    /**
     * This returns all instruments and indices, including those that have settled or are unlisted. Use this endpoint if you want to query for individual instruments or use a complex filter. Use `/instrument/active` to return active instruments, or use a filter like `{\"state\": \"Open\"}`.
     * @summary Get instruments.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public instrumentGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const localVarPath = this.basePath + '/instrument';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Instrument>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get all active instruments and instruments that have expired in <24hrs.
     */
    public instrumentGetActive () : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const localVarPath = this.basePath + '/instrument/active';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Instrument>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Helper method. Gets all active instruments and all indices. This is a join of the result of /indices and /active.
     */
    public instrumentGetActiveAndIndices () : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const localVarPath = this.basePath + '/instrument/activeAndIndices';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Instrument>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint is useful for determining which pairs are live. It returns two arrays of   strings. The first is intervals, such as `[\"XBT:perpetual\", \"XBT:monthly\", \"XBT:quarterly\", \"ETH:monthly\", ...]`. These identifiers are usable in any query's `symbol` param. The second array is the current resolution of these intervals. Results are mapped at the same index.
     * @summary Return all active contract series and interval pairs.
     */
    public instrumentGetActiveIntervals () : Promise<{ response: http.ClientResponse; body: InstrumentInterval;  }> {
        const localVarPath = this.basePath + '/instrument/activeIntervals';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: InstrumentInterval;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "InstrumentInterval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Composite indices are built from multiple external price sources.  Use this endpoint to get the underlying prices of an index. For example, send a `symbol` of `.XBT` to get the ticks and weights of the constituent exchanges that build the \".XBT\" index.  A tick with reference `\"BMI\"` and weight `null` is the composite index tick. 
     * @summary Show constituent parts of an index.
     * @param account 
     * @param symbol The composite index symbol.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public instrumentGetCompositeIndex (account?: number, symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<IndexComposite>;  }> {
        const localVarPath = this.basePath + '/instrument/compositeIndex';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (account !== undefined) {
            localVarQueryParameters['account'] = ObjectSerializer.serialize(account, "number");
        }

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<IndexComposite>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<IndexComposite>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get all price indices.
     */
    public instrumentGetIndices () : Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }> {
        const localVarPath = this.basePath + '/instrument/indices';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Instrument>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Instrument>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum InsuranceApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class InsuranceApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: InsuranceApiApiKeys, value: string) {
        (this.authentications as any)[InsuranceApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get insurance fund history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public insuranceGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Insurance>;  }> {
        const localVarPath = this.basePath + '/insurance';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Insurance>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Insurance>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum LeaderboardApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class LeaderboardApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: LeaderboardApiApiKeys, value: string) {
        (this.authentications as any)[LeaderboardApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get current leaderboard.
     * @param method Ranking type. Options: \&quot;notional\&quot;, \&quot;ROE\&quot;
     */
    public leaderboardGet (method?: string) : Promise<{ response: http.ClientResponse; body: Array<Leaderboard>;  }> {
        const localVarPath = this.basePath + '/leaderboard';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (method !== undefined) {
            localVarQueryParameters['method'] = ObjectSerializer.serialize(method, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Leaderboard>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Leaderboard>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get your alias on the leaderboard.
     */
    public leaderboardGetName () : Promise<{ response: http.ClientResponse; body: InlineResponse2001;  }> {
        const localVarPath = this.basePath + '/leaderboard/name';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: InlineResponse2001;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2001");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum LiquidationApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class LiquidationApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: LiquidationApiApiKeys, value: string) {
        (this.authentications as any)[LiquidationApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get liquidation orders.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public liquidationGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Liquidation>;  }> {
        const localVarPath = this.basePath + '/liquidation';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Liquidation>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Liquidation>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum NotificationApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class NotificationApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: NotificationApiApiKeys, value: string) {
        (this.authentications as any)[NotificationApiApiKeys[key]].apiKey = value;
    }
    /**
     * This is an upcoming feature and currently does not return data.
     * @summary Get your current notifications.
     */
    public notificationGet () : Promise<{ response: http.ClientResponse; body: Array<Notification>;  }> {
        const localVarPath = this.basePath + '/notification';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Notification>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Notification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum OrderApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class OrderApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: OrderApiApiKeys, value: string) {
        (this.authentications as any)[OrderApiApiKeys[key]].apiKey = value;
    }
    /**
     * Send an `orderID` or `origClOrdID` to identify the order you wish to amend.  Both order quantity and price can be amended. Only one `qty` field can be used to amend.  Use the `leavesQty` field to specify how much of the order you wish to remain open. This can be useful if you want to adjust your position's delta by a certain amount, regardless of how much of the order has already filled.  > A `leavesQty` can be used to make a \"Filled\" order live again, if it is received within 60 seconds of the fill.  Use the `simpleOrderQty` and `simpleLeavesQty` fields to specify order size in Bitcoin, rather than contracts. These fields will round up to the nearest contract.  Like order placement, amending can be done in bulk. Simply send a request to `PUT /api/v1/order/bulk` with a JSON body of the shape: `{\"orders\": [{...}, {...}]}`, each object containing the fields used in this endpoint. 
     * @summary Amend the quantity or price of an open order.
     * @param orderID Order ID
     * @param origClOrdID Client Order ID. See POST /order.
     * @param clOrdID Optional new Client Order ID, requires &#x60;origClOrdID&#x60;.
     * @param simpleOrderQty Optional order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param orderQty Optional order quantity in units of the instrument (i.e. contracts).
     * @param simpleLeavesQty Optional leaves quantity in units of the underlying instrument (i.e. Bitcoin). Useful for amending partially filled orders.
     * @param leavesQty Optional leaves quantity in units of the instrument (i.e. contracts). Useful for amending partially filled orders.
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param text Optional amend annotation. e.g. &#39;Adjust skew&#39;.
     */
    public orderAmend (orderID?: string, origClOrdID?: string, clOrdID?: string, simpleOrderQty?: number, orderQty?: number, simpleLeavesQty?: number, leavesQty?: number, price?: number, stopPx?: number, pegOffsetValue?: number, text?: string) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/order';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (orderID !== undefined) {
            localVarFormParams['orderID'] = ObjectSerializer.serialize(orderID, "string");
        }

        if (origClOrdID !== undefined) {
            localVarFormParams['origClOrdID'] = ObjectSerializer.serialize(origClOrdID, "string");
        }

        if (clOrdID !== undefined) {
            localVarFormParams['clOrdID'] = ObjectSerializer.serialize(clOrdID, "string");
        }

        if (simpleOrderQty !== undefined) {
            localVarFormParams['simpleOrderQty'] = ObjectSerializer.serialize(simpleOrderQty, "number");
        }

        if (orderQty !== undefined) {
            localVarFormParams['orderQty'] = ObjectSerializer.serialize(orderQty, "number");
        }

        if (simpleLeavesQty !== undefined) {
            localVarFormParams['simpleLeavesQty'] = ObjectSerializer.serialize(simpleLeavesQty, "number");
        }

        if (leavesQty !== undefined) {
            localVarFormParams['leavesQty'] = ObjectSerializer.serialize(leavesQty, "number");
        }

        if (price !== undefined) {
            localVarFormParams['price'] = ObjectSerializer.serialize(price, "number");
        }

        if (stopPx !== undefined) {
            localVarFormParams['stopPx'] = ObjectSerializer.serialize(stopPx, "number");
        }

        if (pegOffsetValue !== undefined) {
            localVarFormParams['pegOffsetValue'] = ObjectSerializer.serialize(pegOffsetValue, "number");
        }

        if (text !== undefined) {
            localVarFormParams['text'] = ObjectSerializer.serialize(text, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Similar to POST /amend, but with multiple orders. `application/json` only. Ratelimited at 10%.
     * @summary Amend multiple orders for the same symbol.
     * @param orders An array of orders.
     */
    public orderAmendBulk (orders?: string) : Promise<{ response: http.ClientResponse; body: Array<Order>;  }> {
        const localVarPath = this.basePath + '/order/bulk';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (orders !== undefined) {
            localVarFormParams['orders'] = ObjectSerializer.serialize(orders, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Order>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Order>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Either an orderID or a clOrdID must be provided.
     * @summary Cancel order(s). Send multiple order IDs to cancel in bulk.
     * @param orderID Order ID(s).
     * @param clOrdID Client Order ID(s). See POST /order.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;.
     */
    public orderCancel (orderID?: string, clOrdID?: string, text?: string) : Promise<{ response: http.ClientResponse; body: Array<Order>;  }> {
        const localVarPath = this.basePath + '/order';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (orderID !== undefined) {
            localVarFormParams['orderID'] = ObjectSerializer.serialize(orderID, "string");
        }

        if (clOrdID !== undefined) {
            localVarFormParams['clOrdID'] = ObjectSerializer.serialize(clOrdID, "string");
        }

        if (text !== undefined) {
            localVarFormParams['text'] = ObjectSerializer.serialize(text, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Order>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Order>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Cancels all of your orders.
     * @param symbol Optional symbol. If provided, only cancels orders for that symbol.
     * @param filter Optional filter for cancellation. Use to only cancel some orders, e.g. &#x60;{\&quot;side\&quot;: \&quot;Buy\&quot;}&#x60;.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;
     */
    public orderCancelAll (symbol?: string, filter?: string, text?: string) : Promise<{ response: http.ClientResponse; body: Array<Order>;  }> {
        const localVarPath = this.basePath + '/order/all';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (symbol !== undefined) {
            localVarFormParams['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarFormParams['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (text !== undefined) {
            localVarFormParams['text'] = ObjectSerializer.serialize(text, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Order>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Order>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Useful as a dead-man's switch to ensure your orders are canceled in case of an outage. If called repeatedly, the existing offset will be canceled and a new one will be inserted in its place.  Example usage: call this route at 15s intervals with an offset of 60000 (60s). If this route is not called within 60 seconds, all your orders will be automatically canceled.  This is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#Dead-Mans-Switch-Auto-Cancel). 
     * @summary Automatically cancel all your orders after a specified timeout.
     * @param timeout Timeout in ms. Set to 0 to cancel this timer. 
     */
    public orderCancelAllAfter (timeout: number) : Promise<{ response: http.ClientResponse; body: any;  }> {
        const localVarPath = this.basePath + '/order/cancelAllAfter';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'timeout' is not null or undefined
        if (timeout === null || timeout === undefined) {
            throw new Error('Required parameter timeout was null or undefined when calling orderCancelAllAfter.');
        }


        let localVarUseFormData = false;

        if (timeout !== undefined) {
            localVarFormParams['timeout'] = ObjectSerializer.serialize(timeout, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "any");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * If no `price` is specified, a market order will be submitted to close the whole of your position. This will also close all other open orders in this symbol.
     * @summary Close a position. [Deprecated, use POST /order with execInst: 'Close']
     * @param symbol Symbol of position to close.
     * @param price Optional limit price.
     */
    public orderClosePosition (symbol: string, price?: number) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/order/closePosition';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling orderClosePosition.');
        }


        let localVarUseFormData = false;

        if (symbol !== undefined) {
            localVarFormParams['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (price !== undefined) {
            localVarFormParams['price'] = ObjectSerializer.serialize(price, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * To get open orders only, send {\"open\": true} in the filter param.  See <a href=\"http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html\">the FIX Spec</a> for explanations of these fields.
     * @summary Get your orders.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public orderGetOrders (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Order>;  }> {
        const localVarPath = this.basePath + '/order';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Order>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Order>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ## Placing Orders  This endpoint is used for placing orders. See individual fields below for more details on their use.  #### Order Types  All orders require a `symbol`. All other fields are optional except when otherwise specified.  These are the valid `ordType`s:  * **Limit**: The default order type. Specify an `orderQty` and `price`. * **Market**: A traditional Market order. A Market order will execute until filled or your bankruptcy price is reached, at   which point it will cancel. * **MarketWithLeftOverAsLimit**: A market order that, after eating through the order book as far as   permitted by available margin, will become a limit order. The difference between this type and `Market` only   affects the behavior in thin books. Upon reaching the deepest possible price, if there is quantity left over,   a `Market` order will cancel the remaining quantity. `MarketWithLeftOverAsLimit` will keep the remaining   quantity in the books as a `Limit`. * **Stop**: A Stop Market order. Specify an `orderQty` and `stopPx`. When the `stopPx` is reached, the order will be entered   into the book.   * On sell orders, the order will trigger if the triggering price is lower than the `stopPx`. On buys, higher.   * Note: Stop orders do not consume margin until triggered. Be sure that the required margin is available in your     account so that it may trigger fully.   * `Close` Stops don't require an `orderQty`. See Execution Instructions below. * **StopLimit**: Like a Stop Market, but enters a Limit order instead of a Market order. Specify an `orderQty`, `stopPx`,   and `price`. * **MarketIfTouched**: Similar to a Stop, but triggers are done in the opposite direction. Useful for Take Profit orders. * **LimitIfTouched**: As above; use for Take Profit Limit orders.  #### Execution Instructions  The following `execInst`s are supported. If using multiple, separate with a comma (e.g. `LastPrice,Close`).  * **ParticipateDoNotInitiate**: Also known as a Post-Only order. If this order would have executed on placement,   it will cancel instead. * **AllOrNone**: Valid only for hidden orders (`displayQty: 0`). Use to only execute if the entire order would fill. * **MarkPrice, LastPrice, IndexPrice**: Used by stop and if-touched orders to determine the triggering price.   Use only one. By default, `'MarkPrice'` is used. Also used for Pegged orders to define the value of `'LastPeg'`. * **ReduceOnly**: A `'ReduceOnly'` order can only reduce your position, not increase it. If you have a `'ReduceOnly'`   limit order that rests in the order book while the position is reduced by other orders, then its order quantity will   be amended down or canceled. If there are multiple `'ReduceOnly'` orders the least agresssive will be amended first. * **Close**: `'Close'` implies `'ReduceOnly'`. A `'Close'` order will cancel other active limit orders with the same side   and symbol if the open quantity exceeds the current position. This is useful for stops: by canceling these orders, a   `'Close'` Stop is ensured to have the margin required to execute, and can only execute up to the full size of your   position. If `orderQty` is not specified, a `'Close'` order has an `orderQty` equal to your current position's size.   * Note that a `Close` order without an `orderQty` requires a `side`, so that BitMEX knows if it should trigger   above or below the `stopPx`.  #### Linked Orders  Linked Orders are an advanced capability. It is very powerful, but its use requires careful coding and testing. Please follow this document carefully and use the [Testnet Exchange](https://testnet.bitmex.com) while developing.  BitMEX offers four advanced Linked Order types:  * **OCO**: *One Cancels the Other*. A very flexible version of the standard Stop / Take Profit technique.   Multiple orders may be linked together using a single `clOrdLinkID`. Send a `contingencyType` of   `OneCancelsTheOther` on the orders. The first order that fully or partially executes (or activates   for `Stop` orders) will cancel all other orders with the same `clOrdLinkID`. * **OTO**: *One Triggers the Other*. Send a `contingencyType` of `'OneTriggersTheOther'` on the primary order and   then subsequent orders with the same `clOrdLinkID` will be not be triggered until the primary order fully executes. * **OUOA**: *One Updates the Other Absolute*. Send a `contingencyType` of `'OneUpdatesTheOtherAbsolute'` on the orders. Then   as one order has a execution, other orders with the same `clOrdLinkID` will have their order quantity amended   down by the execution quantity. * **OUOP**: *One Updates the Other Proportional*. Send a `contingencyType` of `'OneUpdatesTheOtherProportional'` on the orders. Then   as one order has a execution, other orders with the same `clOrdLinkID` will have their order quantity reduced proportionally   by the fill percentage.  #### Trailing Stops  You may use `pegPriceType` of `'TrailingStopPeg'` to create Trailing Stops. The pegged `stopPx` will move as the market moves away from the peg, and freeze as the market moves toward it.  To use, combine with `pegOffsetValue` to set the `stopPx` of your order. The peg is set to the triggering price specified in the `execInst` (default `'MarkPrice'`). Use a negative offset for stop-sell and buy-if-touched orders.  Requires `ordType`: `'Stop', 'StopLimit', 'MarketIfTouched', 'LimitIfTouched'`.  #### Simple Quantities  Send a `simpleOrderQty` instead of an `orderQty` to create an order denominated in the underlying currency. This is useful for opening up a position with 1 XBT of exposure without having to calculate how many contracts it is.  #### Rate Limits  See the [Bulk Order Documentation](#!/Order/Order_newBulk) if you need to place multiple orders at the same time. Bulk orders require fewer risk checks in the trading engine and thus are ratelimited at **1/10** the normal rate.  You can also improve your reactivity to market movements while staying under your ratelimit by using the [Amend](#!/Order/Order_amend) and [Amend Bulk](#!/Order/Order_amendBulk) endpoints. This allows you to stay in the market and avoids the cancel/replace cycle.  #### Tracking Your Orders  If you want to keep track of order IDs yourself, set a unique `clOrdID` per order. This `clOrdID` will come back as a property on the order and any related executions (including on the WebSocket), and can be used to get or cancel the order. Max length is 36 characters.  You can also change the `clOrdID` by amending an order, supplying an `origClOrdID`, and your desired new ID as the `clOrdID` param, like so:  ``` # Amends an order's leavesQty, and updates its clOrdID to \"def-456\" PUT /api/v1/order {\"origClOrdID\": \"abc-123\", \"clOrdID\": \"def-456\", \"leavesQty\": 1000} ``` 
     * @summary Create a new order.
     * @param symbol Instrument symbol. e.g. &#39;XBTUSD&#39;.
     * @param side Order side. Valid options: Buy, Sell. Defaults to &#39;Buy&#39; unless &#x60;orderQty&#x60; or &#x60;simpleOrderQty&#x60; is negative.
     * @param simpleOrderQty Order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param orderQty Order quantity in units of the instrument (i.e. contracts).
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param displayQty Optional quantity to display in the book. Use 0 for a fully hidden order.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders. Use &#x60;execInst&#x60; of &#39;MarkPrice&#39; or &#39;LastPrice&#39; to define the current price used for triggering.
     * @param clOrdID Optional Client Order ID. This clOrdID will come back on the order and any related executions.
     * @param clOrdLinkID Optional Client Order Link ID for contingent orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param pegPriceType Optional peg price type. Valid options: LastPeg, MidPricePeg, MarketPeg, PrimaryPeg, TrailingStopPeg.
     * @param ordType Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, Pegged. Defaults to &#39;Limit&#39; when &#x60;price&#x60; is specified. Defaults to &#39;Stop&#39; when &#x60;stopPx&#x60; is specified. Defaults to &#39;StopLimit&#39; when &#x60;price&#x60; and &#x60;stopPx&#x60; are specified.
     * @param timeInForce Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel, FillOrKill. Defaults to &#39;GoodTillCancel&#39; for &#39;Limit&#39;, &#39;StopLimit&#39;, &#39;LimitIfTouched&#39;, and &#39;MarketWithLeftOverAsLimit&#39; orders.
     * @param execInst Optional execution instructions. Valid options: ParticipateDoNotInitiate, AllOrNone, MarkPrice, IndexPrice, LastPrice, Close, ReduceOnly, Fixed. &#39;AllOrNone&#39; instruction requires &#x60;displayQty&#x60; to be 0. &#39;MarkPrice&#39;, &#39;IndexPrice&#39; or &#39;LastPrice&#39; instruction valid for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param contingencyType Optional contingency type for use with &#x60;clOrdLinkID&#x60;. Valid options: OneCancelsTheOther, OneTriggersTheOther, OneUpdatesTheOtherAbsolute, OneUpdatesTheOtherProportional.
     * @param text Optional order annotation. e.g. &#39;Take profit&#39;.
     */
    public orderNew (symbol: string, side?: string, simpleOrderQty?: number, orderQty?: number, price?: number, displayQty?: number, stopPx?: number, clOrdID?: string, clOrdLinkID?: string, pegOffsetValue?: number, pegPriceType?: string, ordType?: string, timeInForce?: string, execInst?: string, contingencyType?: string, text?: string) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/order';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling orderNew.');
        }


        let localVarUseFormData = false;

        if (symbol !== undefined) {
            localVarFormParams['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (side !== undefined) {
            localVarFormParams['side'] = ObjectSerializer.serialize(side, "string");
        }

        if (simpleOrderQty !== undefined) {
            localVarFormParams['simpleOrderQty'] = ObjectSerializer.serialize(simpleOrderQty, "number");
        }

        if (orderQty !== undefined) {
            localVarFormParams['orderQty'] = ObjectSerializer.serialize(orderQty, "number");
        }

        if (price !== undefined) {
            localVarFormParams['price'] = ObjectSerializer.serialize(price, "number");
        }

        if (displayQty !== undefined) {
            localVarFormParams['displayQty'] = ObjectSerializer.serialize(displayQty, "number");
        }

        if (stopPx !== undefined) {
            localVarFormParams['stopPx'] = ObjectSerializer.serialize(stopPx, "number");
        }

        if (clOrdID !== undefined) {
            localVarFormParams['clOrdID'] = ObjectSerializer.serialize(clOrdID, "string");
        }

        if (clOrdLinkID !== undefined) {
            localVarFormParams['clOrdLinkID'] = ObjectSerializer.serialize(clOrdLinkID, "string");
        }

        if (pegOffsetValue !== undefined) {
            localVarFormParams['pegOffsetValue'] = ObjectSerializer.serialize(pegOffsetValue, "number");
        }

        if (pegPriceType !== undefined) {
            localVarFormParams['pegPriceType'] = ObjectSerializer.serialize(pegPriceType, "string");
        }

        if (ordType !== undefined) {
            localVarFormParams['ordType'] = ObjectSerializer.serialize(ordType, "string");
        }

        if (timeInForce !== undefined) {
            localVarFormParams['timeInForce'] = ObjectSerializer.serialize(timeInForce, "string");
        }

        if (execInst !== undefined) {
            localVarFormParams['execInst'] = ObjectSerializer.serialize(execInst, "string");
        }

        if (contingencyType !== undefined) {
            localVarFormParams['contingencyType'] = ObjectSerializer.serialize(contingencyType, "string");
        }

        if (text !== undefined) {
            localVarFormParams['text'] = ObjectSerializer.serialize(text, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint is used for placing bulk orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  Each individual order object in the array should have the same properties as an individual POST /order call.  This endpoint is much faster for getting many orders into the book at once. Because it reduces load on BitMEX systems, this endpoint is ratelimited at `ceil(0.1 * orders)`. Submitting 10 orders via a bulk order call will only count as 1 request, 15 as 2, 32 as 4, and so on.  For now, only `application/json` is supported on this endpoint. 
     * @summary Create multiple new orders for the same symbol.
     * @param orders An array of orders.
     */
    public orderNewBulk (orders?: string) : Promise<{ response: http.ClientResponse; body: Array<Order>;  }> {
        const localVarPath = this.basePath + '/order/bulk';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (orders !== undefined) {
            localVarFormParams['orders'] = ObjectSerializer.serialize(orders, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Order>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Order>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum OrderBookApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class OrderBookApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: OrderBookApiApiKeys, value: string) {
        (this.authentications as any)[OrderBookApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get current orderbook in vertical format.
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth per side. Send 0 for full depth.
     */
    public orderBookGetL2 (symbol: string, depth?: number) : Promise<{ response: http.ClientResponse; body: Array<OrderBookL2>;  }> {
        const localVarPath = this.basePath + '/orderBook/L2';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling orderBookGetL2.');
        }

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (depth !== undefined) {
            localVarQueryParameters['depth'] = ObjectSerializer.serialize(depth, "number");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<OrderBookL2>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<OrderBookL2>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum PositionApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class PositionApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: PositionApiApiKeys, value: string) {
        (this.authentications as any)[PositionApiApiKeys[key]].apiKey = value;
    }
    /**
     * See <a href=\"http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\">the FIX Spec</a> for explanations of these fields.
     * @summary Get your positions.
     * @param filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}.
     * @param columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
     * @param count Number of rows to fetch.
     */
    public positionGet (filter?: string, columns?: string, count?: number) : Promise<{ response: http.ClientResponse; body: Array<Position>;  }> {
        const localVarPath = this.basePath + '/position';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Position>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Position>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Enable isolated margin or cross margin per-position.
     * @param symbol Position symbol to isolate.
     * @param enabled True for isolated margin, false for cross margin.
     */
    public positionIsolateMargin (symbol: string, enabled?: boolean) : Promise<{ response: http.ClientResponse; body: Position;  }> {
        const localVarPath = this.basePath + '/position/isolate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling positionIsolateMargin.');
        }


        let localVarUseFormData = false;

        if (symbol !== undefined) {
            localVarFormParams['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (enabled !== undefined) {
            localVarFormParams['enabled'] = ObjectSerializer.serialize(enabled, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Position;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Position");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Transfer equity in or out of a position.
     * @param symbol Symbol of position to isolate.
     * @param amount Amount to transfer, in Satoshis. May be negative.
     */
    public positionTransferIsolatedMargin (symbol: string, amount: number) : Promise<{ response: http.ClientResponse; body: Position;  }> {
        const localVarPath = this.basePath + '/position/transferMargin';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling positionTransferIsolatedMargin.');
        }

        // verify required parameter 'amount' is not null or undefined
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling positionTransferIsolatedMargin.');
        }


        let localVarUseFormData = false;

        if (symbol !== undefined) {
            localVarFormParams['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (amount !== undefined) {
            localVarFormParams['amount'] = ObjectSerializer.serialize(amount, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Position;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Position");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Choose leverage for a position.
     * @param symbol Symbol of position to adjust.
     * @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
     */
    public positionUpdateLeverage (symbol: string, leverage: number) : Promise<{ response: http.ClientResponse; body: Position;  }> {
        const localVarPath = this.basePath + '/position/leverage';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling positionUpdateLeverage.');
        }

        // verify required parameter 'leverage' is not null or undefined
        if (leverage === null || leverage === undefined) {
            throw new Error('Required parameter leverage was null or undefined when calling positionUpdateLeverage.');
        }


        let localVarUseFormData = false;

        if (symbol !== undefined) {
            localVarFormParams['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (leverage !== undefined) {
            localVarFormParams['leverage'] = ObjectSerializer.serialize(leverage, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Position;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Position");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update your risk limit.
     * @param symbol Symbol of position to update risk limit on.
     * @param riskLimit New Risk Limit, in Satoshis.
     */
    public positionUpdateRiskLimit (symbol: string, riskLimit: number) : Promise<{ response: http.ClientResponse; body: Position;  }> {
        const localVarPath = this.basePath + '/position/riskLimit';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling positionUpdateRiskLimit.');
        }

        // verify required parameter 'riskLimit' is not null or undefined
        if (riskLimit === null || riskLimit === undefined) {
            throw new Error('Required parameter riskLimit was null or undefined when calling positionUpdateRiskLimit.');
        }


        let localVarUseFormData = false;

        if (symbol !== undefined) {
            localVarFormParams['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (riskLimit !== undefined) {
            localVarFormParams['riskLimit'] = ObjectSerializer.serialize(riskLimit, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Position;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Position");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum QuoteApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class QuoteApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: QuoteApiApiKeys, value: string) {
        (this.authentications as any)[QuoteApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get Quotes.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public quoteGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Quote>;  }> {
        const localVarPath = this.basePath + '/quote';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Quote>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Quote>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get previous quotes in time buckets.
     * @param binSize Time interval to bucket by. Available options: [1m,5m,1h,1d].
     * @param partial If true, will send in-progress (incomplete) bins for the current time period.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public quoteGetBucketed (binSize?: string, partial?: boolean, symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Quote>;  }> {
        const localVarPath = this.basePath + '/quote/bucketed';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (binSize !== undefined) {
            localVarQueryParameters['binSize'] = ObjectSerializer.serialize(binSize, "string");
        }

        if (partial !== undefined) {
            localVarQueryParameters['partial'] = ObjectSerializer.serialize(partial, "boolean");
        }

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Quote>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Quote>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SchemaApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class SchemaApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SchemaApiApiKeys, value: string) {
        (this.authentications as any)[SchemaApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get model schemata for data objects returned by this API.
     * @param model Optional model filter. If omitted, will return all models.
     */
    public schemaGet (model?: string) : Promise<{ response: http.ClientResponse; body: any;  }> {
        const localVarPath = this.basePath + '/schema';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (model !== undefined) {
            localVarQueryParameters['model'] = ObjectSerializer.serialize(model, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "any");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Returns help text & subject list for websocket usage.
     */
    public schemaWebsocketHelp () : Promise<{ response: http.ClientResponse; body: any;  }> {
        const localVarPath = this.basePath + '/schema/websocketHelp';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "any");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SettlementApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class SettlementApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SettlementApiApiKeys, value: string) {
        (this.authentications as any)[SettlementApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get settlement history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public settlementGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Settlement>;  }> {
        const localVarPath = this.basePath + '/settlement';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Settlement>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Settlement>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum StatsApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class StatsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: StatsApiApiKeys, value: string) {
        (this.authentications as any)[StatsApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get exchange-wide and per-series turnover and volume statistics.
     */
    public statsGet () : Promise<{ response: http.ClientResponse; body: Array<Stats>;  }> {
        const localVarPath = this.basePath + '/stats';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Stats>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Stats>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get historical exchange-wide and per-series turnover and volume statistics.
     */
    public statsHistory () : Promise<{ response: http.ClientResponse; body: Array<StatsHistory>;  }> {
        const localVarPath = this.basePath + '/stats/history';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<StatsHistory>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<StatsHistory>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get a summary of exchange statistics in USD.
     */
    public statsHistoryUSD () : Promise<{ response: http.ClientResponse; body: Array<StatsUSD>;  }> {
        const localVarPath = this.basePath + '/stats/historyUSD';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<StatsUSD>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<StatsUSD>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum TradeApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class TradeApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: TradeApiApiKeys, value: string) {
        (this.authentications as any)[TradeApiApiKeys[key]].apiKey = value;
    }
    /**
     * Please note that indices (symbols starting with `.`) post trades at intervals to the trade feed. These have a `size` of 0 and are used only to indicate a changing price.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html) for explanations of these fields.
     * @summary Get Trades.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public tradeGet (symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<Trade>;  }> {
        const localVarPath = this.basePath + '/trade';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Trade>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Trade>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get previous trades in time buckets.
     * @param binSize Time interval to bucket by. Available options: [1m,5m,1h,1d].
     * @param partial If true, will send in-progress (incomplete) bins for the current time period.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    public tradeGetBucketed (binSize?: string, partial?: boolean, symbol?: string, filter?: string, columns?: string, count?: number, start?: number, reverse?: boolean, startTime?: Date, endTime?: Date) : Promise<{ response: http.ClientResponse; body: Array<TradeBin>;  }> {
        const localVarPath = this.basePath + '/trade/bucketed';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (binSize !== undefined) {
            localVarQueryParameters['binSize'] = ObjectSerializer.serialize(binSize, "string");
        }

        if (partial !== undefined) {
            localVarQueryParameters['partial'] = ObjectSerializer.serialize(partial, "boolean");
        }

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (columns !== undefined) {
            localVarQueryParameters['columns'] = ObjectSerializer.serialize(columns, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (reverse !== undefined) {
            localVarQueryParameters['reverse'] = ObjectSerializer.serialize(reverse, "boolean");
        }

        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }

        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<TradeBin>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<TradeBin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum UserApiApiKeys {
    apiKey,
    apiNonce,
    apiSignature,
}

export class UserApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'api-key'),
        'apiNonce': new ApiKeyAuth('header', 'api-nonce'),
        'apiSignature': new ApiKeyAuth('header', 'api-signature'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: UserApiApiKeys, value: string) {
        (this.authentications as any)[UserApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Cancel a withdrawal.
     * @param token 
     */
    public userCancelWithdrawal (token: string) : Promise<{ response: http.ClientResponse; body: Transaction;  }> {
        const localVarPath = this.basePath + '/user/cancelWithdrawal';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling userCancelWithdrawal.');
        }


        let localVarUseFormData = false;

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Transaction;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Transaction");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404.
     * @summary Check if a referral code is valid.
     * @param referralCode 
     */
    public userCheckReferralCode (referralCode?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const localVarPath = this.basePath + '/user/checkReferralCode';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (referralCode !== undefined) {
            localVarQueryParameters['referralCode'] = ObjectSerializer.serialize(referralCode, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: number;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Confirm your email address with a token.
     * @param token 
     */
    public userConfirm (token: string) : Promise<{ response: http.ClientResponse; body: AccessToken;  }> {
        const localVarPath = this.basePath + '/user/confirmEmail';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling userConfirm.');
        }


        let localVarUseFormData = false;

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AccessToken;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AccessToken");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
     */
    public userConfirmEnableTFA (token: string, type?: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const localVarPath = this.basePath + '/user/confirmEnableTFA';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling userConfirmEnableTFA.');
        }


        let localVarUseFormData = false;

        if (type !== undefined) {
            localVarFormParams['type'] = ObjectSerializer.serialize(type, "string");
        }

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: boolean;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Confirm a withdrawal.
     * @param token 
     */
    public userConfirmWithdrawal (token: string) : Promise<{ response: http.ClientResponse; body: Transaction;  }> {
        const localVarPath = this.basePath + '/user/confirmWithdrawal';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling userConfirmWithdrawal.');
        }


        let localVarUseFormData = false;

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Transaction;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Transaction");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Disable two-factor auth for this account.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    public userDisableTFA (token: string, type?: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const localVarPath = this.basePath + '/user/disableTFA';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling userDisableTFA.');
        }


        let localVarUseFormData = false;

        if (type !== undefined) {
            localVarFormParams['type'] = ObjectSerializer.serialize(type, "string");
        }

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: boolean;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get your user model.
     */
    public userGet () : Promise<{ response: http.ClientResponse; body: User;  }> {
        const localVarPath = this.basePath + '/user';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: User;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "User");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get your current affiliate/referral status.
     */
    public userGetAffiliateStatus () : Promise<{ response: http.ClientResponse; body: Affiliate;  }> {
        const localVarPath = this.basePath + '/user/affiliateStatus';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Affiliate;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Affiliate");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get your account's commission status.
     */
    public userGetCommission () : Promise<{ response: http.ClientResponse; body: Array<UserCommission>;  }> {
        const localVarPath = this.basePath + '/user/commission';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<UserCommission>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<UserCommission>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get a deposit address.
     * @param currency 
     */
    public userGetDepositAddress (currency?: string) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/user/depositAddress';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
     * @param currency 
     */
    public userGetMargin (currency?: string) : Promise<{ response: http.ClientResponse; body: Margin;  }> {
        const localVarPath = this.basePath + '/user/margin';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Margin;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Margin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get your current wallet information.
     * @param currency 
     */
    public userGetWallet (currency?: string) : Promise<{ response: http.ClientResponse; body: Wallet;  }> {
        const localVarPath = this.basePath + '/user/wallet';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Wallet;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Wallet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     * @param currency 
     */
    public userGetWalletHistory (currency?: string) : Promise<{ response: http.ClientResponse; body: Array<Transaction>;  }> {
        const localVarPath = this.basePath + '/user/walletHistory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Transaction>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Transaction>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     * @param currency 
     */
    public userGetWalletSummary (currency?: string) : Promise<{ response: http.ClientResponse; body: Array<Transaction>;  }> {
        const localVarPath = this.basePath + '/user/walletSummary';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Transaction>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Transaction>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Log out of BitMEX.
     */
    public userLogout () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/user/logout';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Log all systems out of BitMEX. This will revoke all of your account's access tokens, logging you out on all devices.
     */
    public userLogoutAll () : Promise<{ response: http.ClientResponse; body: number;  }> {
        const localVarPath = this.basePath + '/user/logoutAll';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: number;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
     * @summary Get the minimum withdrawal fee for a currency.
     * @param currency 
     */
    public userMinWithdrawalFee (currency?: string) : Promise<{ response: http.ClientResponse; body: any;  }> {
        const localVarPath = this.basePath + '/user/minWithdrawalFee';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "any");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
     * @summary Get secret key for setting up two-factor auth.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    public userRequestEnableTFA (type?: string) : Promise<{ response: http.ClientResponse; body: boolean;  }> {
        const localVarPath = this.basePath + '/user/requestEnableTFA';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (type !== undefined) {
            localVarFormParams['type'] = ObjectSerializer.serialize(type, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: boolean;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This will send a confirmation email to the email address on record, unless requested via an API Key with the `withdraw` permission.
     * @summary Request a withdrawal to an external wallet.
     * @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
     * @param amount Amount of withdrawal currency.
     * @param address Destination Address.
     * @param otpToken 2FA token. Required if 2FA is enabled on your account.
     * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
     */
    public userRequestWithdrawal (currency: string, amount: number, address: string, otpToken?: string, fee?: number) : Promise<{ response: http.ClientResponse; body: Transaction;  }> {
        const localVarPath = this.basePath + '/user/requestWithdrawal';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling userRequestWithdrawal.');
        }

        // verify required parameter 'amount' is not null or undefined
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling userRequestWithdrawal.');
        }

        // verify required parameter 'address' is not null or undefined
        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling userRequestWithdrawal.');
        }


        let localVarUseFormData = false;

        if (otpToken !== undefined) {
            localVarFormParams['otpToken'] = ObjectSerializer.serialize(otpToken, "string");
        }

        if (currency !== undefined) {
            localVarFormParams['currency'] = ObjectSerializer.serialize(currency, "string");
        }

        if (amount !== undefined) {
            localVarFormParams['amount'] = ObjectSerializer.serialize(amount, "number");
        }

        if (address !== undefined) {
            localVarFormParams['address'] = ObjectSerializer.serialize(address, "string");
        }

        if (fee !== undefined) {
            localVarFormParams['fee'] = ObjectSerializer.serialize(fee, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Transaction;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Transaction");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Save user preferences.
     * @param prefs 
     * @param overwrite If true, will overwrite all existing preferences.
     */
    public userSavePreferences (prefs: string, overwrite?: boolean) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const localVarPath = this.basePath + '/user/preferences';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'prefs' is not null or undefined
        if (prefs === null || prefs === undefined) {
            throw new Error('Required parameter prefs was null or undefined when calling userSavePreferences.');
        }


        let localVarUseFormData = false;

        if (prefs !== undefined) {
            localVarFormParams['prefs'] = ObjectSerializer.serialize(prefs, "string");
        }

        if (overwrite !== undefined) {
            localVarFormParams['overwrite'] = ObjectSerializer.serialize(overwrite, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: User;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "User");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update your password, name, and other attributes.
     * @param firstname 
     * @param lastname 
     * @param oldPassword 
     * @param newPassword 
     * @param newPasswordConfirm 
     * @param username Username can only be set once. To reset, email support.
     * @param country Country of residence.
     * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key.
     */
    public userUpdate (firstname?: string, lastname?: string, oldPassword?: string, newPassword?: string, newPasswordConfirm?: string, username?: string, country?: string, pgpPubKey?: string) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const localVarPath = this.basePath + '/user';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        if (firstname !== undefined) {
            localVarFormParams['firstname'] = ObjectSerializer.serialize(firstname, "string");
        }

        if (lastname !== undefined) {
            localVarFormParams['lastname'] = ObjectSerializer.serialize(lastname, "string");
        }

        if (oldPassword !== undefined) {
            localVarFormParams['oldPassword'] = ObjectSerializer.serialize(oldPassword, "string");
        }

        if (newPassword !== undefined) {
            localVarFormParams['newPassword'] = ObjectSerializer.serialize(newPassword, "string");
        }

        if (newPasswordConfirm !== undefined) {
            localVarFormParams['newPasswordConfirm'] = ObjectSerializer.serialize(newPasswordConfirm, "string");
        }

        if (username !== undefined) {
            localVarFormParams['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (country !== undefined) {
            localVarFormParams['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (pgpPubKey !== undefined) {
            localVarFormParams['pgpPubKey'] = ObjectSerializer.serialize(pgpPubKey, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.apiKey.applyToRequest(localVarRequestOptions);

        this.authentications.apiNonce.applyToRequest(localVarRequestOptions);

        this.authentications.apiSignature.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: User;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "User");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
